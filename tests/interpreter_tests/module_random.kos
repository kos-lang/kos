# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import random
import base.range

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

# random.grandom.integer
do {
    var sum = 0
    for const i in range(0x100) {
        sum += random.grandom.integer() >> 13
    }

    sum >>= 59

    assert sum >= -0x10
    assert sum <  0x10

    for const i in range(10) {
        const value = random.grandom.integer(-9, 50)
        assert value >= -9
        assert value <= 50
    }

    do {
        const v = random.grandom.integer(0, 1)
        assert v == 0 || v == 1
    }

    assert random.grandom.integer(1, 1) == 1
    assert random.grandom.integer(-10000, -10000) == -10000

    expect_fail(()=>random.grandom.integer(1))
    expect_fail(()=>random.grandom.integer(min = 1))
    expect_fail(()=>random.grandom.integer(max = 1))
    expect_fail(()=>random.grandom.integer(1, 0))
}

# random.grandom.float
do {
    for const i in range(0x100) {
        const r = random.grandom.float()
        assert r >= 0
        assert r < 1
    }
}

# random.random.prototype.integer
do {
    expect_fail(()=>random.random.prototype.integer.apply())
    expect_fail(()=>random.random.prototype.integer.apply({}, []))
}

# random.seed
do {
    expect_fail(()=>random.random(true))
    expect_fail(()=>random.random(10e19))

    const seed = random.grandom.integer()

    const a = []

    do {
        const rand = random.random(seed)

        a.resize(256)

        for const i in range(256) {
            a[i] = rand.integer()
        }
    }

    do {
        const rand = random.random(seed)

        for const i in range(256) {
            assert a[i] == rand.integer()
        }
    }
}
