# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2020 Chris Dragan

import re
import base.print
import test_tools.expect_fail

fun check(result, begin, end)
{
    if result.begin != begin {
        print("Incorrect re begin: \(result.begin) - expected \(begin)")
        return false
    }
    if result.end != end {
        print("Incorrect re end: \(result.end) - expected \(end)")
        return false
    }
    return true
}

do {
    expect_fail(re.re)
}

do {
    re.re("")
}

do {
    re.re("^a.$")
}

do {
    re.re(r"a+?|(b|^cc)d")
}

do {
    expect_fail(() => re.re())
    expect_fail(() => re.re(r"("))
    expect_fail(() => re.re(r")"))
    expect_fail(() => re.re(r"a{1a}"))
    expect_fail(() => re.re(r"a{a}"))
    expect_fail(() => re.re(r"a{65536}"))
    expect_fail(() => re.re(r"a{4294967296}"))
    expect_fail(() => re.re(r"a{0}"))
    expect_fail(() => re.re(r"a{0,0}"))
    expect_fail(() => re.re(r"a{2,1}"))
    expect_fail(() => re.re(r"a{1,0}"))
    expect_fail(() => re.re(r"*"))
    expect_fail(() => re.re(r"+"))
    expect_fail(() => re.re(r"?"))
    expect_fail(() => re.re(r"{1}"))
    expect_fail(() => re.re(r"a**"))
    expect_fail(() => re.re(r"a*+"))
    expect_fail(() => re.re(r"a*??"))
    expect_fail(() => re.re(r"a*{1}"))
    expect_fail(() => re.re(r"["))
    expect_fail(() => re.re(r"[]"))
    expect_fail(() => re.re(r"[-]"))
    expect_fail(() => re.re(r"[a"))
    expect_fail(() => re.re(r"[0-]"))
    expect_fail(() => re.re(r"[0--]"))
    expect_fail(() => re.re(r"[1-0]"))
}

do {
    const r = re.re("a")
    assert r instanceof re.re
    assert ! (void instanceof re.re)
    assert ! ({} instanceof re.re)
}

do {
    const r = re.re("^a.b$")
    assert check(r.search("acb"), 0, 3)
    assert check(r.search("aab"), 0, 3)
    assert check(r.search("abb"), 0, 3)
    assert check(r.search("a.b"), 0, 3)
    assert check(r.search("a\x{80}b"), 0, 3)
    assert check(r.search("a\x{10000}b"), 0, 3)
    assert check(r.search("xyazbqm", 2, -2), 2, 5)
    assert check(r.search("XY\nazb\nqm"), 3, 6)
    assert r.search("") == void
    assert r.search("aacb") == void
    assert r.search("acbb") == void
    assert r.search("ac") == void
    assert r.search("acB") == void
    assert r.search("cb") == void
    assert r.search("Acb") == void
    assert r.search("xyazbqm", 2) == void
    assert r.search("xyazbqm", 2, void) == void
}

do {
    const r = re.re("x.\x{10000}")
    assert check(r.search("xy\x{10000}"), 0, 3)
    assert check(r.search("xxxxx.\x{10000}\x{10000}\x{10000}"), 4, 7)
    assert check(r.search("\x{10000}x.\x{10000}xxxx"), 1, 4)
    assert check(r.search("ABxz\x{10000}qm", 2), 2, 5)
    assert r.search("ABxz\x{10000}qm", 2, void)
    assert r.search("ABxz\x{10000}qm", 2, -2)
    assert r.search("") == void
    assert r.search("x") == void
    assert r.search("x\x{80}") == void
    assert r.search("x\x{10000}") == void
    assert r.search("xy\x{80}\x{10000}") == void
    assert r.search("ABxz\x{10000}qm", 3, -2) == void
    assert r.search("ABxz\x{10000}qm", 2, -3) == void
}

do {
    const r = re.re("")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 0, 0)
    assert check(r.search("abcdefgh"), 0, 0)
}

do {
    const r = re.re("^")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 0, 0)
    assert check(r.search("abcdefgh"), 0, 0)
}

do {
    const r = re.re("$")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 1, 1)
    assert check(r.search("abcdefgh"), 8, 8)
}

do {
    const r = re.re("")
    expect_fail(() => r.search())
    expect_fail(() => r.search(1))
    expect_fail(() => r.search(void))
    expect_fail(() => r.search([]))
    expect_fail(() => r.search("x", void))
    expect_fail(() => r.search("x", void, 1))
    expect_fail(() => r.search("x", 1, ""))
}

do {
    const r = re.re("ab|cd|ef")
    assert check(r.search("ab"), 0, 2)
    assert check(r.search("cd"), 0, 2)
    assert check(r.search("ef"), 0, 2)
    assert check(r.search("abcdef"), 0, 2)
    assert check(r.search("xaby"), 1, 3)
    assert check(r.search("xcdy"), 1, 3)
    assert check(r.search("xefy"), 1, 3)
    assert r.search("bc") == void
    assert r.search("xy") == void
    assert r.search("xay") == void
    assert r.search("xby") == void
    assert r.search("xdy") == void
    assert r.search("xey") == void
}

do {
    const r = re.re("a||b")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 0, 1)
    assert check(r.search("b"), 0, 0)
    assert check(r.search("c"), 0, 0)
    assert check(r.search("de"), 0, 0)
}

do {
    const r = re.re("^12|a(bc|d)$")
    assert check(r.search("12x"), 0, 2)
    assert check(r.search("xabc"), 1, 4)
    assert check(r.search("_xx_ad"), 4, 6)
    assert r.search("_12x") == void
    assert r.search("ab") == void
    assert r.search("xabcd") == void
    assert r.search("_xx_adb") == void
    assert r.search("xa") == void
}

do {
    const r = re.re("ab*?c")
    assert check(r.search("xacy"), 1, 3)
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert check(r.search("xabbbcyabcz"), 1, 6)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab+?c")
    assert r.search("xacy") == void
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab{3,5}?c")
    assert r.search("xacy") == void
    assert r.search("xabcy") == void
    assert r.search("xabbcy") == void
    assert check(r.search("xabbbcy"), 1, 6)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert check(r.search("xabbbbbcy"), 1, 8)
    assert r.search("xabbbbbbcy") == void
    assert r.search("xabbbbbbbcy") == void
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab*c")
    assert check(r.search("xacy"), 1, 3)
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab+c")
    assert r.search("xacy") == void
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab{3,5}c")
    assert r.search("xacy") == void
    assert r.search("xabcy") == void
    assert r.search("xabbcy") == void
    assert check(r.search("xabbbcy"), 1, 6)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert check(r.search("xabbbbbcy"), 1, 8)
    assert r.search("xabbbbbbcy") == void
    assert r.search("xabbbbbbbcy") == void
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("a(b|cd)??e")
    assert check(r.search("xaey"), 1, 3)
    assert check(r.search("xabey"), 1, 4)
    assert check(r.search("xacdey"), 1, 5)
    assert r.search("xabbey") == void
    assert r.search("xabcdey") == void
    assert r.search("xacdcdey") == void
}

do {
    const r = re.re("a(b|cd)?e")
    assert check(r.search("xaey"), 1, 3)
    assert check(r.search("xabey"), 1, 4)
    assert check(r.search("xacdey"), 1, 5)
    assert r.search("xabbey") == void
    assert r.search("xabcdey") == void
    assert r.search("xacdcdey") == void
}

do {
    const lazy   = re.re("a(b|c)+?c")
    const greedy = re.re("a(b|c)+c")
    assert check(lazy.search("aaabbcccd"), 2, 6)
    assert check(greedy.search("aaabbcccd"), 2, 8)
}
