# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2020 Chris Dragan

import re
import base.print
import test_tools.expect_fail

fun check(result, begin, end)
{
    if result.begin != begin {
        print("Incorrect re begin: \(result.begin) - expected \(begin)")
        return false
    }
    if result.end != end {
        print("Incorrect re end: \(result.end) - expected \(end)")
        return false
    }
    return true
}

fun find_all(regex, str)
{
    const found = []
    var pos = 0
    loop {
        const match = regex.search(str, pos)
        if ! match {
            break
        }

        found.push(str[match.begin : match.end])
        pos = match.end
    }

    return found
}

do {
    expect_fail(re.re)
}

do {
    re.re("")
}

do {
    re.re("^a.$")
}

do {
    re.re(r"a+?|(b|^cc)d")
}

do {
    expect_fail(() => re.re())
    expect_fail(() => re.re(r"("))
    expect_fail(() => re.re(r")"))
    expect_fail(() => re.re(r"a{1a}"))
    expect_fail(() => re.re(r"a{a}"))
    expect_fail(() => re.re(r"a{65536}"))
    expect_fail(() => re.re(r"a{4294967296}"))
    expect_fail(() => re.re(r"a{0}"))
    expect_fail(() => re.re(r"a{0,0}"))
    expect_fail(() => re.re(r"a{2,1}"))
    expect_fail(() => re.re(r"a{1,0}"))
    expect_fail(() => re.re(r"*"))
    expect_fail(() => re.re(r"+"))
    expect_fail(() => re.re(r"?"))
    expect_fail(() => re.re(r"{1}"))
    expect_fail(() => re.re(r"a**"))
    expect_fail(() => re.re(r"a*+"))
    expect_fail(() => re.re(r"a*??"))
    expect_fail(() => re.re(r"a*{1}"))
    expect_fail(() => re.re(r"["))
    expect_fail(() => re.re(r"[]"))
    expect_fail(() => re.re(r"[a"))
    expect_fail(() => re.re(r"[0-]"))
    expect_fail(() => re.re(r"[0--]"))
    expect_fail(() => re.re(r"[1-0]"))
}

do {
    const r = re.re("a")
    assert r instanceof re.re
    assert ! (void instanceof re.re)
    assert ! ({} instanceof re.re)
}

do {
    const r = re.re("[-]")
    assert check(r.search("abc-d"), 3, 4)
}

do {
    const r = re.re("[^-]+")
    assert check(r.search("-ab.c-"), 1, 5)
}

do {
    const r = re.re("^a.b$")
    assert check(r.search("acb"), 0, 3)
    assert check(r.search("aab"), 0, 3)
    assert check(r.search("abb"), 0, 3)
    assert check(r.search("a.b"), 0, 3)
    assert check(r.search("a\x{80}b"), 0, 3)
    assert check(r.search("a\x{10000}b"), 0, 3)
    assert check(r.search("xyazbqm", 2, -2), 2, 5)
    assert check(r.search("XY\nazb\nqm"), 3, 6)
    assert r.search("") == void
    assert r.search("aacb") == void
    assert r.search("acbb") == void
    assert r.search("ac") == void
    assert r.search("acB") == void
    assert r.search("cb") == void
    assert r.search("Acb") == void
    assert r.search("xyazbqm", 2) == void
    assert r.search("xyazbqm", 2, void) == void
}

do {
    const r = re.re("x.\x{10000}")
    assert check(r.search("xy\x{10000}"), 0, 3)
    assert check(r.search("xxxxx.\x{10000}\x{10000}\x{10000}"), 4, 7)
    assert check(r.search("\x{10000}x.\x{10000}xxxx"), 1, 4)
    assert check(r.search("ABxz\x{10000}qm", 2), 2, 5)
    assert r.search("ABxz\x{10000}qm", 2, void)
    assert r.search("ABxz\x{10000}qm", 2, -2)
    assert r.search("") == void
    assert r.search("x") == void
    assert r.search("x\x{80}") == void
    assert r.search("x\x{10000}") == void
    assert r.search("xy\x{80}\x{10000}") == void
    assert r.search("ABxz\x{10000}qm", 3, -2) == void
    assert r.search("ABxz\x{10000}qm", 2, -3) == void
}

do {
    const r = re.re("")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 0, 0)
    assert check(r.search("abcdefgh"), 0, 0)
}

do {
    const r = re.re("^")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 0, 0)
    assert check(r.search("abcdefgh"), 0, 0)
}

do {
    const r = re.re("$")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 1, 1)
    assert check(r.search("abcdefgh"), 8, 8)
}

do {
    const r = re.re("")
    expect_fail(() => r.search())
    expect_fail(() => r.search(1))
    expect_fail(() => r.search(void))
    expect_fail(() => r.search([]))
    expect_fail(() => r.search("x", void))
    expect_fail(() => r.search("x", void, 1))
    expect_fail(() => r.search("x", 1, ""))
}

do {
    const r = re.re("ab|cd|ef")
    assert check(r.search("ab"), 0, 2)
    assert check(r.search("cd"), 0, 2)
    assert check(r.search("ef"), 0, 2)
    assert check(r.search("abcdef"), 0, 2)
    assert check(r.search("xaby"), 1, 3)
    assert check(r.search("xcdy"), 1, 3)
    assert check(r.search("xefy"), 1, 3)
    assert r.search("bc") == void
    assert r.search("xy") == void
    assert r.search("xay") == void
    assert r.search("xby") == void
    assert r.search("xdy") == void
    assert r.search("xey") == void
}

do {
    const r = re.re("a||b")
    assert check(r.search(""), 0, 0)
    assert check(r.search("a"), 0, 1)
    assert check(r.search("b"), 0, 0)
    assert check(r.search("c"), 0, 0)
    assert check(r.search("de"), 0, 0)
}

do {
    const r = re.re("^12|a(bc|d)$")
    assert check(r.search("12x"), 0, 2)
    assert check(r.search("xabc"), 1, 4)
    assert check(r.search("_xx_ad"), 4, 6)
    assert r.search("_12x") == void
    assert r.search("ab") == void
    assert r.search("xabcd") == void
    assert r.search("_xx_adb") == void
    assert r.search("xa") == void
}

do {
    const r = re.re("ab*?c")
    assert check(r.search("xacy"), 1, 3)
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert check(r.search("xabbbcyabcz"), 1, 6)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab+?c")
    assert r.search("xacy") == void
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab{3,5}?c")
    assert r.search("xacy") == void
    assert r.search("xabcy") == void
    assert r.search("xabbcy") == void
    assert check(r.search("xabbbcy"), 1, 6)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert check(r.search("xabbbbbcy"), 1, 8)
    assert r.search("xabbbbbbcy") == void
    assert r.search("xabbbbbbbcy") == void
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab*c")
    assert check(r.search("xacy"), 1, 3)
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab+c")
    assert r.search("xacy") == void
    assert check(r.search("xabcy"), 1, 4)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("ab{3,5}c")
    assert r.search("xacy") == void
    assert r.search("xabcy") == void
    assert r.search("xabbcy") == void
    assert check(r.search("xabbbcy"), 1, 6)
    assert check(r.search("xabbbbcy"), 1, 7)
    assert check(r.search("xabbbbbcy"), 1, 8)
    assert r.search("xabbbbbbcy") == void
    assert r.search("xabbbbbbbcy") == void
    assert r.search("xbcy") == void
    assert r.search("xaby") == void
}

do {
    const r = re.re("a(b|cd)??e")
    assert check(r.search("xaey"), 1, 3)
    assert check(r.search("xabey"), 1, 4)
    assert check(r.search("xacdey"), 1, 5)
    assert r.search("xabbey") == void
    assert r.search("xabcdey") == void
    assert r.search("xacdcdey") == void
}

do {
    const r = re.re("a(b|cd)?e")
    assert check(r.search("xaey"), 1, 3)
    assert check(r.search("xabey"), 1, 4)
    assert check(r.search("xacdey"), 1, 5)
    assert r.search("xabbey") == void
    assert r.search("xabcdey") == void
    assert r.search("xacdcdey") == void
}

do {
    const lazy   = re.re("a(b|c)+?c")
    const greedy = re.re("a(b|c)+c")
    assert check(lazy.search("aaabbcccd"), 2, 6)
    assert check(greedy.search("aaabbcccd"), 2, 8)
}

do {
    const rg = re.re("(ab)|(cd)e|(x|yz|w)")

    const a1 = rg.search("1234ab56")
    assert a1.begin == 4
    assert a1.end   == 6
    assert a1.groups.size == 3
    assert a1.groups[0]   != void
    assert a1.groups[1]   == void
    assert a1.groups[2]   == void
    assert a1.groups[0].begin == 4
    assert a1.groups[0].end   == 6

    const a2 = rg.search("12acdef56")
    assert a2.begin == 3
    assert a2.end   == 6
    assert a2.groups.size == 3
    assert a2.groups[0]   == void
    assert a2.groups[1]   != void
    assert a2.groups[2]   == void
    assert a2.groups[1].begin == 3
    assert a2.groups[1].end   == 5

    const a3 = rg.search("12acdfyz56")
    assert a3.begin == 6
    assert a3.end   == 8
    assert a3.groups.size == 3
    assert a3.groups[0]   == void
    assert a3.groups[1]   == void
    assert a3.groups[2]   != void
    assert a3.groups[2].begin == 6
    assert a3.groups[2].end   == 8
}

do {
    const rg = re.re("(a(b|c|d)*e)f")

    const a = rg.search("0123aaabcbdbcefgh")
    assert a.begin == 6
    assert a.end   == 15
    assert a.groups.size     == 2
    assert a.groups[0]       != void
    assert a.groups[1]       != void
    assert a.groups[0].begin == 6
    assert a.groups[0].end   == 14
    assert a.groups[1].begin == 12
    assert a.groups[1].end   == 13
}

do {
    const r = re.re("[a]")

    const a = r.search("ABCbcdefg01234")
    assert a == void

    assert check(r.search("xyzabcabc"), 3, 4)
}

do {
    const r = re.re("[a-cb-ed-fb-c]*")

    assert check(r.search("this afabac dab"), 0, 0)
    assert check(r.search("afabac dab"), 0, 6)
}

do {
    const r = re.re("[a-cb-ed-fb-c]+")

    assert check(r.search("this afabac dab"), 5, 11)
}

do {
    const r = re.re("[^a-cb-ed-fb-c]+")

    assert check(r.search("afabac this bac"), 6, 12)
}

do {
    const r = re.re("[s-zm-pg-jea-c]+")
    const result = find_all(r, "this is `{NOT a rtest")
    assert result.size == 4
    assert result[0] == "this"
    assert result[1] == "is"
    assert result[2] == "a"
    assert result[3] == "test"

    const result2 = find_all(r, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
    assert result2.size == 5
    assert result2[0] == "abc"
    assert result2[1] == "e"
    assert result2[2] == "ghij"
    assert result2[3] == "mnop"
    assert result2[4] == "stuvwxyz"
}

do {
    const r = re.re("[^s-zm-pg-jea-c ]{2,}")
    const result = find_all(r, "this N is NOT df rtest")
    assert result.size == 2
    assert result[0] == "NOT"
    assert result[1] == "df"

    const result2 = find_all(r, "0123456789abddcdefghijklmnopqrstuvwxyz")
    assert result2.size == 4
    assert result2[0] == "0123456789"
    assert result2[1] == "dd"
    assert result2[2] == "kl"
    assert result2[3] == "qr"
}

do {
    const r = re.re("[zaybxcwdveuftgshriqjpkolnm]+")
    const result = find_all(r, "wait a `{1 minutez")
    assert result.size == 3
    assert result[0] == "wait"
    assert result[1] == "a"
    assert result[2] == "minutez"
}

do {
    const r = re.re("[^zaybxcwdveuftgshriqjpkolnm]+")
    const result = find_all(r, "wait a `{1 minutez")
    assert result.size == 2
    assert result[0] == " "
    assert result[1] == " `{1 "
}

do {
    const r = re.re("[A-BE-FI-JM-NQ-RU-VY-ZC-DG-HK-LO-PS-TW-X]+")
    const result = find_all(r, "THIS IS A @[big TEST")
    assert result.size == 4
    assert result[0] == "THIS"
    assert result[1] == "IS"
    assert result[2] == "A"
    assert result[3] == "TEST"
}

do {
    const r = re.re("[^A-BE-FI-JM-NQ-RU-VY-ZC-DG-HK-LO-PS-TW-X]+")
    const result = find_all(r, "THIS IS @[A big TEST")
    assert result.size == 3
    assert result[0] == " "
    assert result[1] == " @["
    assert result[2] == " big "
}

do {
    expect_fail(() => re.re("\\"))
    expect_fail(() => re.re("a\\"))
    expect_fail(() => re.re("[\\"))
}

do {
    const r = re.re(r"\\")
    check(r.search("abc\\d"), 3, 4)
    assert r.search("abc_d") == void
}

do {
    const r = re.re(r"x\d")
    check(r.search("abc9dx9e"), 5, 7)
}

do {
    const r = re.re(r"\d+")
    const result = find_all(r, "abcxyz0123456789ABCXYZ_!@#$%^&")
    assert result.size == 1
    assert result[0] == "0123456789"
}

do {
    const r = re.re(r"\D+")
    const result = find_all(r, "abcxyz0123456789ABCXYZ_!@#$%^&")
    assert result.size == 2
    assert result[0] == "abcxyz"
    assert result[1] == "ABCXYZ_!@#$%^&"
}

do {
    const r = re.re(r"\<")
    assert r.search("") == void
    assert r.search(" ") == void
    assert r.search("+-*/") == void
    assert check(r.search("a"), 0, 0)
    assert check(r.search(" a"), 1, 1)
    assert check(r.search(" +=012 "), 3, 3)
}

do {
    const r = re.re(r"\>")
    assert r.search("") == void
    assert r.search(" ") == void
    assert r.search("+-*/") == void
    assert check(r.search("a"), 1, 1)
    assert check(r.search(" a "), 2, 2)
    assert check(r.search(" +=012+ "), 6, 6)
}

do {
    const r = re.re(r"\b")
    assert r.search("") == void
    assert r.search(" ") == void
    assert r.search("+-*/") == void
    assert check(r.search("a"), 0, 0)
    assert check(r.search("a", 1), 1, 1)
    assert check(r.search(" a ", 1), 1, 1)
    assert check(r.search(" a ", 2), 2, 2)
    assert check(r.search(" +=012+ "), 3, 3)
    assert check(r.search(" +=012+ ", 4), 6, 6)
}

do {
    const r = re.re(r"\B")
    assert check(r.search(""), 0, 0)
    assert check(r.search(" "), 0, 0)
    assert check(r.search("+-*/"), 0, 0)
    assert r.search("a") == void
    assert r.search("a b c d") == void
    assert check(r.search("a b cd e"), 5, 5)
    assert check(r.search("a b c  e"), 6, 6)
}

do {
    const r = re.re(r"\<.*\>")
    assert check(r.search("....abc..."), 4, 7)
}

do {
    const r = re.re(r"\b.*\b")
    assert check(r.search("....abc..."), 4, 7)
}

do {
    const r = re.re(r"\B.*\B")
    assert check(r.search("a b cdef g"), 5, 7)
}
