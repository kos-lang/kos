# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import math
import base.string

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

fun close_to(value, target)
{
    const epsilon = 1.0 / 16384
    return (value > target - epsilon) && (value < target + epsilon)
}

# math constants
do {
    assert math.pi == 3.141592653589793238
    assert math.e  == 2.718281828459045235

    assert string(math.infinity)  == "infinity"
    assert string(-math.infinity) == "-infinity"
    assert string(math.nan)       == "nan"
}

# math.ceil
do {
    assert math.ceil(4)                  == 4
    assert math.ceil(0x4000000000000000) == 0x4000000000000000
    assert math.ceil(math.pi)            == 4
    expect_fail(()=>math.ceil(void))
}

# math.floor
do {
    assert math.floor(4)                  == 4
    assert math.floor(0x4000000000000000) == 0x4000000000000000
    assert math.floor(math.pi)            == 3
    expect_fail(()=>math.floor(void))
}

# math.abs
do {
    assert math.abs(-10)  == 10
    assert math.abs(10)   == 10
    assert math.abs(-5.6) == 5.6
    assert math.abs(4.7)  == 4.7

    assert math.abs(-math.infinity)         == math.infinity
    assert string(math.abs(-math.infinity)) == "infinity"

    for var shift in [62, 61, 60, 31, 30, 29, 28] {
        const positive = 1 << shift
        const negative = ~positive + 1
        assert positive == -negative
        assert math.abs(positive) == positive
        assert math.abs(negative) == positive
    }
}

# math.sqrt
do {
    assert math.sqrt(16)                 == 4
    assert math.sqrt(49.0)               == 7
    assert math.sqrt(0x4000000000000000) == 0x80000000
    expect_fail(()=>math.sqrt(void))
    expect_fail(()=>math.sqrt(-1))
    expect_fail(()=>math.sqrt(-0.5))
}

# math.infinity
do {
    const inf = (()=>math.infinity)()
    assert inf > 0
    assert inf > 0x4000000000000000
    assert inf > 1.7976931348623157e308
    assert inf == math.infinity
    const not = inf != math.infinity
    assert ! not
    assert math.abs(-inf) == math.infinity
}

# math.nan
do {
    const nan = (()=>math.nan)()
    assert nan != 0
    assert nan != 2
    assert nan != 1.7976931348623157e308
    assert nan != math.infinity
    assert ! (()=>nan == math.nan)()
    assert nan != math.nan
    assert ! (()=>-nan < math.nan)()
    assert ! (()=>-nan > math.nan)()
    assert ! (()=>nan < 0)()
    assert ! (()=>nan > 0)()
    assert ! (()=>nan < 1)()
    assert ! (()=>nan > 1)()
}

# math.is_infinity
do {
    assert ! math.is_infinity(0)
    assert ! math.is_infinity(0.0)
    assert ! math.is_infinity(0x8000000000000000)
    assert ! math.is_infinity(1.7976931348623157e308)
    assert ! math.is_infinity(math.nan)
    assert ! math.is_infinity(false)
    assert ! math.is_infinity(void)
    assert ! math.is_infinity({})
    assert math.is_infinity(math.infinity)
    assert math.is_infinity(-math.infinity)
}

# math.is_nan
do {
    assert ! math.is_nan(0)
    assert ! math.is_nan(0.0)
    assert ! math.is_nan(0x8000000000000000)
    assert ! math.is_nan(1.7976931348623157e308)
    assert ! math.is_nan(math.infinity)
    assert ! math.is_nan(-math.infinity)
    assert ! math.is_nan(false)
    assert ! math.is_nan(void)
    assert ! math.is_nan({})
    assert math.is_nan(math.nan)
}

# math.exp
do {
    expect_fail(()=>math.exp(void))
    expect_fail(()=>math.exp(false))
    expect_fail(()=>math.exp({}))

    const e   = math.e
    const err = 1e-10

    assert math.abs(math.exp(2)   - e * e)     < err
    assert math.abs(math.exp(3.0) - e * e * e) < err
    assert math.abs(math.exp(-1)  - 1 / e)     < err

    assert math.abs(math.exp(1) - e) < err
}

# math.expm1
do {
    expect_fail(()=>math.expm1(void))
    expect_fail(()=>math.expm1(false))
    expect_fail(()=>math.expm1({}))

    const e   = math.e
    const err = 1e-10

    assert math.abs(math.expm1(2)   - e * e + 1)     < err
    assert math.abs(math.expm1(3.0) - e * e * e + 1) < err
    assert math.abs(math.expm1(-1)  - 1 / e + 1)     < err
}

# math.pow
do {
    expect_fail(()=>math.pow(1, void))
    expect_fail(()=>math.pow(1, false))
    expect_fail(()=>math.pow(1, {}))
    expect_fail(()=>math.pow(void,  1))
    expect_fail(()=>math.pow(false, 1))
    expect_fail(()=>math.pow({},    1))
    expect_fail(()=>math.pow(-0.5, -0.5))
    expect_fail(()=>math.pow(0,     0))

    assert math.pow(2,   5)   == 32
    assert math.pow(2.5, 2.0) == 6.25
    assert math.pow(4,   0.5) == 2
    assert math.pow(-2,  3)   == -8

    assert math.pow(1, 0)              == 1
    assert math.pow(1, 1e100)          == 1
    assert math.pow(1, math.infinity)  == 1
    assert math.pow(1, -1.e100)        == 1
    assert math.pow(1, -math.infinity) == 1
    assert math.pow(1, math.nan)       == 1

    assert math.pow(0, 1e100)          == 0
    assert math.pow(0, math.infinity)  == 0
    assert math.pow(0, -1e100)         == 0
    assert math.pow(0, -math.infinity) == 0
    assert math.pow(0, math.nan)       == 0

    assert math.pow(1e100,          0) == 1
    assert math.pow(math.infinity,  0) == 1
    assert math.pow(-1e100,         0) == 1
    assert math.pow(-math.infinity, 0) == 1
    assert math.pow(math.nan,       0) == 1

    assert math.pow(1.7976931348623157e308, 2) == math.infinity
}

# math.min
do {
    expect_fail(()=>math.min())

    assert math.min(1) == 1
    assert math.min(1, -1) == -1
    assert math.min(1, 2, -2, 3) == -2
    assert math.min("bcd", "efg", "az", "hij") == "az"
}

# math.max
do {
    expect_fail(()=>math.max())

    assert math.max(1) == 1
    assert math.max(1, -1) == 1
    assert math.max(1, 2, -2, 3) == 3
    assert math.max("bcd", "efg", "az", "hij") == "hij"
    assert math.max("hij", "bcd", "efg", "az") == "hij"
}

# math.sin
do {
    assert close_to(math.sin(math.pi), 0)
    assert close_to(math.sin(-math.pi), 0)
    assert math.sin(0) == 0
    assert math.sin(math.pi / 2) == 1
    assert math.is_nan(math.sin(math.infinity))
    assert math.is_nan(math.sin(-math.infinity))
}

# math.cos
do {
    assert math.cos(math.pi) == -1
    assert math.cos(-math.pi) == -1
    assert math.cos(0) == 1
    assert close_to(math.cos(math.pi / 2), 0)
    assert math.is_nan(math.cos(math.infinity))
    assert math.is_nan(math.cos(-math.infinity))
}

# math.tan
do {
    assert math.tan(0) == 0
    assert math.is_nan(math.tan(math.infinity))
    assert math.is_nan(math.tan(-math.infinity))
}

# math.asin
do {
    assert math.asin(0) == 0
    assert math.asin(1) == math.pi / 2
    assert math.asin(-1) == -math.pi / 2
    expect_fail(()=>math.asin(-1.25))
    expect_fail(()=>math.asin(1.25))
    expect_fail(()=>math.asin(-math.infinity))
    expect_fail(()=>math.asin(math.infinity))
}

# math.acos
do {
    assert math.acos(0) == math.pi / 2
    assert math.acos(1) == 0
    assert math.acos(-1) == math.pi
    expect_fail(()=>math.acos(-1.25))
    expect_fail(()=>math.acos(1.25))
    expect_fail(()=>math.acos(-math.infinity))
    expect_fail(()=>math.acos(math.infinity))
}

# math.atan
do {
    assert math.atan(0) == 0
    assert math.atan(1)  > 0
    assert math.atan(-1) < 0
    assert math.atan(math.infinity)  == math.pi / 2
    assert math.atan(-math.infinity) == -math.pi / 2
}

# math.log
do {
    assert math.log(1)  == 0
    assert math.log(2)   > 0
    assert math.log(0.5) < 0
    assert math.log(math.infinity) == math.infinity
    expect_fail(()=>math.log(0))
    expect_fail(()=>math.log(-0.5))
    expect_fail(()=>math.log(-1))
    expect_fail(()=>math.log(-2))
    expect_fail(()=>math.log(-math.infinity))
}

# math.log10
do {
    assert math.log10(1)    == 0
    assert math.log10(10)   == 1
    assert math.log10(1000) == 3
    assert math.log10(0.01) == -2
    assert math.log10(math.infinity) == math.infinity
    expect_fail(()=>math.log10(0))
    expect_fail(()=>math.log10(-0.5))
    expect_fail(()=>math.log10(-1))
    expect_fail(()=>math.log10(-2))
    expect_fail(()=>math.log10(-math.infinity))
}

# math.log1p
do {
    assert math.log1p(0)   == 0
    assert math.log1p(1)    > 0
    assert math.log1p(-0.5) < 0
    assert math.log1p(math.infinity) == math.infinity
    expect_fail(()=>math.log1p(-1))
    expect_fail(()=>math.log1p(-1.5))
    expect_fail(()=>math.log1p(-2))
    expect_fail(()=>math.log1p(-3))
    expect_fail(()=>math.log1p(-math.infinity))
}
