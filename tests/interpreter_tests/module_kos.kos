# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2022 Chris Dragan

import base
import kos
import fs
import io
import test_tools.shared

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
        if base.args.size > 1 && base.args[1] == "-print" {
            e.print()
        }
    }
    assert failed
}

fun check_token(idx, token, expected, field)
{
    const cur_value = token[field]
    const exp_value = expected[idx][field]
    const sep       = typeof exp_value == "string" ? "'" : ""
    if cur_value != exp_value {
        io.stderr.print("expected '\(field)' at index \(idx) to be \(sep)\(exp_value
                         )\(sep) but got \(sep)\(cur_value)\(sep)")
    }
    assert cur_value == exp_value
}

fun check_all_tokens(lexer, expected)
{
    for const i, token in base.enumerate(lexer) {
        assert i < expected.size
        for const field, _ in expected[i] {
            check_token(i, token, expected, field)
        }
    }
}

do {
    const script = "try/*comment*/+0=0x44"

    const expected = [
        { line: 1, column: 1,  type: kos.token_keyword,    token: "try"         },
        { line: 1, column: 4,  type: kos.token_comment,    token: "/*comment*/" },
        { line: 1, column: 15, type: kos.token_operator,   token: "+"           },
        { line: 1, column: 16, type: kos.token_numeric,    token: "0"           },
        { line: 1, column: 17, type: kos.token_operator,   token: "="           },
        { line: 1, column: 18, type: kos.token_numeric,    token: "0x44"        },
    ]

    check_all_tokens(kos.raw_lexer(script), expected)
    check_all_tokens(kos.raw_lexer(base.buffer(script)), expected)
    check_all_tokens(kos.lexer("file", script), expected)
    check_all_tokens(kos.lexer("file", base.buffer(script)), expected)

    fun realloc_buf_lexer(script)
    {
        const buf = base.buffer()
        buf.pack("s", script)

        for const i, token in base.enumerate(kos.raw_lexer(buf)) {
            if i == 2 {
                # Force buffer reallocation in the middle of parsing
                buf.reserve(65536)
            }

            yield token
        }
    }

    check_all_tokens(realloc_buf_lexer(script), expected)
}

do {
    expect_fail(fun {
        const it = kos.raw_lexer("'")
        it()
    })
}

do {
    const lexer = kos.raw_lexer(")hello\"")

    const t1 = lexer()
    assert t1.line   == 1
    assert t1.column == 1
    assert t1.type   == kos.token_separator
    assert t1.sep    == kos.sep_paren_close
    assert t1.token  == ")"

    const t2 = lexer(kos.continue_string)
    assert t2.line   == 1
    assert t2.column == 1
    assert t2.type   == kos.token_string
    assert t2.token  == ")hello\""

    expect_fail(lexer)
}

do {
    const lexer = kos.raw_lexer(")str\"")
    const t     = lexer(kos.continue_string)

    assert t.type  == kos.token_separator
    assert t.sep   == kos.sep_paren_close
    assert t.token == ")"
}

do {
    const lexer = kos.raw_lexer("\"a\\()b\"")

    const t1 = lexer()
    assert t1.line   == 1
    assert t1.column == 1
    assert t1.type   == kos.token_string_open
    assert t1.token  == "\"a\\("

    const t2 = lexer(kos.any_token)
    assert t2.line   == 1
    assert t2.column == 5
    assert t2.type   == kos.token_separator
    assert t2.sep    == kos.sep_paren_close
    assert t2.token  == ")"

    const t3 = lexer(kos.continue_string)
    assert t3.line   == 1
    assert t3.column == 5
    assert t3.type   == kos.token_string
    assert t3.token  == ")b\""
}

do {
    const lexer = kos.raw_lexer("(str\"")

    const t1 = lexer()
    expect_fail(()=>lexer(kos.continue_string))
}

do {
    const script = "{([\"\\()\"])}"

    const expected = [
        { line: 1, column: 1, type: kos.token_separator,   sep: kos.sep_curly_open,   token: "{"     },
        { line: 1, column: 2, type: kos.token_separator,   sep: kos.sep_paren_open,   token: "("     },
        { line: 1, column: 3, type: kos.token_separator,   sep: kos.sep_square_open,  token: "["     },
        { line: 1, column: 4, type: kos.token_string_open, sep: kos.sep_none,         token: "\"\\(" }, #)\"
        { line: 1, column: 7, type: kos.token_string,      sep: kos.sep_none,         token: ")\""   },
        { line: 1, column: 9, type: kos.token_separator,   sep: kos.sep_square_close, token: "]"     },
        { line: 1, column:10, type: kos.token_separator,   sep: kos.sep_paren_close,  token: ")"     },
        { line: 1, column:11, type: kos.token_separator,   sep: kos.sep_curly_close,  token: "}"     }
    ]

    check_all_tokens(kos.lexer("filename", script), expected)
}

do {
    const script = "+\\hello"

    do {
        const lexer = kos.raw_lexer(script)
        const token = lexer()
        assert token.type  == kos.token_operator
        assert token.token == "+"
        assert token.op    == kos.op_add
        expect_fail(lexer)
        expect_fail(lexer)
    }

    const lexer = kos.raw_lexer(script, true) # ignore_errors=true

    const expected = [
        { line: 1, column: 1, type: kos.token_operator,   op: kos.op_add,  sep: kos.sep_none, token: "+"     },
        { line: 1, column: 2, type: kos.token_whitespace, op: kos.op_none, sep: kos.sep_none, token: "\\"    },
        { line: 1, column: 3, type: kos.token_identifier, op: kos.op_none, sep: kos.sep_none, token: "hello" },
    ]

    check_all_tokens(lexer, expected)

    expect_fail(lexer)
}

do {
    const lexer = kos.raw_lexer("123#456")

    const expected = [
        { line: 1, column: 1, type: kos.token_numeric, op: kos.op_none, sep: kos.sep_none, token: "123"  },
        { line: 1, column: 4, type: kos.token_comment, op: kos.op_none, sep: kos.sep_none, token: "#456" },
    ]

    check_all_tokens(lexer, expected)

    expect_fail(lexer)
}

do {
    const lines = [
        "\n",
        "\"hello\".void\n",
        "        12+true"
    ]
    const expected = [
        { line: 1, column: 1,  type: kos.token_eol,        token: "\n"        },
        { line: 2, column: 1,  type: kos.token_string,     token: "\"hello\"" },
        { line: 2, column: 8,  type: kos.token_operator,   token: "."         },
        { line: 2, column: 9,  type: kos.token_keyword,    token: "void"      },
        { line: 2, column: 13, type: kos.token_eol,        token: "\n"        },
        { line: 3, column: 1,  type: kos.token_whitespace, token: "        "  },
        { line: 3, column: 9,  type: kos.token_numeric,    token: "12"        },
        { line: 3, column: 11, type: kos.token_operator,   token: "+"         },
        { line: 3, column: 12, type: kos.token_keyword,    token: "true"      },
    ]
    check_all_tokens(kos.lexer("", lines.iterator()), expected)
}

do {
    const ver = kos.version
    assert typeof ver == "array"
    assert ver.size == 3
    for const val in ver {
        assert typeof val == "integer"
    }
}

do {
    assert kos.version.size == 3

    var failed = false
    try {
        kos.version.resize(1)
    }
    catch const e {
        failed = true
    }

    assert failed
    assert kos.version.size == 3
}

do {
    const version = kos.version[:]

    var failed = false
    try {
        kos.version[1] = version[1] + 10
    }
    catch const e {
        failed = true
    }

    assert failed
    assert kos.version[1] == version[1]
}

do {
    assert kos.search_paths().any(s => s.ends_with("interpreter_tests"))
}

do {
    const filename = "__test_kos_exec"

    const test_script = "import io ; with const f = io.create(\"\(filename)\") { f.print(\"Hello, Kos\") }"

    fun run_execute_test(script, name = void)
    {
        fs.remove(filename)
        assert ! fs.file_exists(filename)

        assert kos.execute(script, name) == void

        assert fs.file_exists(filename)
        with const f = io.open(filename, io.ro) {
            assert base.string(f.read()).strip() == "Hello, Kos"
        }

        fs.remove(filename)
    }

    run_execute_test(test_script)
    run_execute_test(base.buffer(test_script), "from buffer")
}

do {
    assert kos.execute("return 42") == 42
    assert kos.execute("72") == 72
    assert kos.execute("") == void
}

do {
    assert shared.size == 0

    # push() is the last statement which returns 0
    assert kos.execute("import test_tools.shared ; shared.push(fun(a, b) { return a + b + 1 })") == 0

    assert shared.size == 1
    assert typeof shared[0] == "function"
    assert shared[0](2, 4) == 7
}

do {
    var exc = void
    try {
        kos.execute("throw \"hello\"")
    }
    catch const e {
        exc = e.value
    }

    assert exc == "hello"
}

do {
    assert kos.execute("typeof print", "", true)
}

do {
    expect_fail(() => kos.execute("$invalid$ syntax error"))
    expect_fail(() => kos.execute("var redeclared = 0; var redeclared = 1"))
    expect_fail(() => kos.execute("import nonexistentmodule"))
    expect_fail(() => kos.execute("typeof print", "", false))
}

public var stage = 0

# Import self from a script and make sure importing the same module multiple
# times doesn't re-run it
do {
    assert kos.execute("import module_kos.stage; stage") == 0
    stage = 1
    assert kos.execute("import module_kos.stage; stage") == 1
    stage = 2
    assert kos.execute("import module_kos.stage; stage") == 2
}
