#
# Copyright (c) 2014-2017 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

import lang
import kos

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
        if lang.args.size > 0 && lang.args[0] == "-print" {
            e.print()
        }
    }
    assert failed
}

do {
    const buf = lang.buffer();
    buf.pack("s", "try/*comment*/+0=0x44")
    const expected = [ [  1, "token_keyword",  "try"         ],
                       [  4, "token_comment",  "/*comment*/" ],
                       [ 15, "token_operator", "+"           ],
                       [ 16, "token_numeric",  "0"           ],
                       [ 17, "token_operator", "="           ],
                       [ 18, "token_numeric",  "0x44"        ] ]
    var idx = 0

    for var token in kos.lexer(buf) {
        assert token.line   == 1
        assert token.column == expected[idx][0]
        assert token.type   == kos[expected[idx][1]]
        assert token.token  == expected[idx][2]
        idx += 1
        if idx == 3 {
            buf.reserve(1024)
        }
    }

    assert idx == 6
}

do {
    expect_fail(fun {
        const buf = lang.buffer()
        buf.pack("s", "'")
        const it = kos.lexer(buf)
        it()
    })
}
