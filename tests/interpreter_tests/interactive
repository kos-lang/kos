#!/bin/sh

# Copyright (c) 2014-2017 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

set -e

case "$UNAME" in
    CYGWIN*) export SHELLOPTS ; set -o igncr ;;
esac

if [ $# -ne 2 ]; then
    echo "Usage: $0 <kos> <output_dir>"
    exit 1
fi

KOS="$1"
OUTPUT="$2/interactive"

##############################################################################
# Test -c with a script which prints one line in two statements

"$KOS" -c 'print_("Hello, ")
print("Kos")
' > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "Hello, Kos" ]; then
    echo "Expected output to contain: \"Hello, Kos\", but it is different" >&2
    hexdump -Cv "$OUTPUT"
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test -v

"$KOS" -v -c 'print("Hello")' > "$OUTPUT"

if ! grep -q "Kos module search paths: \., " "$OUTPUT"; then
    echo "Expected output to contain module search paths, but they are missing" >&2
    cat "$OUTPUT"
    exit 1
fi
if ! grep -q "Kos loading module lang from" "$OUTPUT"; then
    echo "Expected output to contain information about loaded module lang, but it is missing" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test -c in conjunction with script arguments

"$KOS" --command "print(integer(args[1]) + integer(args[2]))" 20 -5 > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "15" ]; then
    echo "Expected output to contain: \"15\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test -c with missing argument

RET=0
"$KOS" -c > "$OUTPUT" 2> "$OUTPUT.err" || RET=$?

if [ $RET != "1" ]; then
    echo "Expected exit code 1, but it is $RET"
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

CONTENTS=`cat "$OUTPUT"`

if [ -n "$CONTENTS" ]; then
    echo "Expected empty output, but it is different" >&2
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

rm "$OUTPUT.err"

##############################################################################
# Test script read from stdin pipe

echo 'print("From stdin")' | "$KOS" > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "From stdin" ]; then
    echo "Expected output to contain: \"From stdin\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

echo 'print(args.size)' | "$KOS" - > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "1" ]; then
    echo "Expected output to contain: \"1\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

echo 'print(integer(args[1]) + 1)' | "$KOS" - 17 > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "18" ]; then
    echo "Expected output to contain: \"18\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test interactive interpreter with a single line of input ending with EOL

"$KOS" -c 'print("print(true)")' | KOSINTERACTIVE=1 "$KOS" | grep -v "^>" > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "^Kos .* interactive interpreter"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed "1 d" "$OUTPUT"`

if [ "$CONTENTS" != "true" ]; then
    echo "Expected output to contain: \"true\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test interactive interpreter with import statements

"$KOS" -c 'print_("import file\nfile.stdout.print(123) ; void")' | KOSINTERACTIVE=1 "$KOS" | grep -v "^>" > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "^Kos .* interactive interpreter"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed "1 d" "$OUTPUT"`

if [ "$CONTENTS" != "123" ]; then
    echo "Expected output to contain: \"123\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test interactive interpreter with two lines of input and several EOLs

"$KOS" -c 'print_("\nprint(true)\n\nprint(void)")' | KOSINTERACTIVE=1 "$KOS" | grep -v "^>" > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "^Kos .* interactive interpreter"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "true" ]; then
    echo "Expected second line of output to contain: \"true\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "3 p" "$OUTPUT"`

if [ "$CONTENTS" != "void" ]; then
    echo "Expected third line of output to contain: \"void\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test various outputs from interactive interpreter

"$KOS" -c 'print_("true\nvoid\n1\n\"\\x7F\\x{0FF}\\x{100}\\x{fffff}\"\n\"\"\n\"x\"")' | KOSINTERACTIVE=1 "$KOS" | grep -v "^>" > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "^Kos .* interactive interpreter"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "true" ]; then
    echo "Expected line 2 of output to contain: \"true\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "3 p" "$OUTPUT"`

if [ "$CONTENTS" != "1" ]; then
    echo "Expected line 3 of output to contain: \"1\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "4 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"\\x7f\\xff\\x{100}\\x{fffff}\"" ]; then
    echo "Expected line 4 of output to contain: \"\"\\\x7f\\\xff\\\x{100}\\\x{fffff}\"\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "5 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"\"" ]; then
    echo "Expected line 5 of output to contain: \"\"\"\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "6 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"x\"" ]; then
    echo "Expected line 6 of output to contain: \"\"x\"\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi
