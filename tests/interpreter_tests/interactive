#!/bin/sh

# Copyright (c) 2014-2020 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

set -e

if [ $# -ne 2 ]; then
    echo "Usage: $0 <kos> <output_dir>"
    exit 1
fi

remove_cr()
{
    tr -d '\r'
}

remove_prompt()
{
    grep -v "> \|_ "
}

find_in_output()
{
    if ! grep -q "$1" "$OUTPUT"; then
        echo "Regex failed to match the output: '$1'" >&2
        echo "-- Output: -----------------------------"
        cat "$OUTPUT"
        echo "----------------------------------------"
        exit 1
    fi
}

KOS="$1"
OUTPUT="$2/interactive"
SIGNATURE="^Kos .* interactive interpreter"

##############################################################################
# Test -c with a script which prints one line in two statements

"$KOS" -c 'print("Hello,", "Kos")' | remove_cr > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "Hello, Kos" ]; then
    echo "Expected output to contain: \"Hello, Kos\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test -v

"$KOS" -v -c 'print("Hello")' | remove_cr > "$OUTPUT"

find_in_output "Kos module search paths: \., "
find_in_output "Kos loading module base from"

##############################################################################
# Test -c in conjunction with script arguments

"$KOS" --command "print(integer(args[1]) + integer(args[2]))" 20 -5 | remove_cr > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "15" ]; then
    echo "Expected output to contain: \"15\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test -c with missing argument

RET=0
"$KOS" -c > "$OUTPUT.out" 2> "$OUTPUT.err" || RET=$?

remove_cr < "$OUTPUT.out" > "$OUTPUT"
rm "$OUTPUT.out"

if [ $RET != "1" ]; then
    echo "Expected exit code 1, but it is $RET"
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

CONTENTS=`cat "$OUTPUT"`

if [ -n "$CONTENTS" ]; then
    echo "Expected empty output, but it is different" >&2
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

rm "$OUTPUT.err"

##############################################################################
# Test -c with undeclared identifier

RET=0
"$KOS" -c foo > "$OUTPUT.out" 2> "$OUTPUT.err" || RET=$?

remove_cr < "$OUTPUT.out" > "$OUTPUT"
rm "$OUTPUT.out"

if [ $RET != "1" ]; then
    echo "Expected exit code 1, but it is $RET"
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

if ! grep -q "undeclared identifier" "$OUTPUT.err"; then
    echo "Expected error text: \"undeclared identifier\""
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

CONTENTS=`cat "$OUTPUT"`

if [ -n "$CONTENTS" ]; then
    echo "Expected empty output, but it is different" >&2
    cat "$OUTPUT"
    cat "$OUTPUT.err"
    exit 1
fi

rm "$OUTPUT.err"

##############################################################################
# Test script read from stdin pipe

echo 'print("From stdin")' | "$KOS" | remove_cr > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "From stdin" ]; then
    echo "Expected output to contain: \"From stdin\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

echo 'print(args.size)' | "$KOS" - | remove_cr > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "1" ]; then
    echo "Expected output to contain: \"1\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

echo 'print(integer(args[1]) + 1)' | "$KOS" - 17 | remove_cr > "$OUTPUT"

CONTENTS=`cat "$OUTPUT"`

if [ "$CONTENTS" != "18" ]; then
    echo "Expected output to contain: \"18\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test interactive interpreter with a single line of input ending with EOL

"$KOS" -c 'print("print(true)")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed "1 d" "$OUTPUT"`

if [ "$CONTENTS" != "true" ]; then
    echo "Expected output to contain: \"true\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test interactive interpreter with import statements

"$KOS" -c 'print("import io"); print("io.stdout.print(123) ; void")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed "1 d" "$OUTPUT"`

if [ "$CONTENTS" != "123" ]; then
    echo "Expected output to contain: \"123\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test interactive interpreter with two lines of input and several EOLs

"$KOS" -c 'print() ; print("print(true)") ; print() ; print("print(void)")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "true" ]; then
    echo "Expected second line of output to contain: \"true\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "3 p" "$OUTPUT"`

if [ "$CONTENTS" != "void" ]; then
    echo "Expected third line of output to contain: \"void\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test quoted strings from interactive interpreter

"$KOS" -c 'print("\"a\\xffb\"")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"a\\xffb\"" ]; then
    echo 'Expected second line of output to contain: ""a\\xffb"", but it is different' >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test various outputs from interactive interpreter

"$KOS" -c 'print("true") ; print("void") ; print("1") ; print("\"\\x7F\\x{0FF}\\x{100}\\x{fffff}\"") ; print("\"\"") ; print("\"x\"")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "true" ]; then
    echo "Expected line 2 of output to contain: \"true\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "3 p" "$OUTPUT"`

if [ "$CONTENTS" != "1" ]; then
    echo "Expected line 3 of output to contain: \"1\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "4 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"\\x7f\\xff\\x{100}\\x{fffff}\"" ]; then
    echo "Expected line 4 of output to contain: \"\"\\\x7f\\\xff\\\x{100}\\\x{fffff}\"\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "5 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"\"" ]; then
    echo "Expected line 5 of output to contain: \"\"\"\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "6 p" "$OUTPUT"`

if [ "$CONTENTS" != "\"x\"" ]; then
    echo "Expected line 6 of output to contain: \"\"x\"\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test multiple input lines

"$KOS" -c 'print("fun(x) {") ; print("return x + 1") ; print("} (41)")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -ne 2 ]; then
    echo "Expected one line of output" >&2
    cat "$OUTPUT"
    exit 1
fi

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "42" ]; then
    echo "Expected second line of output to contain: \"42\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Test function declared through the interpreter

"$KOS" -c 'print("fun f(a) { print(\"arg: \\(a)\") }") ; print("f(10)")' | KOSINTERACTIVE=1 "$KOS" | remove_prompt | remove_cr > "$OUTPUT"

if ! head -n 1 "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    head -n "$OUTPUT"
    exit 1
fi

CONTENTS=`sed -n "2 p" "$OUTPUT"`

if [ "$CONTENTS" != "arg: 10" ]; then
    echo "Expected line 2 of output to contain: \"arg: 10\", but it is different" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Refer to module twice

"$KOS" -c 'print("import random"); print("var r = random.random()") ; print("r = random.random()")' | KOSINTERACTIVE=1 "$KOS" 2>&1 | remove_prompt | remove_cr > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -ne 1 ]; then
    echo "Expected one line of output" >&2
    cat "$OUTPUT"
    exit 1
fi

if ! sed -n "1 p" "$OUTPUT" | grep -q "$SIGNATURE"; then
    echo "Expected first line to have interactive interpreter signature" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Load base by module name

"$KOS" base > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -ne 0 ]; then
    echo "Expected zero lines of output" >&2
    cat "$OUTPUT"
    exit 1
fi

##############################################################################
# Help

"$KOS" -h | remove_cr > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -ne 6 ]; then
    echo "Expected 6 lines of output" >&2
    cat "$OUTPUT"
    exit 1
fi

find_in_output "^Usage: kos"

##############################################################################
# Version

"$KOS" --version | remove_cr > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -ne 1 ]; then
    echo "Expected one line of output" >&2
    cat "$OUTPUT"
    exit 1
fi

find_in_output "^Kos [0-9]\."

##############################################################################
# CR and TAB

rm -f "$OUTPUT.data"
"$KOS" -c 'import io; io.create(args[1]).write(buffer([13, 13, 10, 13], "/*", [9], "*/xxx"))' "$OUTPUT.data"
"$KOS" "$OUTPUT.data" 2>&1 | remove_cr > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -ne 3 ]; then
    echo "Expected 3 lines of output" >&2
    cat "$OUTPUT"
    exit 1
fi

find_in_output "interactive.data.*:4:11:"
find_in_output "^          ^"

rm -f "$OUTPUT.data"

##############################################################################
# -vv

"$KOS" -vv -c 'print("Hello")' | remove_cr > "$OUTPUT"

COUNT=$(wc -l < "$OUTPUT")

if [ $COUNT -lt 7 ]; then
    echo "Expected at least 7 lines of output" >&2
    cat "$OUTPUT"
    exit 1
fi

find_in_output "^base: parsing *:"
find_in_output "^base: compilation *:"
find_in_output "^base: optimization passes *:"
find_in_output "^Hello$"
