# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

import base
import test_tools.expect_fail

##############################################################################

expect_fail(()=>{}[""])

do {
    const a = {}
    a[""] = 1
    assert a[""] == 1
}

do {
    const a = {}
    a.x = 0
    assert a.x == 0
}

do {
    const a = { x: 1, y: 2 }
    assert a.x == 1
    assert a.x == a["x"]
    const yy = "y"
    assert a[yy] == 2
    assert a.y == a["y"]
    a["x"]
}

do {
    var a = { aa: 11, bb: 22 }
    assert delete a.x == void
    assert a.aa == 11
    assert a.bb == 22

    assert delete a.bb == void
    assert a.aa == 11
    expect_fail(()=>a.bb)

    const aa = "aa"
    assert delete a[aa] == void
    expect_fail(()=>a.aa)
}

do {
    const o = {
        "orange" : 0,
        lemon    : 1,
        "apple"  : 2,
        pear     : 3,
        "melon"  : 4,
        peach    : 5
    }

    assert o.orange   == 0
    assert o["lemon"] == 1
    assert o.apple    == 2
    assert o["pear"]  == 3
    assert o.melon    == 4
    assert o["peach"] == 5
}

do {
    fun constr
    {
    }

    expect_fail(fun {
        constr.prototype = {}
    })
}

do {
    class constr {
        constructor {
            this.b = "b"
        }
    }

    constr.prototype = { a: "a" }

    const obj = constr()
    assert obj instanceof constr
    assert obj.a == "a"
    assert obj.b == "b"

    delete obj.a
    assert obj.a == "a"

    obj.a = "x"
    assert obj.a == "x"

    delete obj.a
    assert obj.a == "a"

    assert obj.b == "b"
    delete obj.b
    expect_fail(()=>obj.b)
}

do {
    class constr {
        constructor(a) {
            this.a = a + 1
        }
    }

    expect_fail(()=>constr())

    const obj = constr(8)

    assert obj.a == 9
}

do {
    var obj = class { constructor { this.a = 123 } }
    obj = obj()
    assert typeof obj == "object"
    assert obj.a      == 123
}

do {
    class constr {
        constructor(a) {
            this.a = a + 2
        }
    }

    var obj = 10
    obj = constr(obj)
    assert typeof obj == "object"
    assert obj.a      == 12
}

do {
    const base = [void, void, void]

    class constr {
        constructor(a) {
            this.a = a * 2
        }
    }

    constr.prototype = base

    const obj = constr(5)
    assert obj instanceof constr

    assert obj.a == 10
    expect_fail(()=>obj[0])
    expect_fail(()=>obj.length)
}

do {
    const obj = {}
    assert ! ("xyz" in obj)
    assert ! ("xyz" propertyof obj)
    obj.xyz = void
    assert "xyz" in obj
    assert "xyz" propertyof obj
}

do {
    const obj   = {}
    const prop  = "xyz"
    const value = 123
    assert ! (prop in obj)
    assert ! (prop propertyof obj)
    obj[prop] = value
    assert prop in obj
    assert prop propertyof obj
    assert prop  == "xyz"
    assert value == 123
}

do {
    class constr1 {
        constructor (a) {
            this.a = a
        }
    }

    class constr2 {
        constructor {
            this.a = void
        }
    }

    const obj   = constr1(42)
    const other = { a: 42 }

    assert obj != other

    assert obj instanceof constr1
    assert ! (other instanceof constr1)
    assert ! (obj instanceof constr2)

    assert obj.a   == 42
    assert other.a == 42

    constr1.prototype = {}

    assert ! (obj instanceof constr1)
}

do {
    class constr {
        constructor {
            this.c = 0
            this.d = 1
            this.e = 2
        }
    }

    constr.prototype.a = 10
    constr.prototype.b = 11

    const obj =  constr()

    const values = ["c", "d", "e"]

    for const key, value in obj {
        const value = obj[key]
        if typeof value == "integer" && value >= 0 && value < values.size {
            assert values[value] == key
            values[value] = void
        }
    }

    for const i in base.range(values.size) {
        assert values[i] == void
    }
}

do {
    fun get_constr
    {
        return class { }
    }

    const o1 = get_constr()()
    const o2 = get_constr()()

    assert o1 instanceof get_constr()
    assert o2 instanceof get_constr()
}

do {
    class complex {
        constructor(re, im)
        {
            this.re = re
            this.im = im
        }

        fun add(other)
        {
            return complex(this.re + other.re,
                           this.im + other.im)
        }

        fun dot(other)
        {
            return this.re * other.re +
                   this.im * other.im
        }
    }

    assert typeof complex == "class"

    const c1 = complex(-1, 2)
    const c2 = complex(3, -5)
    const c3 = c1.add(c2)
    const d  = c1.dot(c2)

    assert c1 instanceof complex
    assert c2 instanceof complex
    assert c3 instanceof complex
    assert typeof d == "integer"

    assert c3.re == 2
    assert c3.im == -3
    assert d     == -13

    expect_fail(complex)
    expect_fail(()=>complex(1))
}

do {
    class value {
        fun setv(x) {
            this.x = x
        }
        fun getv() {
            return this.x
        }
    }

    assert typeof value == "class"

    const v = value();
    expect_fail(()=>v.getv())
    assert v.setv(42) == void
    assert v.getv() == 42
}

do {
    class empty_ctor {
        constructor {
            this.x = 42
        }
    }

    assert typeof empty_ctor == "class"

    const v = empty_ctor()
    assert v.x == 42
}

do {
    class empty { }

    empty.a = 1
    empty.b = 2

    const e = empty()

    expect_fail(()=>e.a)
    expect_fail(()=>e.b)

    assert empty.a == 1
    assert empty.b == 2
}

# Multiple return paths in constructor
do {
    class make {
        constructor(a, b = void) {
            this.a = a
            if ! b { return }
            this.b = b
        }
    }

    const o = make(1, 2)
    assert o.a == 1
    assert o.b == 2

    const p = make(3)
    assert p.a == 3
    assert ! ("b" in p)
    assert ! ("b" propertyof p)
}

# prototype preservation
do {
    fun get_class(a)
    {
        return class {
            constructor {
                this.a = a
            }
        }
    }

    const c1 = get_class(42)
    const c2 = get_class("xyz")

    const o1 = c1()
    const o2 = c2()

    assert o1.a == 42
    assert o2.a == "xyz"

    assert o1 instanceof c1
    assert o1 instanceof c2
    assert o2 instanceof c1
    assert o2 instanceof c2

    assert ! ("b" in o1)
    assert ! ("b" in o2)
    assert ! ("b" propertyof o1)
    assert ! ("b" propertyof o2)
    expect_fail(()=>o1.b)
    expect_fail(()=>o2.b)
    assert ! ("b" in c1.prototype)
    assert ! ("b" in c2.prototype)
    assert ! ("b" propertyof c1.prototype)
    assert ! ("b" propertyof c2.prototype)
    expect_fail(()=>c1.prototype.b)
    expect_fail(()=>c2.prototype.b)

    c1.prototype.b = 8

    assert ! ("b" in o1)
    assert ! ("b" in o2)
    assert "b" in c1.prototype
    assert "b" in c2.prototype
    assert "b" propertyof o1
    assert "b" propertyof o2
    assert "b" propertyof c1.prototype
    assert "b" propertyof c2.prototype
    assert o1.b == 8
    assert o2.b == 8
    assert o1.a == 42
    assert o2.a == "xyz"
}

# different prototypes
do {
    fun get_class(a)
    {
        return class {
            constructor {
                this.a = a
            }
            fun get_a {
                return this.a
            }
        }
    }

    const c1 = get_class("x")
    const c2 = get_class("y")

    const o1 = c1()
    const o2 = c2()

    assert o1.a == "x"
    assert o2.a == "y"

    assert o1 instanceof c1
    assert o2 instanceof c2
    assert ! (o1 instanceof c2)
    assert ! (o2 instanceof o1)

    c1.prototype.b = "a"
    assert ! ("b" in c2.prototype)
    assert ! ("b" propertyof c2.prototype)
    c2.prototype.b = "b"

    assert o1.b == "a"
    assert o2.b == "b"
}

# changed prototype
do {
    class c1 {
        constructor {
            this.a = 3
        }
        fun getvalue {
            return this.a
        }
        fun geta {
            return -this.a
        }
    }

    class c2 {
        constructor {
            this.b = 4
        }
        fun getvalue {
            return this.b
        }
        fun getb {
            return -this.b
        }
    }

    const o1 = c1()
    const o2 = c2()

    assert o1 instanceof c1
    assert o2 instanceof c2
    assert ! (o1 instanceof c2)
    assert ! (o2 instanceof c1)

    assert o1.getvalue() == 3
    assert o2.getvalue() == 4
    assert "a" in o1
    assert "b" in o2
    assert ! ("geta" in o1)
    assert ! ("getb" in o2)
    assert "a" propertyof o1
    assert "b" propertyof o2
    assert "geta" propertyof o1
    assert "getb" propertyof o2
    assert o1.a == 3
    assert o2.b == 4
    assert o1.geta() == -3
    assert o2.getb() == -4

    # now swap the prototypes
    do {
        const tmp = c1.prototype
        c1.prototype = c2.prototype
        c2.prototype = tmp
    }

    assert o1 instanceof c2
    assert o2 instanceof c1
    assert ! (o1 instanceof c1)
    assert ! (o2 instanceof c2)

    assert o1.getvalue() == 3
    assert o2.getvalue() == 4
    assert "a" in o1
    assert "b" in o2
    assert ! ("geta" in o1)
    assert ! ("getb" in o2)
    assert "a" propertyof o1
    assert "b" propertyof o2
    assert "geta" propertyof o1
    assert "getb" propertyof o2
    assert o1.a == 3
    assert o2.b == 4
    assert o1.geta() == -3
    assert o2.getb() == -4

    const x1 = c1()
    const x2 = c2()

    assert "a" in x1
    assert "b" in x2
    assert ! ("getb" in x1)
    assert ! ("geta" in x2)
    assert "a" propertyof x1
    assert "b" propertyof x2
    assert "getb" propertyof x1
    assert "geta" propertyof x2
    assert x1.a == 3
    assert x2.b == 4
    expect_fail(() => x1.geta())
    expect_fail(() => x1.getb())
    expect_fail(() => x2.geta())
    expect_fail(() => x2.getb())
    expect_fail(() => x1.getvalue())
    expect_fail(() => x2.getvalue())
}

# extends
do {
    class c0 {
        fun a { return 1 }
        fun b { return 2 }
    }

    class c1 extends c0 {
        fun c { return 3 }
    }

    const x0 = c0()
    const x1 = c1()

    assert ! ("a" in x0)
    assert ! ("b" in x0)
    assert ! ("c" in x0)

    assert "a" propertyof x0
    assert "b" propertyof x0
    assert ! ("c" propertyof x0)

    assert ! ("a" in x1)
    assert ! ("b" in x1)
    assert ! ("c" in x1)

    assert "a" propertyof x1
    assert "b" propertyof x1
    assert "c" propertyof x1

    assert x0.a() == 1
    assert x0.b() == 2
    expect_fail(() => x0.c())
    assert x0 instanceof c0

    assert x1.a() == 1
    assert x1.b() == 2
    assert x1.c() == 3
    assert x1 instanceof c0
    assert x1 instanceof c1

    assert ! ("iterator" in x0)
    assert ! ("iterator" in x1)

    assert "iterator" propertyof x0
    assert "iterator" propertyof x1

    class c2 extends void {
        fun d { return 4 }
    }

    const x2 = c2()

    assert x2 instanceof c2

    assert ! ("d" in x2)
    assert "d" propertyof x2
    assert ! ("iterator" in x2)
    assert ! ("iterator" propertyof x2)
    assert x2.d() == 4
}

# Invalid extends
do {
    # Base object must be a class
    expect_fail(() => class extends true { })
    expect_fail(() => class extends 1 { })
    expect_fail(() => class extends 1.5 { })
    expect_fail(() => class extends "x" { })
    expect_fail(() => class extends {} { })
    expect_fail(() => class extends [] { })
    expect_fail(() => class extends () => { } { })
}

# extends, constructor in base, but not in derived
do {
    class b {
        constructor {
            this.x = "xyz"
        }
    }

    class d extends b {
        fun getx {
            return this.x
        }
    }

    const o1 = b()
    const o2 = d()

    assert o1 instanceof b
    assert ! (o1 instanceof d)

    assert o2 instanceof b
    assert o2 instanceof d

    assert "x" in o1
    assert "x" in o2

    assert "x" propertyof o1
    assert "x" propertyof o2

    assert ! ("getx" in o1)
    assert ! ("getx" in o2)

    assert ! ("getx" propertyof o1)
    assert "getx" propertyof o2

    assert o2.getx() == "xyz"
}

# pass arguments to base
do {
    class b {
        constructor(aa, bb) {
            this.x = aa + 1
            this.y = bb + 1
        }
    }

    class d extends b {
        constructor(m) {
            super(m * 2, m * 3)
        }
    }

    const o = d(7)

    assert o.x == 15
    assert o.y == 22
}

# default ctor in derived class passes all args to base ctor
do {
    class b {
        constructor(x, y) {
            this.x = x
            this.y = y
        }

        fun get_sum {
            return this.get_a() + this.x + this.y
        }

        fun get_a {
            return 42
        }
    }

    class d extends b {
        fun get_a {
            return 100
        }
    }

    const ob = b(10, 3)
    const od = d(3, 20)

    assert ob instanceof b
    assert od instanceof b
    assert od instanceof d

    assert ob.x == 10
    assert ob.y == 3
    assert od.x == 3
    assert od.y == 20

    assert ob.get_a() == 42
    assert od.get_a() == 100

    assert ob.get_sum() == 55
    assert od.get_sum() == 123
}

# multiple super constructor invocations
do {
    class Base {
        constructor {
            if "x" in this {
                this.y = this.x + 1
            }
            else {
                this.z = 42
            }
        }
    }

    class Final extends Base {
        constructor(m) {
            assert ! ("x" in this)
            assert ! ("y" in this)
            assert ! ("z" in this)

            super()

            assert ! ("x" in this)
            assert ! ("y" in this)
            assert this.z == 42

            this.x = m

            super()

            assert "x" in this
            assert "y" in this
            assert "z" in this
        }
    }

    const o = Final(101)
    assert o.x == 101
    assert o.y == 102
    assert o.z == 42
}

# pass many types of args to super constructor
do {
    const bobo = fun
    {
        var count = 0

        class dodo {
            constructor(rest) {

                this.rest = rest

                count += 1
            }
        }

        class bobo extends dodo {
            constructor(a00, a01, a02, a03, a04, a05, a06, a07, a08, a09,
                        a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                        a20, a21, a22, a23, a24, a25, a26, a27, a28, a29,
                        a30=-30, a31=-31, a32=-32, as...) {

                this.sum = a00 + a01 + a02 + a03 + a04 + a05 + a06 + a07 + a08 + a09 +
                           a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 + a18 + a19 +
                           a20 + a21 + a22 + a23 + a24 + a25 + a26 + a27 + a28 + a29 +
                           a30 + a31 + a32

                this.id = count

                super(as)
            }
        }

        return bobo
    } ()

    var o = bobo(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    assert typeof o.rest == "array"
    assert o.rest.size == 0
    assert o.id == 0
    assert o.sum == -93

    o = bobo( 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
             10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
             20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
             30, 31, 32, 33, 34)
    assert typeof o.rest == "array"
    assert o.rest.size == 2
    assert o.rest[0] == 33
    assert o.rest[1] == 34
    assert o.id == 1
    assert o.sum == 528

    o = bobo(1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
             1, 1, 1000, -1, -2, -3, -4, -5)
    assert typeof o.rest == "array"
    assert o.rest.size == 5
    for const i in base.range(5) {
        assert o.rest[i] == -1 - i
    }
    assert o.id == 2
    assert o.sum == 1032
}

# implicitly invoke base constructor
do {
    class first {
        constructor {
            this.abc = 42
        }
    }

    class second extends first {
        constructor {
            assert "abc" in this
            assert "abc" propertyof this
            assert this.abc == 42
            this.bcd = 84
        }
    }

    const o = second()
    assert o.abc == 42
    assert o.bcd == 84
}

# no implicit super()
do {
    class add_x {
        constructor {
            this.x = 256
        }
    }

    const oa = add_x()
    assert "x" in oa
    assert "x" propertyof oa
    assert oa.x == 256

    class derived extends add_x {
        constructor(x) {
            if x {
                super()
            }
        }
    }

    const od = derived(false)

    assert ! ("x" in od)
    assert ! ("x" propertyof od)
    expect_fail(() => od.x)

    # implicit super() NOT optimized-out
    class optim extends add_x {
        constructor {
            if false { # optimized-out
                super()
            }
        }
    }

    const oo = optim()
    assert ! ("x" in oo)
    assert ! ("x" propertyof oo)
    expect_fail(() => oo.x)
}

# access super prototype
do {
    class b {
        fun add_2(x) { return x + 2 }
        fun get_a { return this.a }
        constructor(x) {
            this.a = x
        }
    }

    class d extends b {
        fun add_2(x) { return x + 3 }
        fun super_add_2(x) { return super.add_2(x) }
        fun get_a { return this.b }
        constructor(x, y) {
            super(x)
            this.b = y
            this.c = super.add_2(x)
        }
    }

    const ob = b(10)
    assert ob.add_2(20) == 22
    assert ob.get_a() == 10
    assert ob.a == 10

    const od = d(20, 30)
    assert od.get_a() == 30
    assert od.super_add_2(80) == 82
    assert od.a == 20
    assert od.b == 30
    assert od.c == 22
    assert od.add_2(20) == 23
}

# invocation with super prototype, passes current this
do {
    class b {
        var x = 1

        constructor {
            this.x = 2
        }

        fun get_x {
            return this.x
        }
    }

    class d extends b {
        var x = 3

        constructor {
            this.x = 4
        }

        fun get_x_p10 {
            return super.get_x() + 10
        }
    }

    const o = d()
    assert o.x == 4
    assert o.get_x() == 4
    assert o.get_x_p10() == 14
}

# prototype chain
do {
    class c1 {
        fun get_c() { return 11 }
        fun get_x() { return this.x }
    }

    class c2 extends c1 {
        fun get_c() { return 22 }
        fun get_c1() { return super.get_c() }
    }

    class c3 extends c2 {
        fun get_c() { return 33 }
        fun get_c2() { return super.get_c() }
    }

    class c4 extends c3 {
        fun get_c() { return 44 }
        fun get_c3() { return super.get_c() }
        constructor { this.x = 55 }
    }

    const o = c4()

    assert o.get_c1() == 11
    assert o.get_c2() == 22
    assert o.get_c3() == 33
    assert o.get_c() == 44
    assert o.get_x() == 55
}

# invoking functions in base prototype should keep top-level this
do {
    class X {
        fun execute {
            return 11
        }
    }

    class Y extends X {
        constructor(exec33) {
            if exec33 {
                this.execute = fun { return 33 }
            }
        }
        fun execute {
            return 22
        }
        fun run {
            return super.execute()
        }
    }

    assert X().execute()      == 11
    assert Y(false).execute() == 22
    assert Y(true).execute()  == 33
}

# base class' constructor must not create a new object
do {
    class Base {
        constructor(a, b) {
            this[a] = b
        }
    }

    class Derived extends Base {
        constructor(a) {
            this.a = a + 1
            super("b", a + 2)
            this.c = a + 3
            super("d", a + 4)
        }
    }

    const o = Derived(10)
    assert "a" in o
    assert "b" in o
    assert "c" in o
    assert "d" in o
    assert o.a == 11
    assert o.b == 12
    assert o.c == 13
    assert o.d == 14

    const b = Base("m", 42)
    assert "m" in b
    assert b.m == 42
    assert ! ("a" propertyof b)
    assert ! ("b" propertyof b)
    assert ! ("c" propertyof b)
    assert ! ("d" propertyof b)
}

# assigning to this in base constructor shadows derived prototype
do {
    class AAA {
        constructor {
            this.get_value = fun { return this.x }
        }
    }

    class BBB extends AAA {
        constructor {
            this.x = 11
            this.y = 22
        }
        fun get_value { return this.y }
    }

    const o = BBB ()
    assert o.x == 11
    assert o.y == 22
    assert o.get_value() == 11
}

# a class function named "constructor"
do {
    class classA {
        constructor {
            this.m = "m"
        }
    }
    classA.prototype.constructor = fun { return this.m + "h" }

    const o = classA()
    assert o.m == "m"
    assert ! ("constructor" in o)
    assert "constructor" propertyof o
    assert typeof o.constructor == "function"
    assert o.constructor() == "mh"
}

# invoke constructor through apply
do {
    class Abc {
        constructor(x = 42) {
            this.x = x
        }
        fun x_plus_1 {
            return this.x + 1
        }
    }

    const o = Abc()
    assert o.x == 42
    assert o.x_plus_1() == 43

    const p = Abc.apply(void, [])
    assert p.x == 42
    assert p.x_plus_1() == 43

    const q = Abc.apply(void, [-107])
    assert q.x == -107
    assert q.x_plus_1() == -106
}

# multiple prototype levels
do {
    class aaa {
        constructor {
            this.this_a = 1
        }
    }
    aaa.prototype.proto_a = 2

    class bbb extends aaa {
        constructor {
            this.this_b = 3
        }
    }
    bbb.prototype.proto_b = 4

    class ccc extends bbb {
        constructor {
            this.this_c = 5
        }
    }
    ccc.prototype.proto_c = 6

    const o = ccc()

    assert "this_a" propertyof o
    assert "this_b" propertyof o
    assert "this_c" propertyof o
    assert "proto_a" propertyof o
    assert "proto_b" propertyof o
    assert "proto_c" propertyof o

    assert "this_a" in o
    assert "this_b" in o
    assert "this_c" in o
    assert ! ("proto_a" in o)
    assert ! ("proto_b" in o)
    assert ! ("proto_c" in o)

    assert o.this_a == 1
    assert o.this_b == 3
    assert o.this_c == 5
    assert o.proto_a == 2
    assert o.proto_b == 4
    assert o.proto_c == 6

    const p = bbb()

    assert "this_a" propertyof p
    assert "this_b" propertyof p
    assert ! ("this_c" propertyof p)
    assert "proto_a" propertyof p
    assert "proto_b" propertyof p
    assert ! ("proto_c" propertyof p)

    assert "this_a" in p
    assert "this_b" in p
    assert ! ("this_c" in p)
    assert ! ("proto_a" in p)
    assert ! ("proto_b" in p)
    assert ! ("proto_c" in p)

    assert p.this_a == 1
    assert p.this_b == 3
    assert p.proto_a == 2
    assert p.proto_b == 4
}

# expand built-in dynamic properties on incorrect object
do {
    const s = "\(base.array.prototype)"
    assert s.find("\"size\": <function") > 0
}

# attempt to set a dynamic property without a setter
do {
    expect_fail(fun { base.array.prototype.size = 0 })
}

# add elements to an object while iterating it
do {
    const elements = [ "abc", "def", "ghi", "jkl" ]

    for const order in [ [0, 1, 2, 3], [3, 2, 1, 0] ] {

        const obj = { }
        for const idx in order {
            obj[elements[idx]] = idx
        }

        var idx   = 0
        var found = 0
        for const k, v in obj {
            assert ((v >= 0) && (v < elements.size)) || (v == 9)
            if v < elements.size {
                assert k == elements[v]
                found |= 1 << v
            }

            if idx == 1 {
                obj["zzz"] = 9
            }
            idx += 1
        }

        assert found == 0b1111
    }
}

# member data in prototype
do {
    class Base {
        var a = 100
        var b = 200
        var c = 300
        constructor(x) { this.b = x }
        fun get_data { return [this.a, this.b, this.c] }
    }

    assert "a" propertyof Base.prototype
    assert Base.prototype.a == 100
    assert "b" propertyof Base.prototype
    assert Base.prototype.b == 200

    const b = Base(10)
    assert b.get_data() == [100, 10, 300]

    Base.prototype.a = 400
    Base.prototype.b = 500
    assert b.get_data() == [400, 10, 300]

    class Derived extends Base {
        constructor(x) { super(600); this.c = x }
    }

    const d = Derived(42)
    assert d.get_data() == [400, 600, 42]
}

# class as member in prototype
do {
    class has_class_member extends class {} {
        var a = class { }
    }

    const obj = has_class_member()

    assert typeof obj.a == "class"
}

# super in class as member in prototype
do {
    class base_a {
        var aa = "aa"
    }

    class base_b {
        var bb = "bb"
    }

    class outer extends base_a {
        var inner = class extends base_b {
            fun get_bb {
                return super.bb
            }
        }

        fun get_aa {
            return super.aa
        }
    }

    const a = outer()
    const b = a.inner()

    assert "aa" propertyof a
    assert ! ("bb" propertyof a)
    assert "bb" propertyof b
    assert ! ("aa" propertyof b)

    assert a.aa == "aa"
    assert b.bb == "bb"

    assert a.get_aa() == "aa"
    assert b.get_bb() == "bb"

    a.aa = 42
    b.bb = 43

    assert a.aa == 42
    assert b.bb == 43

    assert a.get_aa() == "aa"
    assert b.get_bb() == "bb"
}

##############################################################################
# base.object

do {
    assert typeof base.object           == "class"
    assert typeof base.object.prototype == "object"
    assert base.object instanceof base.function
    assert base.object instanceof base.class
}

do {
    const o = base.object()
    assert typeof o == "object"

    o.prop1 = "xyz"
    assert o.prop1 == "xyz"
}

do {
    const o = base.object()
    assert typeof o == "object"

    o.prop2 = "xyz"
    assert o.prop2 == "xyz"
}

do {
    assert {} instanceof base.object
    assert ! ({} instanceof base.array)
    assert ! ({} instanceof base.function)
    assert ! ({} instanceof base.string)

    const o = base.object()
    assert o instanceof base.object
}

do {
    const value = (()=>{})()
    assert value instanceof base.object
    assert ! (value instanceof base.integer)
    assert ! (value instanceof base.float)
    assert ! (value instanceof base.number)
    assert ! (value instanceof base.boolean)
    assert ! (value instanceof base.string)
    assert ! (value instanceof base.array)
}

do {
    assert base.count_elements(base.object(void)) == 0
    assert base.count_elements(base.object({})) == 0
    assert base.count_elements(base.object("")) == 0
    assert base.count_elements(base.object([])) == 0

    expect_fail(() => base.object(0))
    expect_fail(() => base.object([""]))
    expect_fail(() => base.object([0,""]))

    expect_fail(() => base.object([void]))
    expect_fail(() => base.object([{}]))
    expect_fail(() => base.object([""]))
    expect_fail(() => base.object([[]]))
    expect_fail(() => base.object([[""]]))
    expect_fail(() => base.object([[0,""]]))

    expect_fail(() => base.object(fun { yield void   }()))
    expect_fail(() => base.object(fun { yield {}     }()))
    expect_fail(() => base.object(fun { yield ""     }()))
    expect_fail(() => base.object(fun { yield []     }()))
    expect_fail(() => base.object(fun { yield [""]   }()))
    expect_fail(() => base.object(fun { yield [0,""] }()))

    expect_fail(() => base.object({}, []))
    expect_fail(() => base.object(true, []))
}

do {
    const o = base.object({ a: 1, b: 2, c: 3 })

    var cnt = 0
    for const k, v in o {
        cnt += 1
    }
    assert cnt == 3

    assert "a" in o
    assert "b" in o
    assert "c" in o
    assert o.a == 1
    assert o.b == 2
    assert o.c == 3
}

do {
    const o = base.object([ ["x", 10, 200], ["y", 20], ["z", 30] ])

    var cnt = 0
    for const k, v in o {
        cnt += 1
    }
    assert cnt == 3

    assert "x" in o
    assert "y" in o
    assert "z" in o
    assert o.x == 10
    assert o.y == 20
    assert o.z == 30
}

do {
    const o = base.object(["aaa", "bbb", "ccc", "ddd"], [-1, -2, -3])

    var cnt = 0
    for const k, v in o {
        cnt += 1
    }
    assert cnt == 3

    assert "aaa" in o
    assert "bbb" in o
    assert "ccc" in o
    assert o.aaa == -1
    assert o.bbb == -2
    assert o.ccc == -3
}

do {
    const o = base.object("abcdef", [-11, -12, -13])

    var cnt = 0
    for const k, v in o {
        cnt += 1
    }
    assert cnt == 3

    assert "a" in o
    assert "b" in o
    assert "c" in o
    assert o.a == -11
    assert o.b == -12
    assert o.c == -13
}

# throw from generator used to initialize object
do {
    fun create(num)
    {
        if num { yield ["\(num)", num]; num -= 1 }
        if num { throw num }
    }

    do {
        const it = create(1)
        assert it() == ["1",1]
        expect_fail(() => it())
    }

    do {
        const it = create(2)
        assert it() == ["2",2]
        expect_fail(() => it())
    }

    do {
        for const x in create(1) {
            assert x == ["1",1]
        }

        const found = []
        var exc = void
        try {
            for const y in create(2) {
                found.push(y)
            }
        }
        catch const e {
            exc = e.value
        }

        assert found.size == 1
        assert found[0] == ["2",2]
        assert exc == 1
    }

    do {
        const obj = base.object(create(1))
        assert "1" in obj
        assert obj["1"] == 1
    }

    do {
        var obj = void
        var exc = void
        try {
            obj = base.object(create(2)) # throws
        }
        catch const e {
            exc = e.value
        }
        assert ! obj
        assert exc == 1
    }
}

do {
    class constr {
        constructor {
            this.c = 2
            this.d = 3
            this.e = 4
        }
    }

    constr.prototype.a = 0
    constr.prototype.b = 1

    const obj = constr()

    var values = ["a", "b", "c", "d", "e"]

    for const key, value in base.deep(obj) {
        assert value == obj[key]
        if typeof value == "integer" && value >= 0 && value < values.size {
            assert values[value] == key
            values[value] = void
        }
    }

    for const i in base.range(values.size) {
        assert values[i] == void
    }

    values = ["a", "b", "c", "d", "e"]

    for const key, value in base.shallow(obj) {
        assert typeof value == "integer"
        assert value == obj[key]
        assert value >= 0 && value < values.size
        assert values[value] == key
        values[value] = void
    }
}

do {
    const it = base.shallow.apply({aaa:0}, [void])
    assert typeof it == "function"
    for const x, v in it {
        assert x == "aaa"
    }

    for const x, v in base.shallow.apply(void, [void]) {
        throw "unexpected property"
    }
}

do {
    class c {
        constructor {
            this.a = () => 1
        }
        fun b { return 2 }
    }

    const o = c()

    assert o.a() == 1
    assert o.b() == 2
    assert o instanceof c
    assert o instanceof base.object
}

do {
    class b {
        fun c { return 3 }
    }

    class c extends b {
        constructor {
            this.a = () => 1
        }
        fun b { return 2 }
    }

    const o = c()

    assert o.a() == 1
    assert o.b() == 2
    assert o.c() == 3
    assert o instanceof c
    assert o instanceof b
    assert o instanceof base.object
}

do {
    class c extends void {
        constructor {
            this.a = () => 1
        }
        fun b { return 2 }
    }

    const o = c()

    assert o.a() == 1
    assert o.b() == 2
    assert o instanceof c
    assert ! (o instanceof base.object)
}

do {
    class some extends void
    {
        constructor() {
            this.x = super.x # void is not a class
        }
    }
    expect_fail(some)
}
    
do {
    class base { }
    class derived extends base {
        fun get_ctor {
            return derived
        }
    }

    const o = derived()
    const ctor = o.get_ctor()
    assert typeof ctor == "class"
    assert ctor == derived
}

# delete with variable being property name
do {
    var name = 0
    const obj = { a: 1 }
    for const k, v in obj {
        delete obj[k]
        name = k
    }
    assert name == "a"
}
