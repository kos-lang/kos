# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2023 Chris Dragan

import iter
import base

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

##############################################################################
# iter.empty

do {
    assert iter.empty instanceof base.generator

    var count = 0
    for var x in iter.empty() {
        count += 1
    }

    assert count == 0
}

##############################################################################
# iter.generator

do {
    fun gen
    {
        yield 1
        yield 2
    }

    do {
        const g = iter.generator(gen())

        const it1 = g()
        assert it1() == 1
        assert it1() == 2
        expect_fail(it1)

        const it2 = g()
        assert it2() == 1
        assert it2() == 2
        expect_fail(it2)
    }

    do {
        const g = iter.generator(gen())

        const it1 = g()
        const it2 = g()

        assert it1() == 1
        assert it2() == 2
        expect_fail(it1)
        expect_fail(it2)

        const it3 = g()
        assert it3() == 1
        assert it3() == 2
        expect_fail(it3)
    }

    do {
        const abc = iter.generator("abc")
        assert typeof abc == "function"
        assert typeof abc() == "function"

        const it1 = abc()
        const it2 = abc()

        assert it1() == "a"
        assert it2() == "a"
        assert it1() == "b"
        assert it2() == "b"
        assert it1() == "c"
        assert it2() == "c"
        expect_fail(it1)
        expect_fail(it2)
    }
}

##############################################################################
# iter.iproduct

do {
    var it = iter.iproduct()
    expect_fail(()=>it())
}

do {
    const it = iter.iproduct(1)
    assert it() == 0
    expect_fail(()=>it())
}

do {
    const it = iter.iproduct(2)
    assert it() == 0
    assert it() == 1
    expect_fail(()=>it())
}

do {
    const expected = [ [0, 0], [1, 0], [0, 1], [1, 1] ]
    var   i        = 0
    for var x, y in iter.iproduct(2, 2) {
        assert x == expected[i][0]
        assert y == expected[i][1]
        i += 1
    }
}

do {
    var ex, ey, ez = [ 0, 0, 0 ]
    for var x, y, z in iter.iproduct(3, 2, 5) {
        assert x < 3
        assert y < 2
        assert z < 5
        assert x == ex
        assert y == ey
        assert z == ez

        ex += 1
        if ex == 3 {
            ex = 0
            ey += 1
            if ey == 2 {
                ey = 0
                ez += 1
            }
        }
    }
}

##############################################################################
# iter.product

do {
    const it = iter.product()
    expect_fail(()=>it())
}

do {
    const expected = [ [10, true, "a"], [11, true, "a"], [10, true, "b"], [11, true, "b"] ]
    var   i        = 0
    for var a, b, c in iter.product([10, 11], true, "ab") {
        assert a == expected[i][0]
        assert b == expected[i][1]
        assert c == expected[i][2]
        i += 1
    }
}

##############################################################################
# iter.cycle

do {
    var i = 0
    for var x in iter.cycle(base.range(3)) {
        assert i % 3 == x
        i += 1
        if i == 20 {
            break
        }
    }
}

##############################################################################
# iter.reverse

do {
    const a = iter.reverse([1, 2, 3, 4])
    assert typeof a == "function"
    assert a() == 4
    assert a() == 3
    assert a() == 2
    assert a() == 1
    expect_fail(a)

    const s = iter.reverse("kos")
    assert typeof s == "function"
    assert s() == "s"
    assert s() == "o"
    assert s() == "k"
    expect_fail(s)

    const f = iter.reverse(base.range(2, 6))
    assert typeof f == "function"
    assert f() == 5
    assert f() == 4
    assert f() == 3
    assert f() == 2
    expect_fail(f)
}

##############################################################################
# iter.iota

do {
    const next = iter.iota()
    assert next() == 0
    assert next() == 1
    assert next() == 2
    assert next() == 3
}

do {
    const next = iter.iota(0x7FFF_FFFF_FFFF_FFFE)
    assert next() == 0x7FFF_FFFF_FFFF_FFFE
    assert next() == 0x7FFF_FFFF_FFFF_FFFF
    expect_fail(next)

    const a = [ iter.iota(0x7FFF_FFFF_FFFF_FFFE) ... ]
    assert a.size == 2
    assert a[0] == 0x7FFF_FFFF_FFFF_FFFE
    assert a[1] == 0x7FFF_FFFF_FFFF_FFFF
}
