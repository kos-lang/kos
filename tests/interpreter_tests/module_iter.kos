#
# Copyright (c) 2014-2018 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

import iter
import lang

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

##############################################################################
# iter.empty

do {
    assert iter.empty instanceof lang.generator

    var count = 0
    for var x in iter.empty() {
        count += 1
    }

    assert count == 0
}

##############################################################################
# iter.generator

do {
    fun gen
    {
        yield 1
        yield 2
    }

    do {
        const g = iter.generator(gen())

        const it1 = g()
        assert it1() == 1
        assert it1() == 2
        expect_fail(()=>it1())

        const it2 = g()
        assert it2() == 1
        assert it2() == 2
        expect_fail(()=>it2())
    }

    do {
        const g = iter.generator(gen())

        const it1 = g()
        const it2 = g()

        assert it1() == 1
        assert it2() == 2
        expect_fail(()=>it1())
        expect_fail(()=>it2())

        const it3 = g()
        assert it3() == 1
        assert it3() == 2
        expect_fail(()=>it3())
    }
}

##############################################################################
# iter.iproduct

do {
    var it = iter.iproduct()
    expect_fail(()=>it())
}

do {
    const it = iter.iproduct(1)
    assert it() == 0
    expect_fail(()=>it())
}

do {
    const it = iter.iproduct(2)
    assert it() == 0
    assert it() == 1
    expect_fail(()=>it())
}

do {
    const expected = [ [0, 0], [1, 0], [0, 1], [1, 1] ]
    var   i        = 0
    for var x, y in iter.iproduct(2, 2) {
        assert x == expected[i][0]
        assert y == expected[i][1]
        i += 1
    }
}

do {
    var ex, ey, ez = [ 0, 0, 0 ]
    for var x, y, z in iter.iproduct(3, 2, 5) {
        assert x < 3
        assert y < 2
        assert z < 5
        assert x == ex
        assert y == ey
        assert z == ez

        ex += 1
        if ex == 3 {
            ex = 0
            ey += 1
            if ey == 2 {
                ey = 0
                ez += 1
            }
        }
    }
}

##############################################################################
# iter.product

do {
    const it = iter.product()
    expect_fail(()=>it())
}

do {
    const expected = [ [10, true, "a"], [11, true, "a"], [10, true, "b"], [11, true, "b"] ]
    var   i        = 0
    for var a, b, c in iter.product([10, 11], true, "ab") {
        assert a == expected[i][0]
        assert b == expected[i][1]
        assert c == expected[i][2]
        i += 1
    }
}

##############################################################################
# iter.cycle

do {
    var i = 0
    for var x in iter.cycle(lang.range(3)) {
        assert i % 3 == x
        i += 1
        if i == 20 {
            break
        }
    }
}

##############################################################################
# lang.reverse

do {
    const a = iter.reverse([1, 2, 3, 4])
    assert typeof a == "array"
    assert a.size == 4
    assert a[0] == 4
    assert a[1] == 3
    assert a[2] == 2
    assert a[3] == 1

    const s = iter.reverse("kos")
    assert typeof s == "string"
    assert s.size == 3
    assert s[0] == "s"
    assert s[1] == "o"
    assert s[2] == "k"

    const f = iter.reverse(lang.range(2, 6))
    assert typeof f == "function"
    assert f() == 5
    assert f() == 4
    assert f() == 3
    assert f() == 2
    expect_fail(f)
}
