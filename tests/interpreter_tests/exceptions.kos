# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2022 Chris Dragan

import base: exception, string

# passing assertions
do {
    assert 1
    assert true
    assert "abc"

    const a = 2
    assert false || a == 2
}

# failing assertions
do {
    var caught = false
    try {
        assert false
    }
    catch const e {
        caught = true
    }
    if ! caught {
        throw "Missing assertion"
    }
}
do {
    var caught = false
    try {
        assert void == 1 || {} == []
    }
    catch const e {
        caught = true
    }
    if ! caught {
        throw "Missing assertion"
    }
}

# try..catch
do {
    var fail = false
    try {
    }
    catch const e {
        fail = true
    }

    assert ! fail
}

# try..catch
do {
    var fail = true
    try {
        fail = false
    }
    catch const e {
        fail = true
    }

    assert ! fail
}

# throw..catch
do {
    var fail = true
    try {
        throw "exception"
    }
    catch const e {
        fail = e.value != "exception"
    }

    assert ! fail
}

# throw..defer
do {
    var fail = 2
    try {
        defer {
            if fail == 2 {
                fail = 1
            }
        }
        throw "exception"
    }
    catch const e {
        if fail == 1 {
            fail = 0
        }
    }

    assert ! fail
}

# throw..catch and defer
do {
    var fail = 3
    do {
        defer {
            if fail == 1 {
                fail = 0
            }
        }
        try {
            if fail == 3 {
                fail = 2
            }
            throw "exception"
        }
        catch const e {
            if fail == 2 && e.value == "exception" {
                fail = 1
            }
        }
    }

    assert ! fail
}

# throw through many defer statements
do {
    var fail = 7
    do {
        defer {
            if fail == 1 {
                fail = 0
            }
        }
        try {
            defer {
                if fail == 3 {
                    fail = 2
                }
            }
            defer {
                if fail == 4 {
                    fail = 3
                }
            }
            defer {
                if fail == 5 {
                    fail = 4
                }
            }
            defer {
                if fail == 6 {
                    fail = 5
                }
            }
            defer {
                if fail == 7 {
                    fail = 6
                }
            }
            throw "exception"
        }
        catch const e {
            if fail == 2 && e.value == "exception" {
                fail = 1
            }
        }
    }

    assert ! fail
}

# throw through many catch statements
do {
    var fail = 7
    do {
        defer {
            if fail == 1 {
                fail = 0
            }
        }
        try {
            try {
                try {
                    try {
                        try {
                            try {
                                throw "exception"
                            }
                            catch const e {
                                if fail == 7 && e.value == "exception" {
                                    fail = 6
                                }
                                throw e
                            }
                        }
                        catch const e {
                            if fail == 6 && e.value == "exception" {
                                fail = 5
                            }
                            throw e
                        }
                    }
                    catch const e {
                        if fail == 5 && e.value == "exception" {
                            fail = 4
                        }
                        throw e
                    }
                }
                catch const e {
                    if fail == 4 && e.value == "exception" {
                        fail = 3
                    }
                    throw e
                }
            }
            catch const e {
                if fail == 3 && e.value == "exception" {
                    fail = 2
                }
                throw e
            }
        }
        catch const e {
            if fail == 2 && e.value == "exception" {
                fail = 1
            }
        }
    }

    assert ! fail
}

do {
    var l1 = __line__ + 3
    fun throws
    {
        throw "xyz"
    }

    var l2 = void

    fun indirect
    {
        l2 = __line__; throws()
    }

    var l3   = void
    var fail = true

    try {
        l3 = __line__; indirect()
    }
    catch const e {
        assert e.value                 == "xyz"
        assert e.backtrace.size        == 3
        assert e.backtrace[0].line     == l1
        assert e.backtrace[0].function == "throws"
        assert e.backtrace[1].line     == l2
        assert e.backtrace[1].function == "indirect"
        assert e.backtrace[2].line     == l3
        assert e.backtrace[2].function == "<global>"
        fail = false
    }

    assert ! fail
}

do {
    var l1 = void

    fun native_callee_throws
    {
        l1 = __line__; [].resize.apply(0, [])
    }

    var l2   = void
    var fail = true

    try {
        l2 = __line__; native_callee_throws()
    }
    catch const e {
        assert e.backtrace.size        == 3
        assert e.backtrace[0].line     == 0
        assert e.backtrace[0].function == "apply"
        assert e.backtrace[1].line     == l1
        assert e.backtrace[1].function == "native_callee_throws"
        assert e.backtrace[2].line     == l2
        assert e.backtrace[2].function == "<global>"
        fail = false
    }

    assert ! fail
}

do {
    fun generator_throws
    {
        throw 123
        yield void # Unreachable, so not converted to generator
    }

    var thrown = true
    try {
        generator_throws()
    }
    catch const e {
        if e.value == 123 {
            thrown = true
        }
    }

    assert thrown
}

do {
    fun generator_throws
    {
        if false { yield void }
        throw 123
    }

    generator_throws()
}

do {
    var l1 = void

    fun iterator_throws
    {
        if false { yield void }
        l1 = __line__; throw 123
    }

    var l2   = void
    var fail = true

    try {
        const iter = iterator_throws()
        l2 = __line__; iter()
    }
    catch const e {
        assert e.value                 == 123
        assert e.backtrace.size        == 2
        assert e.backtrace[0].line     == l1
        assert e.backtrace[0].function == "iterator_throws"
        assert e.backtrace[1].line     == l2
        assert e.backtrace[1].function == "<global>"
        fail = false
    }

    assert ! fail
}

do {
    var fail = true

    fun only_defer
    {
        defer {
            fail = false
        }
    }

    only_defer()

    assert ! fail
}

do {
    fun early_return(early)
    {
        do {
            defer {
            }
            if early {
                return 10
            }
        }
        return 20
    }

    assert early_return(true)  == 10
    assert early_return(false) == 20
}

do {
    fun return_paths(x)
    {
        do {
            defer {
                if x == 2 {
                    return x + 40
                }
                if x == 3 {
                    return x + 30
                }
            }
            if x == 1 {
                return x + 10
            }
            if x == 2 {
                return x + 20
            }
        }
        return 100
    }

    assert return_paths(1) == 11
    assert return_paths(2) == 42
    assert return_paths(3) == 33
    assert return_paths(4) == 100
}

do {
    fun cancel_return(cancel)
    {
        try {
            defer {
                if cancel {
                    throw void
                }
            }
            return 1
        }
        catch const e {
        }
        return 3
    }

    assert cancel_return(false) == 1
    assert cancel_return(true)  == 3
}

do {
    fun change_return(change)
    {
        defer {
            if change {
                return 4
            }
        }
        return 2
    }
    assert change_return(false) == 2
    assert change_return(true)  == 4
}

do {
    var depth = 0

    fun deep_return_paths(x)
    {
        do {
            defer {
                depth -= 1
                if x == 4 {
                    return x + 43
                }
            }
            try {
                depth += 1
                if x == 1 {
                    return x + 10
                }
                defer {
                    depth -= 1
                    if x == 4 {
                        return x + 42
                    }
                    if x == 5 {
                        throw x + 51
                    }
                }
                try {
                    depth += 1
                    do {
                        defer {
                            depth -= 1
                            if x == 4 {
                                return x + 41
                            }
                        }
                        depth += 1
                        if x == 2 {
                            return x + 20
                        }
                        if x == 3 {
                            throw x + 30
                        }
                        if x == 4 {
                            return x + 40
                        }
                        if x == 5 {
                            return x + 50
                        }
                    }
                }
                catch const e {
                    return e.value + 300
                }
            }
            catch const e {
                if e.value == 56 {
                    return e.value + 2
                }
            }
        }
        return x * 100
    }

    assert deep_return_paths(1) == 11
    assert depth == 0
    assert deep_return_paths(2) == 22
    assert depth == 0
    assert deep_return_paths(3) == 333
    assert depth == 0
    assert deep_return_paths(4) == 47
    assert depth == 0
    assert deep_return_paths(5) == 58
    assert depth == 0
    assert deep_return_paths(6) == 600
    assert depth == 0
}

do {
    var a = 1
    do {
        defer { a *= 3 }
        a += 1
    }
    assert a == 6
}

do {
    var a = 0
    try {
        defer { a = a * 10 + 1 }
        throw 2
        a = 9000
    }
    catch const e {
        a = a * 10 + e.value
    }
    assert a == 12
}

do {
    var a = 0
    try {
        defer { a = a * 10 + 1 }
        defer { throw 2 }
        defer { a = a * 10 + 3 }
        a = a * 10 + 4
    }
    catch const e {
        a = a * 10 + e.value
    }
    assert a == 4312
}

# fiddle with guts of an exception
do {
    var pos   = 0
    var final = void
    try {
        try {
            pos = (pos * 10) + 1
            throw -5
            pos = 0
        }
        catch const e {
            pos = (pos * 10) + 2
            assert e instanceof exception
            assert e.value == -5
            delete e.value
            e.hello = "world"
            pos = (pos * 10) + 3
            throw e
            pos = 0
        }
        pos = 0
    }
    catch const e2 {
        pos = (pos * 10) + 4
        final = e2
    }
    assert pos          == 1234
    assert typeof final == "object"
    assert final instanceof exception
    assert ! ("value" in final)
    assert "hello" in final
    assert final.hello == "world"
}

# function inside defer statement should not crash the interpreter
# test case from fuzzer
loop {
    defer {
        o => (o => (o))
    }
    break
}

# composite try-catch and defer
do {
    var value = 0

    try {
        defer {
            defer {
                value = value * 10 + 1
            }
            value = value * 10 + 2
        }
        throw 3
    }
    catch const e {
        value = value * 10 + e.value
    }

    assert value == 213
}

# complex set of defer statements
do {

    var seq = ""

    fun def(x, y)
    {
        seq = ""

        try {

            defer {

                while y < 20 {

                    y += 10

                    switch y {

                        case 10: {

                            defer {

                                defer {
                                    seq += "f"

                                    if x == 11 {
                                        seq += "(11break)"
                                        break
                                    }
                                    else if x == 12 {
                                        seq += "(12continue)"
                                        continue
                                    }
                                    else if x == 13 {
                                        seq += "(13fallthrough)"
                                        fallthrough
                                    }
                                    else if x == 14 {
                                        seq += "(14return)"
                                        return 140
                                    }
                                    else if x == 15 {
                                        seq += "(15throw)"
                                        throw 150
                                    }

                                    seq += "g"
                                }

                                seq += "d"

                                if x == 6 {
                                    seq += "(6break)"
                                    break
                                }
                                else if x == 7 {
                                    seq += "(7continue)"
                                    continue
                                }
                                else if x == 8 {
                                    seq += "(8fallthrough)"
                                    fallthrough
                                }
                                else if x == 9 {
                                    seq += "(9return)"
                                    return 90
                                }
                                else if x == 10 {
                                    seq += "(10throw)"
                                    throw 100
                                }

                                seq += "e"
                            }

                            seq += "b"

                            if x == 1 {
                                seq += "(1break)"
                                break
                            }
                            else if x == 2 {
                                seq += "(2continue)"
                                continue
                            }
                            else if x == 3 {
                                seq += "(3fallthrough)"
                                fallthrough
                            }
                            else if x == 4 {
                                seq += "(4return)"
                                return 40
                            }
                            else if x == 5 {
                                seq += "(5throw)"
                                throw 50
                            }

                            seq += "c"
                        }
                        default: {
                            seq += "x"
                        }
                    }

                    seq += "y"
                }
                seq += "z"
            }

            seq += "a"
        }
        catch const e {
            seq += "X\(e.value)"
        }

        return 0
    }

    assert def(0, 1) == 0
    assert seq == "axyxyz"

    assert def(0, 0) == 0
    assert seq == "abcdefgyxyz"

    assert def(1, 0) == 0
    assert seq == "ab(1break)defgyxyz"

    assert def(2, 0) == 0
    assert seq == "ab(2continue)defgxyz"

    assert def(3, 0) == 0
    assert seq == "ab(3fallthrough)defgxyxyz"

    assert def(4, 0) == 40
    assert seq == "ab(4return)defg"

    assert def(5, 0) == 0
    assert seq == "ab(5throw)defgX50"

    assert def(6, 0) == 0
    assert seq == "abcd(6break)fgyxyz"

    assert def(7, 0) == 0
    assert seq == "abcd(7continue)fgxyz"

    assert def(8, 0) == 0
    assert seq == "abcd(8fallthrough)fgxyxyz"

    assert def(9, 0) == 90
    assert seq == "abcd(9return)fg"

    assert def(10, 0) == 0
    assert seq == "abcd(10throw)fgX100"

    assert def(11, 0) == 0
    assert seq == "abcdef(11break)yxyz"

    assert def(12, 0) == 0
    assert seq == "abcdef(12continue)xyz"

    assert def(13, 0) == 0
    assert seq == "abcdef(13fallthrough)xyxyz"

    assert def(14, 0) == 140
    assert seq == "abcdef(14return)"

    assert def(15, 0) == 0
    assert seq == "abcdef(15throw)X150"
}

# complex defer statements
do {
    var order = {
        sequence: 0,
        add: fun(point) {
            this.sequence = this.sequence * 10 + point
        }
    }

    fun(order) {
        defer {
            order.add(1)
            defer {
                order.add(2)
                defer {
                    order.add(3)
                    defer {
                        order.add(4)
                        defer {
                            order.add(5)
                        }
                        return
                    }
                    return
                }
                return
            }
            return
        }
        return
    } (order)

    assert order.sequence == 12345
}

# not enough elements for multi-assignment
do {
    var a, b, c = [ void, void, void ]
    assert a == void
    assert b == void
    assert c == void

    var exception = void
    try {
        _, _, a, b, c = [ 1, 2, 3, 4 ]
    }
    catch const e {
        exception = e
    }
    assert typeof exception != "void"
    assert exception

    assert a == 3
    assert b == 4
    assert c == void
}

# backtrace with a dynamic property
do {
    var val     = void
    var my_line = void
    var failed  = false
    try {
        my_line = __line__ ; val = string.prototype.size
    }
    catch const e {
        failed = true
        assert e.backtrace.size == 2
        assert e.backtrace[0].line     == 0
        assert e.backtrace[0].function == "size"
        assert e.backtrace[1].line     == my_line
        assert e.backtrace[1].function == "<global>"
    }
    assert failed
    assert typeof my_line == "integer"
    assert val == void
}

# complex mix of defer and return, from fuzzer
do {
    var order = 0
    fun update(value) {
        order = (order * 10) + value
    }

    fun deferred {
        defer {
            update(3)
            defer {
                update(6)
            }
            defer {
                update(5)
            }
            update(4)
            return 1
        }

        defer {
            update(2)
            return 2
        }

        update(1)
        return 3
    }

    assert deferred() == 1
    assert order == 123456
}

# complex mix of defer, throw and return, from fuzzer
do {
    var order = 0
    fun update(value) {
        order = (order * 10) + value
    }

    fun deferred(exception) {
        defer {
            update(3)
            defer {
                update(6)
            }
            defer {
                update(5)
            }
            if exception == 3 { throw 30 }
            update(4)
            return 1
        }

        defer {
            if exception == 2 { throw 20 }
            update(2)
            return 2
        }

        if exception == 1 { throw 10 }
        update(1)
        return 3
    }

    assert deferred(0) == 1
    assert order == 123456

    order = 0
    assert deferred(1) == 1
    assert order == 23456

    order = 0
    assert deferred(2) == 1
    assert order == 13456

    order = 0
    var exc = void
    try {
        assert deferred(3) == 1
    }
    catch const e {
        exc = e.value
    }
    assert exc == 30
    assert order == 12356
}

# complex mix of defer and return, from fuzzer
do {
    var order = 0
    fun update(value) {
        order = (order * 10) + value
    }

    fun deferred
    {
        defer {
            defer {
                update(6)
            }
            defer {
                defer {
                    defer {
                        update(5)
                    }
                    update(4)
                    return 1
                }
                update(3)
                return 2
            }
            update(2)
        }
        update(1)
        return 3
    }

    assert deferred() == 1
    assert order == 123456
}

# complex mix of defer, throw and return, from fuzzer
do {
    var order = 0
    fun update(value) {
        order = (order * 10) + value
    }

    fun deferred(exception)
    {
        defer {
            defer {
                update(6)
            }
            defer {
                defer {
                    defer {
                        update(5)
                    }
                    if exception == 3 { throw 30 }
                    update(4)
                    return 1
                }
                if exception == 2 { throw 20 }
                update(3)
                return 2
            }
            update(2)
        }
        if exception == 1 { throw 10 }
        update(1)
        return 3
    }

    assert deferred(0) == 1
    assert order == 123456

    order = 0
    assert deferred(1) == 1
    assert order == 23456

    order = 0
    assert deferred(2) == 1
    assert order == 12456

    order = 0
    var exc = void
    try {
        assert deferred(3) == 1
    }
    catch const e {
        exc = e.value
    }
    assert exc == 30
    assert order == 12356
}
