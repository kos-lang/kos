# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import base
import threads
import test_tools.expect_fail

do {
    const mtx = threads.mutex()
    assert mtx instanceof threads.mutex
    assert mtx.acquire() == mtx
    assert mtx.release() == mtx
}

do {
    const mtx = threads.mutex()
    mtx.acquire()
    var value = 0

    const th = fun {
        with mtx {
            value += 1
        }
    }.async()

    assert th
    assert value == 0
    mtx.release()
    th.wait()
    assert value == 1
}

do {
    const sem = threads.semaphore()
    assert sem instanceof threads.semaphore
    assert sem.value == 0
    assert sem.release() == sem
    assert sem.value == 1
    assert sem.acquire() == sem
    assert sem.value == 0
}

expect_fail(() => threads.semaphore(-1))
expect_fail(() => threads.semaphore(0x8000_0000))

do {
    const sem = threads.semaphore(0)
    assert sem.value == 0

    expect_fail(() => sem.acquire(-1))
    expect_fail(() => sem.release(-1))
    expect_fail(() => sem.acquire(0x8000_0000))
    expect_fail(() => sem.release(0x8000_0000))

    assert sem.release(1) == sem
    assert sem.value == 1
    expect_fail(() => sem.release(0x7FFF_FFFF))
    assert sem.release(0x7FFF_FFFE)
    assert sem.value == 0x7FFF_FFFF
}

do {
    const que = threads.queue()
    assert que instanceof threads.queue
    assert ! (que instanceof threads.stack)
    assert que.size == 0

    assert que.push() == que
    assert que.size == 0

    assert que.push("abc", "def") == que
    assert que.size == 2

    assert que.pop() == "abc"
    assert que.size == 1
    assert que.pop() == "def"
    assert que.size == 0

    assert que.push("x")
    assert que.push("y")
    assert que.push("z")
    assert que.size == 3

    const xy = que.pop(2)
    assert que.size == 1
    assert typeof xy == "array"
    assert xy.size == 2
    assert xy[0] == "x"
    assert xy[1] == "y"

    const z = que.pop(1)
    assert que.size == 0
    assert typeof z == "array"
    assert z.size == 1
    assert z[0] == "z"
}

fun {
    const que = threads.queue()
    const out = []
    const thr = fun {
        loop {
            const val = que.pop()
            if val == void {
                break
            }
            out.push(val)
        }
    }.async()

    const mid = 10
    que.push(base.range(mid)..., void, base.range(mid, mid * 2)...)

    thr.wait()

    assert out.size == mid
    for const i in base.range(mid) {
        assert out[i] == i
    }
}()

do {
    const stack = threads.stack()
    assert stack instanceof threads.stack
    assert ! (stack instanceof threads.queue)
    assert stack.size == 0

    assert stack.push() == stack
    assert stack.size == 0

    assert stack.push("abc", "def") == stack
    assert stack.size == 2

    assert stack.pop() == "def"
    assert stack.size == 1
    assert stack.pop() == "abc"
    assert stack.size == 0

    assert stack.push("x")
    assert stack.push("y")
    assert stack.push("z")
    assert stack.size == 3

    const xy = stack.pop(2)
    assert stack.size == 1
    assert typeof xy == "array"
    assert xy.size == 2
    assert xy[0] == "y"
    assert xy[1] == "z"

    const z = stack.pop(1)
    assert stack.size == 0
    assert typeof z == "array"
    assert z.size == 1
    assert z[0] == "x"
}

fun {
    const stack = threads.stack()
    const out = []
    const thr = fun {
        loop {
            const val = stack.pop()
            if val == void {
                break
            }
            out.push(val)
        }
    }.async()

    const mid = 10
    stack.push(base.range(mid)..., void, base.range(mid, mid * 2)...)

    thr.wait()

    assert out.size == mid
    for const i in base.range(mid) {
        assert out[i] == mid * 2 - 1 - i
    }
}()

do {
    assert threads.sleep() == void
    assert threads.sleep(0.001) == void
    expect_fail(() => threads.sleep(void))
    expect_fail(() => threads.sleep(""))
    expect_fail(() => threads.sleep(-1))
    expect_fail(() => threads.sleep(1_000_001))
    expect_fail(() => threads.sleep(1_000_000.1))
}
