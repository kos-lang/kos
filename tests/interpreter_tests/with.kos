# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

class test_lock {
    constructor(acquire, release) {
        this.acquire_count = 0
        this.release_count = 0
        this.release       = release
        if acquire != void {
            this.acquire = acquire
        }
    }
}

class test_full_lock {
    constructor {
        test_lock.apply(this, [fun { this.acquire_count += 1 },
                               fun { this.release_count += 1 }])
    }
}

class test_release_lock {
    constructor {
        test_lock.apply(this, [void, fun { this.release_count += 1 }])
    }
}

class test_cancellable_lock {
    constructor {
        test_lock.apply(this, [void, fun { if ! this.cancel { this.release_count += 1 } }])
        this.cancel = false
    }
}

do {
    const lock = test_release_lock()

    with lock {
        lock.test = "x"
    }

    assert lock.acquire_count == 0
    assert lock.release_count == 1
    assert "test" in lock
    assert lock.test == "x"
}

do {
    const lock = test_full_lock()

    with lock {
        lock.test = "y"
    }

    assert lock.acquire_count == 1
    assert lock.release_count == 1
    assert "test" in lock
    assert lock.test == "y"
}

do {
    var exception = false
    var lock      = test_full_lock()

    try {
        with lock {
            lock.a = "a"
            throw 123
            lock.b = "b"
        }
    }
    catch const e {
        assert e.value == 123
        assert lock.acquire_count == 1
        assert lock.release_count == 1
        exception = true
    }

    assert exception
    assert "a" in lock
    assert ! ("b" in lock)
    assert lock.a == "a"
}

do {
    var exception = false
    var release   = false

    try {
        with { release: fun { release = true } } {
            throw 234
        }
    }
    catch const e {
        assert e.value == 234
        assert release == true
        exception = true
    }

    assert exception
    assert release
}

do {
    const lock = test_cancellable_lock()

    with lock { }

    assert lock.release_count == 1

    with lock {
        lock.cancel = true
    }

    assert lock.release_count == 1

    with lock { }

    assert lock.release_count == 1

    lock.cancel = false

    with lock { }

    assert lock.release_count == 2
    assert lock.acquire_count == 0
}

do {
    const lock1 = test_full_lock()
    const lock2 = test_full_lock()
    const lock3 = test_lock(void, fun { throw void })
    const lock4 = test_full_lock()
    var exception = false

    try {
        with lock1, lock2, lock3, lock4 { }
    }
    catch const e {
        assert e.value == void
        exception = true
    }

    assert exception
    assert lock1.acquire_count == 1
    assert lock1.release_count == 1
    assert lock2.acquire_count == 1
    assert lock2.release_count == 1
    assert lock3.acquire_count == 0
    assert lock3.release_count == 0
    assert lock4.acquire_count == 1
    assert lock4.release_count == 1
}

do {
    const lock1 = test_full_lock()
    const lock2 = test_lock(fun { throw void }, fun { lock1.acquire_count -= 100 })
    const lock3 = test_full_lock()
    var exception = false

    try {
        with lock1, lock2, lock3 { lock1.acquire_count -= 1000 }
    }
    catch const e {
        assert e.value == void
        exception = true
    }

    assert exception
    assert lock1.acquire_count == 1
    assert lock1.release_count == 1
    assert lock2.acquire_count == 0
    assert lock2.release_count == 0
    assert lock3.acquire_count == 0
    assert lock3.release_count == 0
}

do {
    const lock1 = test_lock(void, fun { throw 10 })
    const lock2 = test_lock(fun { throw 20 }, fun { })
    var exception = false

    try {
        with lock1, lock2 { throw 30 }
    }
    catch const e {
        assert e.value == 10
        exception = true
    }

    assert exception
}
