# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import base
import fs
import io
import datetime
import test_tools.expect_fail

##############################################################################
# fs.cwd(), fs.chdir()

do {
    const saved_path = fs.cwd();

    assert typeof saved_path == "string"

    assert fs.chdir("/") == "/"

    const root_dir = fs.cwd()

    assert (root_dir == "/") || (root_dir.size == 3 && root_dir.ends_with(":\\"))

    assert fs.chdir(saved_path) == saved_path

    assert fs.cwd() == saved_path
}

##############################################################################
# fs.listdir()

do {
    const found_names = { }

    for const filename in fs.listdir(".") {
        assert typeof filename == "string"
        assert filename.size > 0

        found_names[filename] = void
    }

    assert "."  in found_names
    assert ".." in found_names
}

##############################################################################
# fs.stat()

do {
    const name = "./__fs_stat"
    fs.remove(name)
    assert ! fs.file_exists(name)

    expect_fail(() => fs.stat(name))

    const time_before = datetime.now()

    with const f = io.create(name) {
        base.buffer(5001) -> f.write
    }

    const info = fs.stat(name)

    const time_after = datetime.now()

    assert info.type == "file"
    assert info.size == 5001
    if "blocks" in info {
        assert info.blocks * info.block_size >= info.size
        assert info.block_size >= 1
        assert info.hard_links == 1
    }

    # File times have limited precision
    const wiggle = 2_000_000

    assert info.atime + wiggle >= time_before
    assert info.atime - wiggle <= time_after
    assert time_after - info.atime < 10_000_000

    assert info.mtime + wiggle >= time_before
    assert info.mtime - wiggle <= time_after
    assert time_after - info.mtime < 10_000_000

    assert info.ctime + wiggle >= time_before
    assert info.ctime - wiggle <= time_after
    assert time_after - info.ctime < 10_000_000

    assert fs.remove(name)
    assert ! fs.file_exists(name)
    expect_fail(() => fs.stat(name))
}

##############################################################################
# fs.path_separator

do {
    assert fs.path_separator == "/" || fs.path_separator == "\\"
}

##############################################################################
# fs.mkdir(), fs.rmdir()

do {
    const dir_outer = "./test_dir_outer"
    const dir_inner = "./test_dir_outer/inner"
    const file_inner = "./test_dir_outer/inner/testfile"

    fs.remove(file_inner)
    fs.rmdir(dir_inner)
    fs.rmdir(dir_outer)
    expect_fail(() => fs.stat(dir_outer))

    expect_fail(() => fs.mkdir(dir_inner))
    expect_fail(() => fs.mkdir(dir_inner, false))

    const actual_path = fs.mkdir(dir_inner, true)
    assert actual_path == dir_inner

    assert fs.stat(dir_outer).type == "directory"
    assert fs.stat(dir_inner).type == "directory"

    with const f = io.create(file_inner) {
        f.print("Hello, Kos!")
    }

    assert fs.stat(file_inner).type == "file"

    expect_fail(() => fs.rmdir(dir_outer))
    expect_fail(() => fs.rmdir(dir_inner))
    expect_fail(() => fs.rmdir(file_inner))
    expect_fail(() => fs.remove(dir_outer))

    assert fs.remove(file_inner) == true
    assert fs.remove(file_inner) == false
    expect_fail(() => fs.remove(dir_inner))
    assert fs.rmdir(dir_inner) == true
    assert fs.rmdir(dir_inner) == false
    assert fs.rmdir(dir_outer) == true
    assert fs.rmdir(dir_outer) == false

    expect_fail(() => fs.stat(dir_outer))
}

do {
    const dir_name = "./test_dir_mkdir"

    if fs.file_exists(dir_name) {
        fs.remove(dir_name)
    }
    else {
        fs.rmdir(dir_name)
    }

    with const f = io.create(dir_name) {
        expect_fail(() => fs.mkdir(dir_name, false))
        expect_fail(() => fs.mkdir(dir_name, true))
    }

    fs.remove(dir_name)
    assert ! fs.file_exists(dir_name)

    fs.mkdir(dir_name)

    expect_fail(() => fs.mkdir(dir_name, false))
    fs.mkdir(dir_name, true)

    fs.rmdir(dir_name)
}

##############################################################################
# fs.tempdir()

do {
    assert typeof fs.tempdir() == "string"
    assert fs.stat(fs.tempdir() + "/").type == "directory"
}
