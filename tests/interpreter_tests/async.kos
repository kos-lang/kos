# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import base: thread, range

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

const unoptimized = x => x

# Test basic async do
do {
    var a = void
    ;(async do { a = 10 }).wait()
    assert a == 10
}

# Test async function call with object
do {
    var a = 1
    var b = 2
    var c = { setb: fun(x) { b = x } }
    var d = 3

    const t = async c.setb(10)
    t.wait()

    unoptimized(a)
    unoptimized(d)

    assert t instanceof thread
    assert a == 1
    assert b == 10
    assert typeof c == "object"
    assert "setb" in c
    assert d == 3
}

# Test async stream
do {
    var a = void
    var b = void
    var c = void

    fun aa(x)
    {
        a = x
        return x + 1
    }

    fun bb(x)
    {
        b = x
        return x + 1
    }

    fun cc(x)
    {
        c = x
        return x + 1
    }

    const t = async 101 -> aa -> bb -> cc
    const result = t.wait()

    assert t instanceof thread
    assert a == 101
    assert b == 102
    assert c == 103
    assert result == 104
}

# Test async stream with object
do {
    const o = { value: 10,
                doit:  fun(x) { this.value = x; return x + 1 } }

    const val = (async 42 -> o.doit).wait()

    assert o.value == 42
    assert val == 43
}

# Test recursive spawn of a thread from the spawned thread
do {
    fun respawn(f, o)
    {
        const count = o[0]
        if count == 0 {
            o[1] = 1
        }
        else {
            o[0] = count - 1
            async f(f, o)
        }
    }

    const o = [5, 0]
    respawn(respawn, o)
    while o[1] == 0 {
    }

    assert o[0] == 0
}

# Run a generator on a new thread
do {
    fun run_async(f)
    {
        return async f()
    }

    fun gen_10
    {
        yield 10
    }

    const th = run_async(gen_10())
    assert th.wait() == 10
}

# Run a generator on a new thread
do {
    fun gen(x)
    {
        yield x
    }

    (async gen(0)).wait()
}

# Ellipsis on a new thread
do {
    fun getargs(x...)
    {
        return x
    }

    const out = getargs.async(void, [42]).wait()

    assert typeof out == "array"
    assert out.size == 1
    assert out[0] == 42
}

# THIS MUST COME LAST!
# Recursively spawn threads and keep them waiting on children
do {
    fun thread
    {
        for const i in range(100) { }
    }

    fun start(f, count)
    {
        fun respawn(r, f, count)
        {
            var thread = void

            if count == 0 {
                thread = async f()
            }
            else {
                thread = async r(r, f, count - 1)
            }

            thread.wait()
        }

        try {
            async respawn(respawn, f, count)
        }
        catch const e { }
    }

    async start(thread, 16)
}
