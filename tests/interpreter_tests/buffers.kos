# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import base: buffer, integer, print, string, range

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

do {
    assert typeof buffer           == "class"
    assert typeof buffer.prototype == "object"
}

do {
    const b = buffer()

    assert typeof b == "buffer"
    assert b.size   == 0
    assert b instanceof buffer

    b.reserve(100)
    assert b.size == 0

    expect_fail(()=>b[0])
    expect_fail(()=>b[-1])
}

do {
    const b = buffer()
    assert b instanceof buffer

    assert "insert" in buffer.prototype

    expect_fail(fun { buffer.prototype = {} })
    assert typeof buffer.prototype == "object"

    assert b instanceof buffer
}

do {
    expect_fail(()=>buffer(-1))
}

do {
    const b = buffer()

    assert typeof b == "buffer"
    assert b.size   == 0
    assert b instanceof buffer
}

do {
    const b = buffer(10)

    assert typeof b == "buffer"
    assert b.size   == 10
    assert b instanceof buffer

    for var i in range(b.size) {
        assert b[i] == 0
    }

    for var i in range(b.size) {
        b[i] = i
    }

    assert b[0]   == 0
    assert b[5]   == 5
    assert b[9]   == 9
    assert b[-1]  == 9
    assert b[-5]  == 5
    assert b[-10] == 0

    expect_fail(()=>b[10])
    expect_fail(()=>b[-11])

    b.reserve(512)

    assert b.size == 10

    assert b[0]   == 0
    assert b[5]   == 5
    assert b[9]   == 9
    assert b[-1]  == 9
    assert b[-5]  == 5
    assert b[-10] == 0

    expect_fail(()=>b[10])
    expect_fail(()=>b[-11])

    assert b[integer("3")]  == 3
    assert b[integer("-2")] == 8
    assert b[9.9]           == 9

    b[-3] = 100
    assert b[-3] == 100

    b[5] = 200.5
    assert b[-5] == 200

    b[1] = 255.9
    assert b[1] == 255

    b[-7.1] = 0.01
    assert b[2] == 0

    b[-7] = 0.99
    assert b[3] == 0

    expect_fail(fun { b[10]  = 0     })
    expect_fail(fun { b[-11] = 0     })
    expect_fail(fun { b[0]   = -1    })
    expect_fail(fun { b[0]   = 256   })
    expect_fail(fun { b[0]   = 256.1 })
    expect_fail(fun { b[0]   = -1.01 })

    expect_fail(fun { b[5] = void    })
    expect_fail(fun { b[5] = true    })
    expect_fail(fun { b[5] = false   })
    expect_fail(fun { b[5] = ""      })
    expect_fail(fun { b[5] = "0"     })
    expect_fail(fun { b[5] = []      })
    expect_fail(fun { b[5] = [0]     })
    expect_fail(fun { b[5] = buffer()})
    expect_fail(fun { b[5] = buffer(1) })
    expect_fail(fun { buffer().reserve(-1) })

    assert b.size == 10
    assert b[0]   == 0
    assert b[1]   == 255
    assert b[2]   == 0
    assert b[3]   == 0
    assert b[4]   == 4
    assert b[5]   == 200
    assert b[6]   == 6
    assert b[7]   == 100
    assert b[8]   == 8
    assert b[9]   == 9
}

do {
    const b = buffer(17)
    assert b.size == 17
    for var i in range(b.size) {
        b[i] = i + 100
    }

    var count = 0
    for var i in b {
        assert i == count + 100
        count += 1
    }
    assert count == 17
}

do {
    const b = buffer([95, 96], "a", [], fun { yield 98; yield 99 } ())
    assert b.size == 5
    assert b[0]   == 95
    assert b[1]   == 96
    assert b[2]   == 97
    assert b[3]   == 98
    assert b[4]   == 99

    expect_fail(fun { buffer({}) })
    expect_fail(fun { buffer(1, 2, 3) })
    expect_fail(fun { buffer(false) })
    expect_fail(fun { buffer(void) })
    expect_fail(fun { buffer([-1]) })
    expect_fail(fun { buffer([256]) })

    b[1:2] = 10
    assert b.size == 5
    assert b[0]   == 95
    assert b[1]   == 10
    assert b[2]   == 97
    assert b[3]   == 98
    assert b[4]   == 99

    b[1:-1] = "K"
    assert b.size == 3
    assert b[0]   == 95
    assert b[1]   == 75
    assert b[2]   == 99

    b[:] = fun { yield 10; yield 20 } ()
    assert b.size == 2
    assert b[0]   == 10
    assert b[1]   == 20
}

do {
    const a = buffer([1, 2, 3])
    const b = buffer([4, 5])
    const c = buffer(a, b)
    assert typeof c == "buffer"
    assert c.size == 5
    assert c[0] == 1
    assert c[1] == 2
    assert c[2] == 3
    assert c[3] == 4
    assert c[4] == 5
}

do {
    expect_fail(()=>buffer(fun { }))
    expect_fail(()=>buffer(fun { yield 256 } ()))
}

do {
    const b = buffer(range(256))
    assert b.size == 256
    for const i in range(256) {
        assert b[i] == i
    }
}

do {
    const b = buffer(10, 15)
    assert b.size == 10
    for const i in range(10) {
        assert b[i] == 15
    }
}

do {
    expect_fail(()=>buffer(10, -1))
    expect_fail(()=>buffer(10, 256))
}

# Push expand a buffer
do {
    fun args(a...)
    {
        return a
    }

    const a = args(buffer("ab")...)
    assert typeof a == "array"
    assert a.size == 2
    assert a[0] == 97
    assert a[1] == 98
}

# Convert invalid string to buffer
do {
    var exception = void
    try {
        "\(buffer("\x{fa6faB}"))"
    }
    catch const e {
        exception = e.value
    }
    assert exception
}

##############################################################################
# base.buffer.prototype.size

do {
    class new_obj { }
    new_obj.prototype = buffer()

    const obj = new_obj()

    assert typeof obj == "object"
    assert "size" propertyof obj
    assert ! ("size" in obj)
    expect_fail(()=>obj.size)
}

##############################################################################
# base.buffer.prototype.fill

do {
    const b = buffer(32)

    b.fill(1)
    for const i in range(b.size) {
        assert b[i] == 1
    }

    b.fill(50)
    for const i in range(b.size) {
        assert b[i] == 50
    }

    b.fill(100, 24)
    for const i in range(b.size) {
        if i < 24 {
            assert b[i] == 50
        }
        else {
            assert b[i] == 100
        }
    }

    b.fill(17, 10, 20)
    for const i in range(b.size) {
        if i < 10 {
            assert b[i] == 50
        }
        else if i < 20 {
            assert b[i] == 17
        }
        else if i < 24 {
            assert b[i] == 50
        }
        else {
            assert b[i] == 100
        }
    }

    b.fill(255.0, -24, void)
    for const i in range(b.size) {
        if i < 8 {
            assert b[i] == 50
        }
        else {
            assert b[i] == 255
        }
    }

    b.resize(4)
    b.fill(5, void, void)
    for const i in range(b.size) {
        assert b[i] == 5
    }

    b.fill(6, void)
    for const i in range(b.size) {
        assert b[i] == 6
    }

    expect_fail(()=>b.fill(0, false, void))
    expect_fail(()=>b.fill(0, void, false))
    expect_fail(()=>b.fill(0, false))
    expect_fail(()=>b.fill(256, void, void))
}

##############################################################################
# base.buffer.prototype.copy_buffer

do {
    const b1 = buffer(10)
    const b2 = buffer(5)
    const b3 = buffer(15)
    const b4 = buffer(3)

    b1.fill(1)
    b2.fill(2)
    b3.fill(3)
    b4.fill(4)

    fun check_b1(contents...)
    {
        assert b1.size == contents.size
        for const i in range(b1.size) {
            assert b1[i] == contents[i]
        }
    }

    b1.copy_buffer(0, b2)
    check_b1(2, 2, 2, 2, 2, 1, 1, 1, 1, 1)

    b1.copy_buffer(void, b3)
    check_b1(3, 3, 3, 3, 3, 3, 3, 3, 3, 3)

    b1.copy_buffer(5, b2)
    check_b1(3, 3, 3, 3, 3, 2, 2, 2, 2, 2)

    b1.copy_buffer(11, b4)
    check_b1(3, 3, 3, 3, 3, 2, 2, 2, 2, 2)

    b1.copy_buffer(void, b4)
    check_b1(4, 4, 4, 3, 3, 2, 2, 2, 2, 2)

    b1.copy_buffer(0, b2, 1)
    check_b1(2, 2, 2, 2, 3, 2, 2, 2, 2, 2)

    b1.copy_buffer(0, b4, void)
    check_b1(4, 4, 4, 2, 3, 2, 2, 2, 2, 2)

    b1.fill(0)
    b1.copy_buffer(2, b2, -3)
    check_b1(0, 0, 2, 2, 2, 0, 0, 0, 0, 0)

    b1.copy_buffer(void, b4, void)
    check_b1(4, 4, 4, 2, 2, 0, 0, 0, 0, 0)

    b1.copy_buffer(-4, b3, -2)
    check_b1(4, 4, 4, 2, 2, 0, 3, 3, 0, 0)

    expect_fail(fun { b1.copy_buffer(0, 1, b3) })
    check_b1(4, 4, 4, 2, 2, 0, 3, 3, 0, 0)

    b1.fill(0)
    b1.copy_buffer(void, b2, void, void)
    check_b1(2, 2, 2, 2, 2, 0, 0, 0, 0, 0)

    b1.copy_buffer(-100, b4, -100, 100)
    check_b1(4, 4, 4, 2, 2, 0, 0, 0, 0, 0)

    expect_fail(fun { b1.copy_buffer(b4, 0, 1, 2) })
    expect_fail(fun { b1.copy_buffer(0, 1, b4, 0) })
    expect_fail(fun { b1.copy_buffer(0, 1, 2, b4) })
    expect_fail(fun { b1.copy_buffer(b4, 2, b4) })
    expect_fail(fun { b1.copy_buffer(b4, b4) })
    check_b1(4, 4, 4, 2, 2, 0, 0, 0, 0, 0)

    b1.copy_buffer(-4, b3, 0, 3)
    check_b1(4, 4, 4, 2, 2, 0, 3, 3, 3, 0)

    b1.copy_buffer(-2, b1, 2)
    check_b1(4, 4, 4, 2, 2, 0, 3, 3, 4, 2)

    for const i in range(b1.size) {
        b1[i] = i
    }
    b1.copy_buffer(-6, b1)
    check_b1(0, 1, 2, 3, 0, 1, 2, 3, 4, 5) 

    b1.copy_buffer(0, b1, 5, 10)
    check_b1(1, 2, 3, 4, 5, 1, 2, 3, 4, 5) 

    for const i in range(b2.size) {
        assert b2[i] == 2
    }
    for const i in range(b3.size) {
        assert b3[i] == 3
    }
    for const i in range(b4.size) {
        assert b4[i] == 4
    }
}

##############################################################################
# base.buffer.prototype.insert

do {
    const b1 = buffer()
    const b2 = buffer(20)

    b1.fill(1)
    b2.fill(2)

    assert b1.size == 0

    b1[:] = b2

    assert b1.size == 20
    for var v in b1 {
        assert v == 2
    }
}

do {
    const b1 = buffer(6)
    const b2 = buffer(4)

    for var i in range(b1.size) {
        b1[i] = i
    }
    for var i in range(b2.size) {
        b2[i] = i + 10
    }

    b1[2:-1] = b2

    const expected = [0, 1, 10, 11, 12, 13, 5]
    assert b1.size == expected.size
    for var i in range(b1.size) {
        assert b1[i] == expected[i]
    }
}

##############################################################################
# base.buffer.prototype.slice

do {
    const b1 = buffer(20)

    for var i in range(b1.size) {
        b1[i] = i
    }

    var b2 = b1[:]

    assert typeof b2 == "buffer"
    assert b1.size == 20
    assert b2.size == 20
    assert b1 == b2
    b2[0] = 200

    for var i in range(b1.size) {
        assert b1[i] == i
        assert b2[i] == (i == 0 ? 200 : i)
    }

    b2 = b1[-100:100]

    assert typeof b2 == "buffer"
    assert b1.size == 20
    assert b2.size == 20
    assert b1 == b2

    b2 = b1.slice(void, void)

    assert typeof b2 == "buffer"
    assert b1.size == 20
    assert b2.size == 20
    assert b1 == b2
    b2[2] = 100

    for var i in range(b1.size) {
        assert b1[i] == i
        assert b2[i] == (i == 2 ? 100 : i)
    }

    b2 = b1[10:]

    assert typeof b2 == "buffer"
    assert b2.size == 10
    for var i in range(b2.size) {
        assert b2[i] == i + 10
    }

    b2 = b1[-10:]

    assert typeof b2 == "buffer"
    assert b2.size == 10
    for var i in range(b2.size) {
        assert b2[i] == i + 10
    }

    b2 = b1[-15:-5]

    assert typeof b2 == "buffer"
    assert b2.size == 10
    for var i in range(b2.size) {
        assert b2[i] == i + 5
    }

    b2 = b1.slice(-5, void)

    assert typeof b2 == "buffer"
    assert b2.size == 5
    for var i in range(b2.size) {
        assert b2[i] == i + 15
    }

    b2 = b1.slice(6, -10)

    assert typeof b2 == "buffer"
    assert b2.size == 4
    for var i in range(b2.size) {
        assert b2[i] == i + 6
    }
}

##############################################################################
# base.buffer.prototype.pack

do {
    const b = buffer()
    b.pack("")

    assert b.size == 0
}

do {
    const b = buffer()
    b.pack(" i1 i1 ", 101, 102)

    assert b.size == 2
    assert b[0]   == 101
    assert b[1]   == 102
}

do {
    const b  = buffer()
    const b3 = buffer(3)
    const b5 = buffer(5)

    for var i in range(b3.size) {
        b3[i] = 0x30 + i
    }
    for var i in range(b5.size) {
        b5[i] = 0x50 + i
    }

    b.pack("u1 u2 u4 u8 i1 i2 i4 i8 f4 f8 b4 b4 s4 s4",
            0x81,
            0x8403,
            0x88070605,
            0x8807060504030201,
            0x81,
            0x8403,
            0x88070605,
            0x8807060504030201,
            1.0,
            2.0,
            b3,
            b5,
            "abc",
            "defgh")

    const expected = [ 0x81, 0x03, 0x84, 0x05, 0x06, 0x07, 0x88, 0x01,
                       0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x88, 0x81,
                       0x03, 0x84, 0x05, 0x06, 0x07, 0x88, 0x01, 0x02,
                       0x03, 0x04, 0x05, 0x06, 0x07, 0x88, 0x00, 0x00,
                       0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x40, 0x30, 0x31, 0x32, 0x00, 0x50, 0x51,
                       0x52, 0x53, 0x61, 0x62, 0x63, 0x00, 0x64, 0x65,
                       0x66, 0x67 ]

    assert b.size == expected.size

    for var i in range(b.size) {
        if b[i] != expected[i] {
            print("invalid value at position \(i) - expected: \(expected[i]) actual: \(b[i])")
        }
        assert b[i] == expected[i]
    }
}

do {
    const b = buffer(2)
    b[0] = 255
    b[1] = 254
    b.pack("<u2 >u2 <u2 >u2 <f4 >f4 <f8 >f8",
            0x1234, 0x4567, 0x89AB, 0xCDEF,
            1.0, 2.0, 3.0, 4.0)

    const expected = [ 0xFF, 0xFE, 0x34, 0x12, 0x45, 0x67, 0xAB, 0x89, 0xCD, 0xEF,
                       0x00, 0x00, 0x80, 0x3F, 0x40, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40,
                       0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]

    assert b.size == expected.size

    for var i in range(b.size) {
        if b[i] != expected[i] {
            print("invalid value at position \(i) - expected: \(expected[i]) actual: \(b[i])")
        }
        assert b[i] == expected[i]
    }
}

do {
    const a = buffer(3)
    a[0] = 1
    a[1] = 2
    a[2] = 3

    const b = buffer()
    b.pack("<b3 x >b3 x", a, a)

    const expected = [ 1, 2, 3, 0, 1, 2, 3, 0 ]

    assert b.size == expected.size

    for var i in range(b.size) {
        if b[i] != expected[i] {
            print("invalid value at position \(i) - expected: \(expected[i]) actual: \(b[i])")
        }
        assert b[i] == expected[i]
    }
}

do {
    const b = buffer()
    b.pack("    2     i4   < >   <     > < > <><><>>>>> <<<<",
           1, 2)

    const expected = [ 1, 0, 0, 0, 2, 0, 0, 0 ]

    assert b.size == expected.size

    for var i in range(b.size) {
        if b[i] != expected[i] {
            print("invalid value at position \(i) - expected: \(expected[i]) actual: \(b[i])")
        }
        assert b[i] == expected[i]
    }
}

do {
    const b = buffer()
    b.pack("< 1 s2 0 u4 0 s4 > 3 x 2 s4",
           "abcdef", "ABCDEF", "xz")

    const expected = [ 0x61, 0x62, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x78, 0x7A, 0x00, 0x00 ]

    assert b.size == expected.size

    for var i in range(b.size) {
        if b[i] != expected[i] {
            print("invalid value at position \(i) - expected: \(expected[i]) actual: \(b[i])")
        }
        assert b[i] == expected[i]
    }
}

do {
    const b = buffer()
    b.pack("", 1, 2, 3)

    assert b.size == 0

    b.pack("")

    assert b.size == 0

    b.pack("s0", "abc")

    assert b.size == 0
}

do {
    const b = buffer()
    b.pack("s", "\x{AA}\x{55555}")

    assert b.size == 6
    assert b[0]   == 0xC2
    assert b[1]   == 0xAA
    assert b[2]   == 0xF1
    assert b[3]   == 0x95
    assert b[4]   == 0x95
    assert b[5]   == 0x95
}

do {
    const b = buffer()
    b.pack("> 2s i1", "\x80", "\x{7FF}", 10)

    assert b.size == 5
    assert b[0]   == 0xC2
    assert b[1]   == 0x80
    assert b[2]   == 0xDF
    assert b[3]   == 0xBF
    assert b[4]   == 10
}

do {
    const b = buffer()
    b.pack("i2 u2", [ 0x8000, 0x8101 ])

    assert b.size == 4
    assert b[0]   == 0x00
    assert b[1]   == 0x80
    assert b[2]   == 0x01
    assert b[3]   == 0x81
}

do {
    const b = buffer()
    b.pack("f4 f4", 1, 0x4000000000000000);

    assert b.size == 8
    assert b[0]   == 0x00
    assert b[1]   == 0x00
    assert b[2]   == 0x80
    assert b[3]   == 0x3F
    assert b[4]   == 0x00
    assert b[5]   == 0x00
    assert b[6]   == 0x80
    assert b[7]   == 0x5e
}

# pack buffer into itself
do {
    const b = buffer([1, 2, 3])
    b.pack("2 b5", b, b)
    assert b.size == 13
    assert b[0]   == 1
    assert b[1]   == 2
    assert b[2]   == 3
    assert b[3]   == 1
    assert b[4]   == 2
    assert b[5]   == 3
    assert b[6]   == 0
    assert b[7]   == 0
    assert b[8]   == 1
    assert b[9]   == 2
    assert b[10]  == 3
    assert b[11]  == 1
    assert b[12]  == 2
}

do {
    expect_fail(()=>buffer().pack(1))
    expect_fail(()=>buffer().pack())
    expect_fail(()=>buffer().pack("1", 0))
    expect_fail(()=>buffer().pack("u", 0))
    expect_fail(()=>buffer().pack("r1", 0))
    expect_fail(()=>buffer().pack("u3", 0))
    expect_fail(()=>buffer().pack("i7", 0))
    expect_fail(()=>buffer().pack("f2", 0))
    expect_fail(()=>buffer().pack("f4", "x"))
    expect_fail(()=>buffer().pack("u2", ""))
    expect_fail(()=>buffer().pack("s2", 0))
    expect_fail(()=>buffer().pack("b", ""))
    expect_fail(()=>buffer().pack("u1 1", 1))
    expect_fail(()=>buffer().pack("2 u1", 1))
    expect_fail(()=>buffer().pack("i1 i2", 1))
    expect_fail(()=>buffer().pack("2 f4", 1))
    expect_fail(()=>buffer().pack("2 s4", ""))
    expect_fail(()=>buffer().pack("2 b4", buffer()))
    expect_fail(()=>buffer().pack("2 b4"))
    expect_fail(()=>buffer().pack("b4", 0))
    expect_fail(()=>buffer().pack("u 4", 0))
    expect_fail(()=>buffer().pack("i 4", 0))
    expect_fail(()=>buffer().pack("f 4", 0))
    expect_fail(()=>buffer().pack("s 4", 0))
    expect_fail(()=>buffer().pack("s1", 5))
    expect_fail(()=>buffer().pack("s1", 1.5))
    expect_fail(()=>buffer().pack("s1", void))
    expect_fail(()=>buffer().pack("s1", true))
    expect_fail(()=>buffer().pack("s1", {}))
    expect_fail(()=>buffer().pack("s1", [[]]))
    expect_fail(()=>buffer().pack("s1", buffer()))
    expect_fail(()=>buffer().pack("s1", fun { }))
    expect_fail(()=>buffer().pack("s1", buffer))
    expect_fail(()=>buffer().pack("u9000000000", 1))
    expect_fail(()=>buffer().pack("\xff", 1))
    expect_fail(()=>buffer().pack("uu", 1))
    expect_fail(()=>buffer().pack("u\xff", 1))
}

##############################################################################
# base.buffer.prototype.unpack

do {
    const b = buffer([ 1, 2, 3, 4, 5, 6, 7 ])
    const a = b.unpack("u4 x i2")

    assert typeof a == "array"
    assert a.size == 2
    assert typeof a[0] == "integer"
    assert typeof a[1] == "integer"
    assert a[0] == 0x04030201
    assert a[1] == 0x0706
}

do {
    const b = buffer([ 1, 2,
                       3, 4, 5, 6,
                       7, 8, 9, 10, 11, 12, 13, 14,
                       15, 1, 2, 3, 4, 5, 6, 7, 15, 2, 3, 4, 5, 6, 7, 8 ])
    const a = b.unpack("<u1 >u1 <u2 >u2 <u4 >u4 <u8 >u8")

    assert typeof a == "array"
    assert a.size == 8
    assert typeof a[0] == "integer"
    assert typeof a[1] == "integer"
    assert typeof a[2] == "integer"
    assert typeof a[3] == "integer"
    assert typeof a[4] == "integer"
    assert typeof a[5] == "integer"
    assert typeof a[6] == "integer"
    assert typeof a[7] == "integer"
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == 0x0403
    assert a[3] == 0x0506
    assert a[4] == 0x0A090807
    assert a[5] == 0x0B0C0D0E
    assert a[6] == 0x070605040302010F
    assert a[7] == 0x0F02030405060708
}

do {
    const b = buffer([ 1, 2,
                       3, 4, 5, 6,
                       7, 8, 9, 10, 11, 12, 13, 14,
                       15, 1, 2, 3, 4, 5, 6, 7, 15, 2, 3, 4, 5, 6, 7, 8 ])
    const a = b.unpack("<i1 >i1 <i2 >i2 <i4 >i4 <i8 >i8")

    assert typeof a == "array"
    assert a.size == 8
    assert typeof a[0] == "integer"
    assert typeof a[1] == "integer"
    assert typeof a[2] == "integer"
    assert typeof a[3] == "integer"
    assert typeof a[4] == "integer"
    assert typeof a[5] == "integer"
    assert typeof a[6] == "integer"
    assert typeof a[7] == "integer"
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == 0x0403
    assert a[3] == 0x0506
    assert a[4] == 0x0A090807
    assert a[5] == 0x0B0C0D0E
    assert a[6] == 0x070605040302010F
    assert a[7] == 0x0F02030405060708
}

do {
    const b = buffer([ 0x81, 0x82,
                       0xFD, 0xFF, 0xFF, 0xFE,
                       7, 8, 9, 0x80, 0x80, 12, 13, 14,
                       15, 1, 2, 3, 4, 5, 6, 0x80, 0x80, 2, 3, 4, 5, 6, 7, 8 ])
    const a = b.unpack("<i1 >i1 <i2 >i2 <i4 >i4 <i8 >i8")

    assert typeof a == "array"
    assert a.size == 8
    assert typeof a[0] == "integer"
    assert typeof a[1] == "integer"
    assert typeof a[2] == "integer"
    assert typeof a[3] == "integer"
    assert typeof a[4] == "integer"
    assert typeof a[5] == "integer"
    assert typeof a[6] == "integer"
    assert typeof a[7] == "integer"
    assert a[0] == -0x7F
    assert a[1] == -0x7E
    assert a[2] == -3
    assert a[3] == -2
    assert a[4] == 0xFFFFFFFF80090807
    assert a[5] == 0xFFFFFFFF800C0D0E
    assert a[6] == 0x800605040302010F
    assert a[7] == 0x8002030405060708
}

do {
    const b = buffer([ 0, 0, 0x80, 0x3F,
                       0x40, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0x08, 0x40,
                       0x40, 0x10, 0, 0, 0, 0, 0, 0 ])
    const a = b.unpack("<f4 >f4 <f8 >f8")

    assert typeof a == "array"
    assert a.size == 4
    assert typeof a[0] == "float"
    assert typeof a[1] == "float"
    assert typeof a[2] == "float"
    assert typeof a[3] == "float"
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == 3
    assert a[3] == 4
}

do {
    const b = buffer([0, 0x61, 0x62, 0x63])
    const a = b.unpack("x s3")

    assert typeof a == "array"
    assert a.size == 1
    assert typeof a[0] == "string"
    assert a[0] == "abc"
}

do {
    const b = buffer([ 1, 2, 3, 4, 5, 6, 7 ])
    const a = b.unpack("2 b3")

    assert typeof a == "array"
    assert a.size == 2
    assert typeof a[0] == "buffer"
    assert typeof a[1] == "buffer"
    assert a[0].size == 3
    assert a[1].size == 3
    assert a[0][0] == 1
    assert a[0][1] == 2
    assert a[0][2] == 3
    assert a[1][0] == 4
    assert a[1][1] == 5
    assert a[1][2] == 6
}

do {
    const b = buffer([ 1, 2, 3, 4, 5, 6, 7, 8 ])
    const a = b.unpack("i1 i2 i1", 2)

    assert typeof a    == "array"
    assert a.size      == 3
    assert typeof a[0] == "integer"
    assert typeof a[1] == "integer"
    assert typeof a[2] == "integer"
    assert a[0]        == 3
    assert a[1]        == 0x504
    assert a[2]        == 6
}

do {
    const b = buffer(3)
    b[0] = 0x30
    b[1] = 0
    b[2] = 0x41

    const s = b.unpack("s")[0]
    assert typeof s == "string"
    assert s.size == 3
    assert s[0] == "0"
    assert s[1] == "\0"
    assert s[2] == "A"
}

do {
    const b = buffer(10)
    for var i in range(b.size) {
        b[i] = 0x41 + i;
    }

    const contents = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J" ]

    const s1 = b.unpack("s")[0]
    const s2 = string(b)
    assert typeof s1 == "string"
    assert s1.size == 10
    for var i in range(s1.size) {
        assert s1[i] == contents[i]
    }
    assert s1 == s2
}

do {
    expect_fail(()=>buffer.prototype.unpack.apply(void, [""]))
    expect_fail(()=>buffer(100).unpack(void))
    expect_fail(()=>buffer().unpack("u1"))
}

do {
    assert buffer().unpack("s") == [""]
    assert buffer().unpack("0 x") == []
    expect_fail(()=>buffer([1,2,3,4]).unpack("u0"))
    expect_fail(()=>buffer([1,2,3,4]).unpack("4294967295 u1"))
    expect_fail(()=>buffer([1,2,3,4]).unpack("429496729 u1"))
    expect_fail(()=>buffer([1,2,3,4]).unpack("2s"))
}

##############################################################################
# base.buffer.prototype.resize()

do {
    const b = buffer([1, 2, 3, 4, 5])
    assert b.size == 5
    for const i in range(5) {
        assert b[i] == i + 1
    }

    b.resize(0)
    assert b.size == 0

    b.resize(5)
    assert b.size == 5
    for const i in range(5) {
        assert b[i] == 0
    }
}

# Resize buffer with value
do {
    const b = buffer([4, 5])
    b.resize(5, 8)
    assert b.size == 5
    assert b[0] == 4
    assert b[1] == 5
    assert b[2] == 8
    assert b[3] == 8
    assert b[4] == 8
}

# Resize with invalid value
do {
    expect_fail(() => buffer([]).resize(3, buffer()))
    expect_fail(() => buffer([]).resize(3, void))
    expect_fail(() => buffer([]).resize(3, -1))
    expect_fail(() => buffer([]).resize(3, 256))
}

##############################################################################
# base.buffer.prototype.get
do {
    const b = buffer([1, 2, 3])
    assert b.get(1)      == 2
    assert b.get(-1)     == 3
    assert b.get(4)      == void
    assert b.get(-4, 42) == 42
}
