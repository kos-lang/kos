# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

import base
import test_tools.expect_fail
import fs
import os
import io

##############################################################################
# os.spawn

fun find_program(name)
{
    for const prefix in ["/bin", "/usr/bin"] {
        const path = prefix + "/" + name
        if fs.is_file(path) {
            return path
        }
    }

    return void
}

const bin_true = find_program("true")

const bin_false = find_program("false")

const bin_cat = find_program("cat")

do {
    expect_fail(() => os.spawn())
    expect_fail(() => os.spawn({}))
    expect_fail(() => os.spawn(args=[]))
    expect_fail(() => os.spawn(void))
    expect_fail(() => os.spawn(0))
    expect_fail(() => os.spawn([]))
    expect_fail(() => os.spawn([bin_true]))
    expect_fail(() => os.spawn([bin_true[1:].split("/")...]))
    expect_fail(() => os.spawn("no such program %%%"))
}

if bin_true {

    # args must be an array of strings
    expect_fail(() => os.spawn(bin_true, {}))
    expect_fail(() => os.spawn(bin_true, void))
    expect_fail(() => os.spawn(bin_true, 1))
    expect_fail(() => os.spawn(bin_true, [1]))
    expect_fail(() => os.spawn(bin_true, [true]))
    os.spawn(bin_true, [])

    # env must be an object containing strings
    expect_fail(() => os.spawn(program=bin_true, env=[]))
    expect_fail(() => os.spawn(program=bin_true, env=true))
    expect_fail(() => os.spawn(program=bin_true, env=1))
    expect_fail(() => os.spawn(program=bin_true, env={STH: 1}))
    expect_fail(() => os.spawn(program=bin_true, env={STH: true}))
    expect_fail(() => os.spawn(program=bin_true, env={"some=": "x"}))
    os.spawn(program=bin_true, env={})
    os.spawn(program=bin_true, env={}, args=[])
    os.spawn(program=bin_true, env={STH: "OK1"}, args=[])

    # inherit_env must be a boolean
    expect_fail(() => os.spawn(program=bin_true, inherit_env={}))
    expect_fail(() => os.spawn(program=bin_true, inherit_env=void))
    os.spawn(program=bin_true, inherit_env=true)
    os.spawn(program=bin_true, inherit_env=false)
    os.spawn(program=bin_true, inherit_env=false, env={STH: "OK2"})

    # cwd works for spawning processes
    if ! fs.is_file("./true") {
        const last_slash = bin_true.rscan("/")
        os.spawn(program="./true", cwd=bin_true[0:last_slash], inherit_env=false)
    }

    # On most systems, true is on PATH
    os.spawn("true")

    # os.spawn() returns a wait object
    do {
        const process = os.spawn(bin_true)

        assert process instanceof os.process
        assert process.pid > 1

        const ret = process.wait()
        assert typeof ret == "object"
        assert ret.status  == 0
        assert ret.signal  == void
        assert ret.stopped == false

        expect_fail(() => process.wait())
    }

    # Check non-zero status
    if bin_false {
        const process = os.spawn(bin_false)

        assert process instanceof os.process
        assert process.pid > 1

        const ret = process.wait()
        assert ret.status  != 0
        assert ret.signal  == void
        assert ret.stopped == false

        expect_fail(() => process.wait())
    }

    # Call wait() on a non-process object
    do {
        const process = os.spawn(bin_true)

        const wait = process.wait
        assert typeof wait == "function"

        expect_fail(() => wait.apply(void, []))
    }
}

if bin_cat {
    const name = "__spawn_test_file"
    fs.remove(name)
    with const f = io.create(name) {
        f.print("hello")
        f.print("world")
    }

    const p = io.pipe();
    defer { p.read.close() }

    var proc = void
    with p.write {
        proc = os.spawn(program = bin_cat, args = [name], stdout = p.write)
    }
    assert proc.pid > 0

    const it = p.read.read_lines()
    assert it() == "hello"
    assert it() == "world"
    expect_fail(it)

    const ret = proc.wait()
    assert ret.status == 0

    fs.remove(name)
}

if bin_cat {
    const name = "__spawn_test_file2"
    fs.remove(name)

    const p = io.pipe();
    defer { p.write.close() }

    var proc = void
    with const f = io.create(name) {
        defer { p.read.close() }

        proc = os.spawn(program = bin_cat, stdin = p.read, stdout = f, stderr = f)
    }
    assert proc.pid > 0

    p.write.print("hello")
    p.write.print("world")
    p.write.flush()
    p.write.close()

    const ret = proc.wait()
    assert ret.status == 0

    with const f = io.open(name, io.ro) {
        const it = f.read_lines()
        assert it() == "hello"
        assert it() == "world"
        expect_fail(it)
    }

    fs.remove(name)
}

##############################################################################
# os.sysname

assert typeof os.sysname == "string"
assert os.sysname != "Unknown"
assert os.sysname.size

##############################################################################
# os.getenv

do {
    const path = os.getenv("PATH")
    assert typeof path == "string"
    assert path.size
}

assert os.getenv("non-existent env")      == void
assert os.getenv("non-existent env", 123) == 123
assert os.getenv(default_value = 456, key = "non-existent env") == 456
