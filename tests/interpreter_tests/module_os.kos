# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

import base
import test_tools.expect_fail
import fs
import os

##############################################################################
# os.spawn

fun have_program(pathname)
{
    if ! fs.is_file(pathname) {
        return false
    }

    try {
        os.spawn(pathname)
        return true
    }
    catch const e {
        base.print(pathname, "failed:", e.value)
    }

    return false
}

const bin_true = have_program("/usr/bin/true") ? "/usr/bin/true" :
                 have_program("/bin/true")     ? "/bin/true"     :
                 void

const bin_false = have_program("/usr/bin/false") ? "/usr/bin/false" :
                  have_program("/bin/false")     ? "/bin/false"     :
                  void

do {
    expect_fail(() => os.spawn())
    expect_fail(() => os.spawn({}))
    expect_fail(() => os.spawn(args=[]))
    expect_fail(() => os.spawn(void))
    expect_fail(() => os.spawn(0))
    expect_fail(() => os.spawn([]))
    expect_fail(() => os.spawn([bin_true]))
    expect_fail(() => os.spawn([bin_true[1:].split("/")...]))
    expect_fail(() => os.spawn("no such program %%%"))
}

if bin_true {

    # args must be an array of strings
    expect_fail(() => os.spawn(bin_true, {}))
    expect_fail(() => os.spawn(bin_true, void))
    expect_fail(() => os.spawn(bin_true, 1))
    expect_fail(() => os.spawn(bin_true, [1]))
    expect_fail(() => os.spawn(bin_true, [true]))
    os.spawn(bin_true, [])

    # env must be an object containing strings
    expect_fail(() => os.spawn(program=bin_true, env=[]))
    expect_fail(() => os.spawn(program=bin_true, env=true))
    expect_fail(() => os.spawn(program=bin_true, env=1))
    expect_fail(() => os.spawn(program=bin_true, env={STH: 1}))
    expect_fail(() => os.spawn(program=bin_true, env={STH: true}))
    expect_fail(() => os.spawn(program=bin_true, env={"some=": "x"}))
    os.spawn(program=bin_true, env={})
    os.spawn(program=bin_true, env={}, args=[])
    os.spawn(program=bin_true, env={STH: "OK1"}, args=[])

    # inherit_env must be a boolean
    expect_fail(() => os.spawn(program=bin_true, inherit_env={}))
    expect_fail(() => os.spawn(program=bin_true, inherit_env=void))
    os.spawn(program=bin_true, inherit_env=true)
    os.spawn(program=bin_true, inherit_env=false)
    os.spawn(program=bin_true, inherit_env=false, env={STH: "OK2"})

    # os.spawn() returns a wait object
    do {
        const process = os.spawn(bin_true)

        assert process.pid > 1

        const ret = process.wait()
        assert typeof ret == "object"
        assert ret.status  == 0
        assert ret.signal  == void
        assert ret.stopped == false

        expect_fail(() => process.wait())
    }

    # Check non-zero status
    if bin_false {
        const process = os.spawn(bin_false)

        assert process.pid > 1

        const ret = process.wait()
        assert ret.status  != 0
        assert ret.signal  == void
        assert ret.stopped == false

        expect_fail(() => process.wait())
    }

    # Call wait() on a non-process object
    do {
        const process = os.spawn(bin_true)

        const wait = process.wait
        assert typeof wait == "function"

        expect_fail(() => wait.apply(void, []))
    }
}
