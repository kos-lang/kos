# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

import base
import datetime
import fs
import io

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

##############################################################################
# io.open, fs.is_file, fs.remove

do {
    assert typeof io.file           == "class"
    assert typeof io.file.prototype == "object"
}

do {
    const name = "__test_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    do {
        const f = io.create(name)
        assert typeof f == "object"
        assert f.fd > 2
        assert ! f.error
        assert ! f.eof

        assert f.size == 0

        const init_buf = base.buffer(9)
        for var i in base.range(init_buf.size) {
            init_buf[i] = i
        }

        assert f.write(init_buf) == f
        assert f.write(init_buf).write(init_buf) == f

        assert f.size == 27

        f.close()

        expect_fail(()=>f.size)
        expect_fail(()=>f.read())
        expect_fail(()=>f.write(init_buf))
        expect_fail(()=>f.eof)
        expect_fail(()=>f.error)
        expect_fail(()=>f.fd)
    }

    assert fs.is_file(name)

    with const f = io.open(name, io.ro) {
        const buf = f.read()

        assert typeof buf == "buffer"
        assert buf.size   == 27

        for var i in base.range(buf.size) {
            assert (i % 9) == buf[i]
        }

        expect_fail(()=>f.write(buf))
    }

    assert fs.remove(name)
    assert ! fs.remove(name)
}

do {
    var failed = true
    try {
        io.open("", void)
    }
    catch const e {
        failed = false
    }
    assert ! failed
}

##############################################################################
# io.file - open non-existent file
do {
    expect_fail(()=>io.file("_#non_existent#_*?", io.ro))
}

##############################################################################
# file.close

do {
    const name = "__test_file"
    var failed = true
    var f = io.create(name)
    try {
        defer {
            f.close()
        }
        f.close.apply(void, [])
    }
    catch const e {
        failed = false
    }
    assert ! failed
}

##############################################################################
# file.size, file.position

do {
    const name = "./__test_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.file(name, io.create_flag) {
        const buf = base.buffer(100)
        for var i in base.range(buf.size) {
            buf[i] = i + 100
        }
        f.write(buf)
    }

    with const f = io.file(name, io.ro) {
        assert f.size     == 100
        assert f.position == 0
        assert typeof f.position == "integer"

        f.seek(50)
        assert f.position == 50

        const buf = f.read(2)
        assert f.position == 52
        assert buf.size   == 2
        assert buf[0]     == 150
        assert buf[1]     == 151

        f.position = 200
        assert f.position == 200
        assert f.size     == 100

        const buf2 = f.read(10)
        assert f.position == 200
        assert buf2.size  == 0

        f.position = 70
        assert f.position == 70

        const buf3 = f.read(2)
        assert f.position == 72
        assert buf3.size  == 2
        assert buf3[0]    == 170
        assert buf3[1]    == 171

        f[(()=>"position")()] = 31
        assert f[(()=>"position")()] == 31

        const buf4 = f.read(1)
        assert f.position == 32
        assert buf4.size  == 1
        assert buf4[0]    == 131
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# io.stdin, io.stdout, io.stderr

do {
    assert io.stdin  instanceof io.file
    assert io.stdout instanceof io.file
    assert io.stderr instanceof io.file

    assert io.stdin.fd  == 0
    assert io.stdout.fd == 1
    assert io.stderr.fd == 2
}

##############################################################################
# file.read_line

do {
    const name = "./__text_line"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        const lines = "abcdefg\nhijklm\nnop";
        f.write(base.buffer().pack("s\(lines.size)", lines))
    }

    with const f = io.open(name, io.ro) {
        expect_fail(()=>f.read_line(-1))
        expect_fail(()=>f.read_line(0))
        var line = f.read_line(1)
        assert line == "abcdefg\n"
        line = f.read_line()
        assert line == "hijklm\n"
        line = f.read_line()
        assert line == "nop"
        assert f.eof
        assert ! f.error
        assert f.read_line() == ""
        assert f.eof
        assert ! f.error
    }

    assert fs.remove(name)
    assert ! fs.remove(name)
}

##############################################################################
# file.read_lines

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        const lines = "abc\n\ndef\n\rxyz"
        f.write(base.buffer().pack("s\(lines.size)", lines))
    }

    with const f = io.open(name, io.ro) {
        const lines = f.read_lines(true)
        assert lines() == "abc\n"
        assert lines() == "\n"
        assert lines() == "def\n"
        assert lines() == "\r"
        assert lines() == "xyz"
        expect_fail(()=>lines())
        assert f.eof
        assert ! f.error
    }

    with const f = io.open(name, io.ro) {
        const lines = f.read_lines(true, 1)
        assert lines() == "abc\n"
        assert lines() == "\n"
        assert lines() == "def\n"
        assert lines() == "\r"
        assert lines() == "xyz"
        expect_fail(()=>lines())
        assert f.eof
        assert ! f.error
    }

    with const f = io.create(name) {
        const lines = "xy\r\nz\x{FF}\n"
        f.write(base.buffer().pack("s", lines))
    }

    with const f = io.open(name, io.ro) {
        const a = [f.read_lines(true)...]
        assert a.size == 2
        assert a[0]   == "xy\r\n"
        assert a[1]   == "z\xFF\n"
        assert f.eof
        assert ! f.error
    }

    with const f = io.create(name) {
        const lines = "ab\rcd\r\nef\ng"
        f.write(base.buffer(lines))
    }

    do {
        const lines = [ "ab\r", "cd\r\n", "ef\n", "g" ]
        for const gran in [1, 2, 3, 4, 5] {
            for const keep_ends in [false, true] {
                const a = [io.read_lines(name, keep_ends, gran)...]
                assert a.size == lines.size
                for const i in base.range(a.size) {
                    const expected = keep_ends ? lines[i] : lines[i].strip()
                    if a[i] != expected {
                        base.print("Failed keep_ends=\(keep_ends) gran=\(gran) line=\(i) expected='\(
                                    base.stringify(expected))' actual='\(base.stringify(a[i]))'")
                        assert a[i] == expected
                    }
                }
            }
        }
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.read_some size too large

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        var exception = false
        var buf       = base.buffer(1024)
        var ret       = void
        assert buf.size == 1024
        try {
            ret = f.read_some(0xFFFFFF00, buf) # Exceeds buffer size limit (uint32_t)
        }
        catch const e {
            exception = true
        }
        assert exception
        assert typeof ret == "void"
        assert typeof buf == "buffer"
        assert buf.size   == 1024
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.read_some

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        f.write(base.buffer(base.range(10, 20)))
    }

    with const f = io.open(name, io.ro) {
        f.position = 2

        const a = f.read_some(0)
        assert typeof a == "buffer"
        assert a.size == 1
        assert a[0] == 12

        expect_fail(() => f.read_some(1, true))
        expect_fail(() => f.read_some(1, 1))
        expect_fail(() => f.read_some(1, [0]))
        expect_fail(() => f.read_some(1, "0"))

        const b = f.read_some()
        assert typeof b == "buffer"
        assert b.size == 7
        assert b[0] == 13
        assert b[-1] == 19
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.write - bad input

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        expect_fail(() => f.write([0]))
        expect_fail(() => f.write(0))
        expect_fail(() => f.write(void))
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.print

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        f.write("false", " ", "void")
        f.write()
        f.write(":")
        f.print()
        f.print("", "Hello,", "World!")
        f.print_lines([1, 2, 3]);
        ["a", "b", "c"] -> base.method(f, f.print_lines)
        f.print("END")
    }

    with const f = io.open(name, io.ro) {
        const expected = [ "false void:",
                           " Hello, World!",
                           "1", "2", "3", "a", "b", "c",
                           "END" ]
        var i = 0
        for var line in f.read_lines(true) {
            assert line.size > expected[i].size
            const delta = line.size - expected[i].size
            assert line[:-delta] == expected[i]
            assert line[-1] == "\n"
            assert delta <= 2
            if delta == 2 {
                assert line[-2] == "\r"
            }
            i += 1
        }
        assert i == expected.size
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.seek, file.print return value

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        const data = base.string(f.write("abcdefghijklmnopqrstuvwxyz").seek(-8).read(4))
        assert data == "stuv"
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.info

do {
    const name = "./__text_file_info"
    fs.remove(name)
    assert ! fs.is_file(name)

    const time_before = datetime.now()

    with const f = io.create(name) {
        base.buffer(5001) -> f.write
    }

    with const f = io.open(name, io.ro) {
        const info = f.info

        const time_after = datetime.now()

        assert info.type == "file"
        assert info.size == 5001
        assert info.blocks * info.block_size >= info.size
        assert info.block_size >= 1
        assert info.hard_links == 1

        # File times have limited precision
        const wiggle = 2_000_000

        assert info.atime + wiggle >= time_before
        assert info.atime - wiggle <= time_after
        assert time_after - info.atime < 10_000_000

        assert info.mtime + wiggle >= time_before
        assert info.mtime - wiggle <= time_after
        assert time_after - info.mtime < 10_000_000

        assert info.ctime + wiggle >= time_before
        assert info.ctime - wiggle <= time_after
        assert time_after - info.ctime < 10_000_000
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

do {
    fun test_file(name, type)
    {
        var f = void

        try {
            f = io.open(name, io.ro)
        }
        catch const e {
            return
        }

        defer {
            f.close()
        }

        const info = f.info

        assert info.type == type
    }

    test_file("/dev", "directory")
    test_file("/dev/null", "char")
}
