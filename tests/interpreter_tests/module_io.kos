#
# Copyright (c) 2014-2018 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

import io
import fs
import lang

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

##############################################################################
# io.open, fs.is_file, fs.remove

do {
    assert typeof io.file           == "class"
    assert typeof io.file.prototype == "object"
}

do {
    const name = "__test_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    do {
        const f = io.create(name)
        assert typeof f == "object"

        assert f.size == 0

        const init_buf = lang.buffer(9)
        for var i in lang.range(init_buf.size) {
            init_buf[i] = i
        }

        assert f.write(init_buf) == f
        assert f.write(init_buf).write(init_buf) == f

        assert f.size == 27

        f.close()

        expect_fail(()=>f.size)
        expect_fail(()=>f.read())
        expect_fail(()=>f.write(init_buf))
    }

    assert fs.is_file(name)

    with const f = io.open(name, io.ro) {
        const buf = f.read()

        assert typeof buf == "buffer"
        assert buf.size   == 27

        for var i in lang.range(buf.size) {
            assert (i % 9) == buf[i]
        }

        expect_fail(()=>f.write(buf))
    }

    assert fs.remove(name)
    assert ! fs.remove(name)
}

do {
    var failed = true
    try {
        io.open("", void)
    }
    catch const e {
        failed = false
    }
    assert ! failed
}

##############################################################################
# io.file - open non-existent file
do {
    expect_fail(()=>io.file("_#non_existent#_*?", io.ro))
}

##############################################################################
# file.close

do {
    const name = "__test_file"
    var failed = true
    var f = io.create(name)
    try {
        defer {
            f.close()
        }
        f.close.apply(void, [])
    }
    catch const e {
        failed = false
    }
    assert ! failed
}

##############################################################################
# file.size, file.position

do {
    const name = "./__test_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.file(name, io.create_flag) {
        const buf = lang.buffer(100)
        for var i in lang.range(buf.size) {
            buf[i] = i + 100
        }
        f.write(buf)
    }

    with const f = io.file(name, io.ro) {
        assert f.size     == 100
        assert f.position == 0
        assert typeof f.position == "integer"

        f.seek(50)
        assert f.position == 50

        const buf = f.read(2)
        assert f.position == 52
        assert buf.size   == 2
        assert buf[0]     == 150
        assert buf[1]     == 151

        f.position = 200
        assert f.position == 200
        assert f.size     == 100

        const buf2 = f.read(10)
        assert f.position == 200
        assert buf2.size  == 0

        f.position = 70
        assert f.position == 70

        const buf3 = f.read(2)
        assert f.position == 72
        assert buf3.size  == 2
        assert buf3[0]    == 170
        assert buf3[1]    == 171

        f[(()=>"position")()] = 31
        assert f[(()=>"position")()] == 31

        const buf4 = f.read(1)
        assert f.position == 32
        assert buf4.size  == 1
        assert buf4[0]    == 131
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# io.stdin, io.stdout, io.stderr

do {
    assert io.stdin  instanceof io.file
    assert io.stdout instanceof io.file
    assert io.stderr instanceof io.file
}

##############################################################################
# file.read_line

do {
    const name = "./__text_line"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        const lines = "abcdefg\nhijklm\nnop";
        f.write(lang.buffer().pack("s\(lines.size)", lines))
    }

    with const f = io.open(name, io.ro) {
        expect_fail(()=>f.read_line(-1))
        expect_fail(()=>f.read_line(0))
        var line = f.read_line(1)
        assert line == "abcdefg\n"
        line = f.read_line()
        assert line == "hijklm\n"
        line = f.read_line()
        assert line == "nop"
        assert f.eof
        assert ! f.error
        assert f.read_line() == ""
        assert f.eof
        assert ! f.error
    }

    assert fs.remove(name)
    assert ! fs.remove(name)
}

##############################################################################
# file.read_lines

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        const lines = "abc\n\ndef\n\rxyz"
        f.write(lang.buffer().pack("s\(lines.size)", lines))
    }

    with const f = io.open(name, io.ro) {
        const lines = f.read_lines(true)
        assert lines() == "abc\n"
        assert lines() == "\n"
        assert lines() == "def\n"
        assert lines() == "\r"
        assert lines() == "xyz"
        expect_fail(()=>lines())
        assert f.eof
        assert ! f.error
    }

    with const f = io.open(name, io.ro) {
        const lines = f.read_lines(true, 1)
        assert lines() == "abc\n"
        assert lines() == "\n"
        assert lines() == "def\n"
        assert lines() == "\r"
        assert lines() == "xyz"
        expect_fail(()=>lines())
        assert f.eof
        assert ! f.error
    }

    with const f = io.create(name) {
        const lines = "xy\r\nz\x{FF}\n"
        f.write(lang.buffer().pack("s", lines))
    }

    with const f = io.open(name, io.ro) {
        const a = [f.read_lines(true)...]
        assert a.size == 2
        assert a[0]   == "xy\r\n"
        assert a[1]   == "z\xFF\n"
        assert f.eof
        assert ! f.error
    }

    with const f = io.create(name) {
        const lines = "ab\rcd\r\nef\ng"
        f.write(lang.buffer(lines))
    }

    do {
        const lines = [ "ab\r", "cd\r\n", "ef\n", "g" ]
        for const gran in [1, 2, 3, 4, 5] {
            for const keep_ends in [false, true] {
                const a = [io.read_lines(name, keep_ends, gran)...]
                assert a.size == lines.size
                for const i in lang.range(a.size) {
                    const expected = keep_ends ? lines[i] : lines[i].strip()
                    if a[i] != expected {
                        lang.print("Failed keep_ends=\(keep_ends) gran=\(gran) line=\(i) expected='\(
                                    lang.stringify(expected))' actual='\(lang.stringify(a[i]))'")
                        assert a[i] == expected
                    }
                }
            }
        }
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.read_some size too large

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        var exception = false
        var buf       = lang.buffer(1024)
        var ret       = void
        assert buf.size == 1024
        try {
            ret = f.read_some(0xFFFFFF00, buf) # Exceeds buffer size limit (uint32_t)
        }
        catch const e {
            exception = true
        }
        assert exception
        assert typeof ret == "void"
        assert typeof buf == "buffer"
        assert buf.size   == 1024
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.print, file.print_

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        f.print_(false, void)
        f.print_()
        f.print_(":")
        f.print()
        f.print("Hello,", "World!")
        f.print_lines([1, 2, 3]);
        ["a", "b", "c"] -> lang.method(f, f.print_lines)
        f.print("END")
    }

    with const f = io.open(name, io.ro) {
        const expected = [ "false void:",
                           "Hello, World!",
                           "1", "2", "3", "a", "b", "c",
                           "END" ]
        var i = 0
        for var line in f.read_lines(true) {
            assert line.size > expected[i].size
            const delta = line.size - expected[i].size
            assert line[:-delta] == expected[i]
            assert line[-1] == "\n"
            assert delta <= 2
            if delta == 2 {
                assert line[-2] == "\r"
            }
            i += 1
        }
        assert i == expected.size
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}

##############################################################################
# file.seek, file.print return value

do {
    const name = "./__text_file"
    fs.remove(name)
    assert ! fs.is_file(name)

    with const f = io.create(name) {
        const data = lang.string(f.print_("abcdefghijklmnopqrstuvwxyz").seek(-8).read(4))
        assert data == "stuv"
    }

    assert fs.remove(name)
    assert ! fs.is_file(name)
}
