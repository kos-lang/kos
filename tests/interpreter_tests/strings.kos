#
# Copyright (c) 2014-2020 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

import base: print, stringify
import base
import test_tools.expect_fail

##############################################################################

do {
    const str = "\0a\x0a\x{0}\x{80}\x{ffFFff}"
}

do {
    const str = "" + ""
    assert str.size == 0
}

do {
    const str = r"" + R""
    assert str.size == 0
}

do {
    const str = (()=> r"test\r\n\"" )()
    assert str == "test\\r\\n\\\""

    assert "\\\"" == r"\""

    assert "\\r" + (()=>r"\n")() == R"\r" + (()=>"\\n")()
    assert "\\r" + r"\n" == R"\r" + "\\n"
}

do {
    const str = "\r" + "\n"
    assert str.size == 2
    assert str[0] == "\r"
    assert str[1] == "\n"
}

do {
    const str = R"\r" + r"\n"
    assert str.size == 4
    assert str[0] == "\\"
    assert str[1] == "r"
    assert str[2] == "\\"
    assert str[3] == "n"
}

do {
    const str = "\xff"
    assert (()=>"\x{0FF}")() == str
}

do {
    const str = "abc\(123)def"
    assert str == "abc123def"
}

do {
    const a = 10
    const b = 200
    const c = 3000
    const t = true
    const v = void
    const str = "e1:\(a*b+c) e2:\(a+b+c) t:\(t) v:\(v)"
    assert str == "e1:5000 e2:3210 t:true v:void"
}

do {
    const str = "'\(
        1 + 2
        )' '\(
        3 + 4
        )'"
    assert str == "'3' '7'"
}

do {
    const str = "\( "\( "\( "\( 123 )" )" )" )"
    assert str == "123"
}

do {
    const str = r"\"\("#")"
    assert str.size == 4
    assert str[0] == "\\"
    assert str[1] == "\""
    assert str[2] == "\\"
    assert str[3] == "("
}

do {
    const str = "\( r"" + R"" )"
    assert str.size == 0
}

do {
    const s = ""
    assert s.size == 0
}

do {
    const s = "abcdefgh"
    assert s[0]  == "a"
    assert s[1]  == "b"
    assert s[7]  == "h"
    assert s[-1] == "h"
    assert s[-2] == "g"
    assert s[-8] == "a"
    expect_fail(()=>s[8])
    expect_fail(()=>s[-9])

    assert s.size == 8

    const b = s.slice(1, 4)
    assert b == "bcd"
    assert b.size == 3

    const e = s.slice(-4, -2)
    assert e == "ef"
    assert e.size == 2

    const a = s.slice(void, 3)
    assert a == "abc"
    assert a.size == 3

    const f = s.slice(-3, void)
    assert f == "fgh"
    assert f.size == 3

    const all = s.slice(-20, 20)
    assert all == s
    assert all.size == 8

    const none = s.slice(20, -20)
    assert none == ""
    assert none.size == 0
}

do {
    const s  = "ABCDEF"
    const _0 = 0
    const _3 = 3

    const a = s[_0:_3]
    assert a  == "ABC"
    assert _0 == 0
    assert _3 == 3

    const b = s[-4:-1]
    assert b == "CDE"

    const c = s[:]
    assert c == "ABCDEF"

    const d = s[:-2.5]
    assert d == "ABC"

    const e = s[4.9:]
    assert e == "EF"

    fun value(idx)
    {
        const v = ["ijklmn", 2, -1]
        return v[idx]
    }

    const f = value(0)[value(1):value(2)]
    assert f == "klm"

    const g = s[-1000000.1:999999.8]
    assert g == "ABCDEF"

    const h = s[77777777.9:-9999999]
    assert h == ""

    assert s[10:20].size == 0
}

do {
    const a = ["m", "n", "o", "p", "q"]
    var   i = 0
    for var c in "mnopq" {
        assert i        <  a.size
        assert typeof c == "string"
        assert c.size   == 1
        assert c        == a[i]
        i += 1
    }
}

do {
    var a = 1
    a = "\(a)"
    assert a == "1"
}

do {
    const a = (()=>"ab")()
    const b = "abc\x{100}"
    assert a < b
}

# These look like escape sequences, but they are not.  Used e.g. in regexes.
do {
    const s = "\\(\w\)\'"
    assert s.size == 8
    assert s[0]   == "\\"
    assert s[1]   == "("
    assert s[2]   == "\\"
    assert s[3]   == "w"
    assert s[4]   == "\\"
    assert s[5]   == ")"
    assert s[6]   == "\\"
    assert s[7]   == "'"
}

do {
    const s = "a B"
    assert s.code(0)  == 0x61
    assert s.code(1)  == 0x20
    assert s.code(2)  == 0x42
    assert s.code(-1) == 0x42
    expect_fail(()=>s.code(3))
    expect_fail(()=>s.code(-4))
    expect_fail(()=>s.code(0x100000000))
}

do {
    assert "".starts_with("")
    assert "a".starts_with("")
    assert "ab".starts_with("ab")
    assert "ab".starts_with("a")
    assert ! "XAAAAAAAA".starts_with("A")
    assert "XYZ\x{100}".starts_with("XY")
    assert ! "XYZ\x{100}".starts_with("YZ")
    assert "X\x{100}YZ".starts_with("X\x{100}")
    assert ! "Y\x{100}XZ".starts_with("X\x{100}")
    assert "XYZ\x{10000}".starts_with("XY")
    assert ! "XYZ\x{10000}".starts_with("YZ")
    assert "X\x{200}Z\x{10000}".starts_with("X\x{200}")
    assert ! "X\x{200}Z\x{10000}".starts_with("\x{200}Z")
    assert "X\x{10000}YZ".starts_with("X\x{10000}")
    assert ! "Y\x{10000}XZ".starts_with("X\x{10000}")
    assert ! "a".starts_with("aa")

    expect_fail(()=>"".starts_with.apply(void, [""]))
    expect_fail(()=>"".starts_with(void))
    expect_fail(()=>"".starts_with())
}

do {
    assert "".ends_with("")
    assert "a".ends_with("")
    assert "ab".ends_with("ab")
    assert "ab".ends_with("b")
    assert ! "ab".ends_with("a")
    assert ! "ab".ends_with("ba")
    assert ! "a".ends_with("aa")

    expect_fail(()=>"".ends_with.apply(void, [""]))
    expect_fail(()=>"".ends_with(void))
    expect_fail(()=>"".ends_with())
}

do {
    assert "".find("")         == 0
    assert "ab".find("")       == 0
    assert "cd".find("", 1)    == 1
    assert "efg".find("e")     == 0
    assert "efg".find("f")     == 1
    assert "efg".find("h")     == -1
    assert "ABB".find("B", -2) == 1
    assert "ABB".find("B", -1) == 2
    assert "ABB".find("B", 2)  == 2
    assert "h".find("", 10)    == 1
    assert "h".find("", -10)   == 0
    assert "h".find("j", 10)   == -1
    assert "h".find("j", -10)  == -1

    assert "abXYcdXXYefXYYgh".find("XY")      == 2
    assert "abXYcdXXYefXYYgh".find("XY", -99) == 2
    assert "abXYcdXXYefXYYgh".find("XY", 2)   == 2
    assert "abXYcdXXYefXYYgh".find("XY", 3)   == 7
    assert "abXYcdXXYefXYYgh".find("XY", 7)   == 7
    assert "abXYcdXXYefXYYgh".find("XY", 8)   == 11
    assert "abXYcdXXYefXYYgh".find("XY", 11)  == 11
    assert "abXYcdXXYefXYYgh".find("XY", 12)  == -1

    assert "alamalamamalalamakotaipsa".find("alamakota") == 12
    assert "alamalamamalalamakota".find("alamakota")     == 12
    assert "alamalamamalalamakot".find("alamakota")      == -1

    expect_fail(()=>"".find.apply(void, [""]))
    expect_fail(()=>"".find())
    expect_fail(()=>"".find(void))
}

do {
    # LE: 01 02 03 00 00 00 00 00 02 03 00 00
    const haystack = "\x{30201}\0\x{302}"
    # LE: 02 03 00 00
    const needle   = "\x{302}\x{10000}"[0] # force 32-bit elem_size
    assert haystack.size            == 3
    assert haystack.code(0)         == 0x30201
    assert haystack.code(1)         == 0
    assert haystack.code(2)         == 0x302
    assert needle.size              == 1
    assert needle.code(0)           == 0x302
    assert haystack.find(needle)    == 2
    assert haystack.find(needle, 0) == 2
    assert haystack.find(needle, 1) == 2
}

do {
    assert "".rfind("")         == 0
    assert "ab".rfind("")       == 2
    assert "ab".rfind("", 1)    == 1
    assert "ab".rfind("", 10)   == 2
    assert "ab".rfind("", -10)  == -1
    assert "ab".rfind("x", 10)  == -1
    assert "ab".rfind("x", -10) == -1
    assert "ab".rfind("a", -10) == -1

    assert "abXYcdXXYefXYYgh".rfind("XY")      == 11
    assert "abXYcdXXYefXYYgh".rfind("XY", 99)  == 11
    assert "abXYcdXXYefXYYgh".rfind("XY", 11)  == 11
    assert "abXYcdXXYefXYYgh".rfind("XY", 10)  == 7
    assert "abXYcdXXYefXYYgh".rfind("XY", 7)   == 7
    assert "abXYcdXXYefXYYgh".rfind("XY", 6)   == 2
    assert "abXYcdXXYefXYYgh".rfind("XY", 2)   == 2
    assert "abXYcdXXYefXYYgh".rfind("XY", 1)   == -1
    assert "abXYcdXXYefXYYgh".rfind("XY", -1)  == 11
    assert "abXYcdXXYefXYYgh".rfind("XY", -10) == 2
    assert "abXYcdXXYefXYYgh".rfind("XY", -20) == -1

    expect_fail(()=>"".rfind.apply(void, [""]))
    expect_fail(()=>"".rfind())
    expect_fail(()=>"".rfind(void))
}

do {
    assert "alamakota".scan("a") == 0
    const scans = [ [-99,  0],
                    [-10,  0],
                    [-9,   0],
                    [-8,   2],
                    [-7,   2],
                    [-6,   4],
                    [-2,   8],
                    [-1,   8],
                    [0,    0],
                    [1,    2],
                    [2,    2],
                    [3,    4],
                    [7,    8],
                    [8,    8],
                    [9,   -1],
                    [100, -1] ]
    for var idx, result in scans {
        const actual = "alamakota".scan("a", idx)
        if actual != result {
            throw "scan failed at index \(idx), expected result \(result), actual \(actual)"
        }
    }

    expect_fail(()=>"".scan.apply(void, [""]))
    expect_fail(()=>"".scan(void))

    assert "abcDEF".scan("cba", 0, false) == 3
    assert "abcd".scan("", 2) == 2
    assert " \r \n \t a".scan(" \r\n\t", 0, false) == 7
}

do {
    assert "alamakota".rscan("a")  == 8
    assert "abc".rscan("efghijkb") == 1
    assert "\x00a\x00"[1].scan("a") == 0
    assert "\x00a\x00"[1].scan("\x00") == -1
    assert "\x00a\x00"[1].rscan("\x00") == -1
    const scans = [ [-99, -1],
                    [-10, -1],
                    [-9,   0],
                    [-8,   0],
                    [-7,   2],
                    [-6,   2],
                    [-2,   4],
                    [-1,   8],
                    [0,    0],
                    [1,    0],
                    [2,    2],
                    [3,    2],
                    [7,    4],
                    [8,    8],
                    [9,    8],
                    [100,  8] ]
    for var idx, result in scans {
        const actual = "alamakota".rscan("a", idx)
        if actual != result {
            throw "rscan failed at index \(idx), expected result \(result), actual \(actual)"
        }
    }

    expect_fail(()=>"".rscan.apply(void, [""]))
    expect_fail(()=>"".rscan(void))

    assert "abcDEF".rscan("FED", -1, false) == 2
}

do {
    const scans = [ [-7, 0],
                    [-6, 0],
                    [-4, 2],
                    [-1, 5],
                    [0,  0],
                    [1,  2],
                    [2,  2],
                    [3,  5],
                    [4,  5],
                    [5,  5],
                    [6, -1] ]
    for var idx, result in scans {
        const actual = "a#bXCc".scan("abcdefg", idx)
        if actual != result {
            throw "scan failed at index \(idx), expected result \(result), actual \(actual)"
        }
    }
}

do {
    const scans = [ [-7, -1],
                    [-6,  0],
                    [-5,  0],
                    [-4,  2],
                    [-1,  5],
                    [0,   0],
                    [1,   0],
                    [2,   2],
                    [3,   2],
                    [4,   2],
                    [5,   5],
                    [6,   5] ]
    for var idx, result in scans {
        const actual = "a#bXCc".rscan("abcdefg", idx)
        if actual != result {
            throw "rscan failed at index \(idx), expected result \(result), actual \(actual)"
        }
    }
}

do {
    assert "\x01\x01\x01\x01\x{100}\x01".scan("\x{100}\x{100}\x{100}") == 4
    assert "\x01\x01\x01\x01\x{100}\x01".rscan("\x{100}\x{100}\x{100}") == 4
    assert "\x{100}\x{100}\x{100}\x01\x{100}".scan("\x01\x01\x01") == 3
    assert "\x{100}\x{100}\x{100}\x01\x{100}".rscan("\x01\x01\x01") == 3
    assert "\x{101}\x{101}\x{101}\x01\x{101}".scan("\x01\x01\x01") == 3
    assert "\x{101}\x{101}\x{101}\x01\x{101}".rscan("\x01\x01\x01") == 3
}

do {
    assert "".reverse() == ""
    assert "1".reverse() == "1"
    assert "12".reverse() == "21"
    assert "ABC".reverse() == "CBA"
    assert "0123456789".reverse() == "9876543210"
    assert "\x{FFFF}\0".reverse() == "\0\x{FFFF}"
    assert "\x{10000}a\0".reverse() == "\0a\x{10000}"
    expect_fail(()=>"".reverse.apply(void, []))
}

do {
    assert "0".code()        == 0x30
    assert "\x{1002}".code() == 0x1002
    assert "ABCD".code()     == 0x41
    assert "ABCD".code(1)    == 0x42
    assert "ABCD".code(-2)   == 0x43
    assert "ABCD".code(-1)   == 0x44
}

do {
    assert "".lstrip() == ""
    assert "".rstrip() == ""
    assert "".strip()  == ""

    assert " \r \n \t ".lstrip() == ""
    assert " \r \n \t ".rstrip() == ""
    assert " \r \n \t ".strip()  == ""

    assert "abc".lstrip() == "abc"
    assert "abc".rstrip() == "abc"
    assert "abc".strip()  == "abc"

    assert "   abc   ".lstrip() == "abc   "
    assert "   abc   ".rstrip() == "   abc"
    assert "   abc   ".strip()  == "abc"

    assert "   abc   ".lstrip("abc") == "   abc   "
    assert "   abc   ".rstrip("abc") == "   abc   "
    assert "   abc   ".strip("abc")  == "   abc   "

    assert "bca   bca".lstrip("abc") == "   bca"
    assert "bca   bca".rstrip("abc") == "bca   "
    assert "cab   cab".strip("abc")  == "   "
}

fun expect_items(it, items)
{
    assert typeof it == "function"
    var i = 0
    for const item in it {
        if item != items[i] {
            print("invalid value, expected \"\(items[i])\", actual \"\(item)\"")
            assert item == items[i]
        }
        i += 1
    }
    assert i == items.size
}

do {
    expect_items("".split(),                      [])
    expect_items("a".split(),                     ["a"])
    expect_items("a".split(" ", 1),               ["a"])
    expect_items("a".split(" ", 0),               [])
    expect_items("   \r   \t     \n    ".split(), [])
    expect_items("a    \r  \n  \t     b".split(), ["a", "b"])
    expect_items("a\r\nb\nc".split("\r\n"),       ["a", "b\nc"])
    expect_items(",,a, ,b ,,".split(","),         ["", "", "a", " ", "b ", "", ""])

    expect_items("\t  \n  \r  a    \r  \n  \t     b\t  \r \n".split(), ["a", "b"])
    expect_items(" A-B--C----D---E--F--G".split("--", 5), [" A-B", "C", "", "D", "-E--F--G"])
}

do {
    expect_items("\r\n\r\n".split_lines(),      ["", ""])
    expect_items("\n\r".split_lines(true),      ["\n", "\r"])
    expect_items("a b c\n d".split_lines(true), ["a b c\n", " d"])
    expect_items("a b c\n d".split_lines(),     ["a b c", " d"])
    expect_items("xyz".split_lines(),           ["xyz"])
    expect_items("line\x1C".split_lines(),      ["line"])
    expect_items("line\x1C".split_lines(true),  ["line\x1C"])
    expect_items("".split_lines(),              [])
    expect_items("".split_lines(true),          [])
}

do {
    assert "".repeat(0)    == ""
    assert "a".repeat(0)   == ""
    assert "".repeat(1)    == ""
    assert "a".repeat(1)   == "a"
    assert "a".repeat(2)   == "aa"
    assert "x".repeat(10)  == "xxxxxxxxxx"
    assert "mno".repeat(2) == "mnomno"
    expect_fail(()=>"x".repeat(0x10000))
}

# test case from fuzzer
do {
    assert "\(2555555555555555555555551555555555555555555555555555555555555.57)"
        == stringify(2555555555555555555555551555555555555555555555555555555555555.57)
    assert "\(2555555555555555555555551555555555555555555555555555555555555.57)"
        == "\((x => x) (2555555555555555555555551555555555555555555555555555555555555.57) )"
}

# test case from fuzzer
do {
    assert "\(() => 0)".size != 0
}

# add two strings which are too long
do {
    expect_fail(fun {
        base.string(base.buffer(0xF000, 0x41)) + base.string(base.buffer(0x4000, 0x42))
    })
    assert "".size == 0

    expect_fail(fun {
        return "\([base.buffer(22000), base.buffer(22000)])"
    })
}

# string addition results in a string which is too long
do {
    var exception = false
    try {
        const init = "0123456789ABCDEF"
        const str = init.repeat(0x10000 / init.size - 1)
        # Trigger exception - string too long
        "\(init)\(str)\(init)"
    }
    catch const e {
        exception = e
    }
    assert exception
}

##############################################################################
# base.string

do {
    assert typeof base.string           == "class"
    assert typeof base.string.prototype == "object"
    assert base.string instanceof base.function
    assert base.string instanceof base.class
}

do {
    assert base.string()             == ""
    assert base.string(123)          == "123"
    assert base.string("x", 5, "z")  == "x5z"
    assert base.string()             == ""
    assert base.string(8)            == "8"
    assert base.string([], [])       == ""
    assert base.string([0x30, 0x41]) == "0A"
    assert base.string([0x100, 2])   == "\x{100}\x02"

    expect_fail(()=>base.string([void]))
    expect_fail(()=>base.string({}))
    expect_fail(()=>base.string(void))
    expect_fail(()=>base.string(false))
    expect_fail(()=>base.string(()=>void))
    expect_fail(()=>base.string([0x200000]))
    expect_fail(()=>base.string([-1]))
}

do {
    const elements = [0x1FFFFF, 1, 2, 3, 4, 5]
    const s        = base.string(elements)
    const size     = s.size
    assert typeof s == "string"
    assert size     == elements.size
    for var i = 0; i < size; i += 1 {
        assert s.code(i) == elements[i]
    }
}

do {
    const elements = [0x1FFFFF, 1, 2, 3, 4, 5, 6]
    const s        = base.string(elements)
    const size     = s.size
    assert typeof s == "string"
    assert size     == elements.size
    for var i = 0; i < size; i += 1 {
        assert s.code(i) == elements[i]
    }
}

do {
    expect_fail(()=>"x".add_2("y"))
    base.string.prototype.add_2 = x => this + x
    assert "x".add_2("y") == "xy"
}

do {
    const str = "123"
    assert str instanceof base.string
    assert str == "123"

    assert "x\(1)y" instanceof base.string
}

do {
    const value = (()=>"abc")()
    assert value instanceof base.string
    assert value instanceof base.object
    assert ! (value instanceof base.integer)
    assert ! (value instanceof base.float)
    assert ! (value instanceof base.number)
    assert ! (value instanceof base.boolean)
}

do {
    class ctor { }

    ctor.prototype = base.string.prototype

    const o = ctor()

    expect_fail(()=>o.size)
}

do {
    const s = base.string([0x30],                                     # "0"
                          fun { yield 0x31; yield 0x32 } (),          # "12"
                          fun { yield "a"; yield "b" } (),            # "ab"
                          fun { if false { yield 0 } } (),            # nothing
                          fun { yield base.buffer([0x33, 0x34]) } (), # "34"
                          "x")
    assert s == "012ab34x"
}

do {
    const s = base.string(fun { yield 0x41; yield 0x42; yield 0x43 } ())
    assert s == "ABC"
}

do {
    const s = base.string(fun { yield [0x41]; yield [0x42]; yield [0x43] } ())
    assert s == "ABC"
}

do {
    const s = base.string(fun { yield 0x41; yield 0x42; yield "c" } ())
    assert s == "ABc"
}

do {
    expect_fail(() => base.string(fun { }))
    expect_fail(() => base.string(fun { yield void }))
    expect_fail(() => base.string(class { }))
    expect_fail(() => base.string(fun { yield void } ()))
    expect_fail(() => base.string(fun { yield true } ()))
    expect_fail(() => base.string(fun { yield (fun { yield 0 } ()) } ()))
    expect_fail(() => base.string(fun { throw void ; yield 0 } ()))
}

##############################################################################
# base.string.prototype.indices

do {
    const it = "".indices()
    expect_fail(()=>it())
}
do {
    const it = "abcd".indices()
    assert it() == 0
    assert it() == 1
    assert it() == 2
    assert it() == 3
    expect_fail(()=>it())
}

##############################################################################
# base.string.prototype.ljust

do {
    assert "abcd".ljust(3)      == "abcd"
    assert "abcd".ljust(4)      == "abcd"
    assert "abcd".ljust(5)      == "abcd "
    assert "abcd".ljust(6, "x") == "abcdxx"

    expect_fail(()=>"abcd".ljust())
    expect_fail(()=>"abcd".ljust(1, ""))
    expect_fail(()=>"abcd".ljust(1, "oo"))
}

##############################################################################
# base.string.prototype.rjust

do {
    assert "abcd".rjust(3)      == "abcd"
    assert "abcd".rjust(4)      == "abcd"
    assert "abcd".rjust(5)      == " abcd"
    assert "abcd".rjust(6, "x") == "xxabcd"

    expect_fail(()=>"abcd".rjust())
    expect_fail(()=>"abcd".rjust(1, ""))
    expect_fail(()=>"abcd".rjust(1, "oo"))
}

##############################################################################
# base.string.prototype.zfill

do {
    assert "abcd".zfill(3)      == "abcd"
    assert "abcd".zfill(4)      == "abcd"
    assert "abcd".zfill(5)      == "0abcd"
    assert "abcd".zfill(6, "x") == "xxabcd"
    assert "--a".zfill(4, "*")  == "-*-a"
    assert "++b".zfill(5, "#")  == "+##+b"

    expect_fail(()=>"abcd".zfill())
    expect_fail(()=>"abcd".zfill(1, ""))
    expect_fail(()=>"abcd".zfill(1, "oo"))
}

##############################################################################
# base.string.prototype.join

do {
    assert "".join([])      == ""
    assert ":".join([])     == ""
    assert ":".join([""])   == ""
    assert ":".join("join") == "j:o:i:n"
    assert ":".join(["this", 42]) == "this:42"

    expect_fail(() => "".join())
}

##############################################################################
# base.string.prototype.lowercase

do {
    assert "".lowercase()             == ""
    assert "1".lowercase()            == "1"
    assert "a".lowercase()            == "a"
    assert "A".lowercase()            == "a"
    assert "TeSt 123 StR".lowercase() == "test 123 str"
    assert "\x{37E}aBc1".lowercase()  == "\x{37e}abc1"
    assert "\x{10180}aBc1".lowercase()== "\x{10180}abc1"

    expect_fail(() => "".lowercase.apply(void, []))
    expect_fail(() => "".lowercase.apply(1, []))
}

##############################################################################
# base.string.prototype.uppercase

do {
    assert "".uppercase()             == ""
    assert "1".uppercase()            == "1"
    assert "a".uppercase()            == "A"
    assert "A".uppercase()            == "A"
    assert "TeSt 123 StR".uppercase() == "TEST 123 STR"
    assert "\x{37E}aBc1".uppercase()  == "\x{37e}ABC1"
    assert "\x{10180}aBc1".uppercase()== "\x{10180}ABC1"

    expect_fail(() => "".uppercase.apply(void, []))
    expect_fail(() => "".uppercase.apply(1, []))
}
