# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import base
import test_tools.expect_fail
import kos
import io
import fs
import os

##############################################################################
# os.spawn

fun find_program(name)
{
    for const prefix in ["/bin", "/usr/bin"] {
        const path = prefix ++ "/" ++ name
        if fs.file_exists(path) {
            return path
        }
    }

    return void
}

const bin_sleep = find_program("sleep")

fun sleep(time_s)
{
    var pid = -1

    if bin_sleep {
        var process = os.spawn(bin_sleep, ["\(time_s)"])
        pid = process.pid
        process = void
    }

    return pid
}

for const i in base.range(20) {
    sleep(0.1 + i * 0.1)
}

kos.collect_garbage()

##############################################################################
# async

do {
    var thread = async sleep(1)
    thread = void

    kos.collect_garbage()
}

##############################################################################
# io.open

do {
    const name = "__gc_test_file"

    fs.remove(name)
    assert ! fs.file_exists(name)

    fun {
        io.create(name).write("x")
    }()

    kos.collect_garbage()

    assert fs.file_exists(name)
    fs.remove(name)
    assert ! fs.file_exists(name)
}
