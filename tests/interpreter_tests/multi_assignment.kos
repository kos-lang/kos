# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2023 Chris Dragan

import base.range

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

do {
    var a, b, c = "xyz1234"
    assert a == "x"
    assert b == "y"
    assert c == "z"
}

do {
    var a, b, c = [ 1, 5, 7, 10, 9 ]
    assert a == 1
    assert b == 5
    assert c == 7
}

do {
    var a, b, c = range(100)
    assert a == 0
    assert b == 1
    assert c == 2
}

# Extraction of last element fails
expect_fail(fun {
    var a, b, c = "xy"
    return a
})

# No failure, last element not extracted, because results are unused and therefore
# the assignment is optimized-out
do {
    fun {
        var a, b, c = "xy"
    } ()
}

public var global = void
do {
    const obj   = {}
    const array = [void, void]
    var   val   = void

    obj.x, array[0], val, global, array[1] = range(5)

    assert obj.x    == 0
    assert array[0] == 1
    assert val      == 2
    assert global   == 3
    assert array[1] == 4

    global, val, obj.x = "MNO"

    assert obj.x    == "O"
    assert array[0] == 1
    assert val      == "N"
    assert global   == "M"
    assert array[1] == 4

    array[:], val = [ "abcd", "e" ]

    assert array.size == 4
    assert array[0]   == "a"
    assert array[-1]  == "d"
    assert val        == "e"

    global, array[1:3] = "XY"

    assert global     == "X"
    assert array.size == 3
    assert array[0]   == "a"
    assert array[1]   == "Y"
    assert array[2]   == "d"

    expect_fail(fun {
        val, global, obj["y"], array[0] = range(3)
    })

    assert val      == 0
    assert global   == 1
    assert obj.y    == 2
    assert array[0] == "a"
}

do {
    var count = 0
    var x, y, z = range(3)
    while x < y {
        assert x == 0
        assert y == 1
        assert z == 2
        count += 1
        x += 1
    }
    assert count == 1
}

do {
    var a = [void, void, void]
    var i = 10

    i, a[i], a[i+1] = [1, 8, i]

    assert i    == 1
    assert a[0] == void
    assert a[1] == 8
    assert a[2] == 10
}

do {
    var count = 0
    for var x, y, z in [ [1, 2, 3, 10], [4, 5, 6] ] {
        if count == 0 {
            assert x == 1
            assert y == 2
            assert z == 3
        }
        else {
            assert x == 4
            assert y == 5
            assert z == 6
        }
        count += 1
    }
    assert count == 2
}

do {
    var failed = true
    try {
        for var x, y, z in [ [1, 2, 3], [3, 4] ] {
            if x != 1 {
                throw x
            }
        }
    }
    catch const e {
        assert typeof e.value != "integer"
        failed = false
    }
    assert ! failed
}

do {
    fun expr_chain(a, b)
    {
        var x, y = [a, b]
        x, y = [y, x + 3]
        x, y = [y * 2, x + y]
        return [x, y]
    }

    const c, d = expr_chain(1, 5)
    assert c == 8
    assert d == 9
}

do {
    fun expr_chain(a...)
    {
        var a0, a1, a2, a3 = a
        a3, a1, a0, a2 = [a0 + a1, a2 - a0, a2 + a3, a1 + a3]
        return [a0, a1, a2, a3]
    }

    const a, b, c, d = expr_chain(2, 3, 5, 7)
    assert a == 12
    assert b == 3
    assert c == 10
    assert d == 5
}

do {
    fun assign_args(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
    {
        const b = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]
        assert b.size == 10
        const i, j = [a1, a2]
        a1, a2, a3, b[i:j], a4, a5, a6, a7, a8, a9, a10, a11, a12 = [a3...]
        return [a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12, b]
    }
    const x, y = assign_args(1, -1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 0, 0, 0, 0, 0, 0, 0, 0, 0)
    assert x == (12 * (12 + 1) / 2) - 3
    assert y.size == 3
    assert y[0] == 8
    assert y[1] == 3
    assert y[2] == 8
}

do {
    fun get_second(x)
    {
        const a, b = x
        return b
    }

    assert get_second([10, 20]) == 20
    assert get_second(range(1000, 2000)) == 1001
}

do {
    fun get_first(x)
    {
        const a, b = x
        return a
    }

    fun get_second(x)
    {
        const a, b = x
        return b
    }

    const zero = () => 0

    expect_fail(() => get_first(zero))
    expect_fail(() => get_second(zero))
}
