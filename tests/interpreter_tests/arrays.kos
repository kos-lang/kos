# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2023 Chris Dragan

import base
import base.range
import test_tools.expect_fail

##############################################################################

do {
    assert ["a", "b", "c"][0]  == "a"
    assert ["a", "b", "c"][1]  == "b"
    assert ["a", "b", "c"][-1] == "c"
}

expect_fail(()=>[][0])

do {
    const a = []
    assert a.size == 0
}

do {
    const a = [[], [], []]
    assert a.size == 3
}

do {
    const a = [1, 2]
    assert a.size == 2
    assert a[0]   == 1
    assert a[1]   == 2
    assert a[-1]  == 2
    assert a[-2]  == 1

    a.resize(1)
    assert a.size == 1
    assert a[0]   == 1
    assert a[-1]  == 1
    expect_fail(()=>a[1])
    expect_fail(()=>a[-2])

    a.resize(3)
    assert a.size == 3
    assert a[0]   == 1
    assert a[1]   == void
    assert a[2]   == void
    assert a[-1]  == void
    assert a[-2]  == void
    assert a[-3]  == 1
    expect_fail(()=>a[3])
    expect_fail(()=>a[-4])
}

do {
    const a = [1, 2, 3, 4]
    assert a.size    == 4
    assert a["size"] == 4
    assert a[0]      == 1
    assert a[-1]     == 4
    for const i in range(a.size) {
        assert a[i] == i + 1
    }
}

do {
    const a = [1, 2, 3, 4, 5]
    assert a.size == 5

    delete a.size
    assert a.size == 5

    a.resize(100)
    assert a.size == 100
    assert a[-1]  == void
    assert a[4]   == 5
    assert a[5]   == void
}

do {
    const a = [1, 2, 3]
    expect_fail(fun { a.size = 4 })
    assert a.size == 3
}

do {
    const a = [  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
                10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
                20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
                30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
                40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
                50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
                60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
                70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
                80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
                90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
               100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
               110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
               120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
               130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
               140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
               150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
               160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
               170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
               180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
               190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
               200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
               210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
               220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
               230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
               240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
               250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
               260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
               270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
               280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
               290, 291, 292, 293, 294, 295, 296, 297, 298, 299 ]
    assert typeof a == "array"
    assert a.size   == 300
    for const i in range(a.size) {
        assert a[i] == i
    }
}

do {
    const a = ["a", "b", void, "d", true, "f"]

    const b = a[:]
    assert b      == a
    assert b.size == 6
    assert b[0]   == "a"
    assert b[2]   == void
    assert b[-1]  == "f"
    b.push(void)
    assert b.size == a.size + 1

    const c = a[-4:-2]
    assert c      != a
    assert c.size == 2
    assert c[0]   == void
    assert c[1]   == "d"

    const d = a[:2.5]
    assert d      != a
    assert d.size == 2
    assert d[0]   == "a"
    assert d[1]   == "b"

    const e = a[-2.9:]
    assert e      != a
    assert e.size == 3
    assert e[0]   == "d"
    assert e[1]   == true
    assert e[2]   == "f"

    const f = a[-10:10]
    assert a.size == f.size
    for const i in range(a.size) {
        assert a[i] == f[i]
    }

    assert a[10:0].size == 0

    assert a[10:20].size == 0
}

do {
    var a = 123
    a = [a]
    assert typeof a    == "array"
    assert a.size      == 1
    assert typeof a[0] == "integer"
    assert a[0]        == 123
}

do {
    var a = [1, 2, 3, 4]
    a[1:3] = [5]
    assert a.size == 3
    assert a[0]   == 1
    assert a[1]   == 5
    assert a[2]   == 4
}

do {
    var a = [5]
    a.resize(100)
    assert a.size == 100
    assert a[0]   == 5

    a[:] = ["x", "y", "z"]

    assert typeof a == "array"
    assert a.size   == 3
    assert a[0]     == "x"
    assert a[1]     == "y"
    assert a[2]     == "z"
}

do {
    var a = [5]
    a.resize(100)
    assert a.size == 100
    assert a[0]   == 5

    a[:] = ["xyz"...]

    assert typeof a == "array"
    assert a.size   == 3
    assert a[0]     == "x"
    assert a[1]     == "y"
    assert a[2]     == "z"
}

do {
    var a = [3, 4, 5, 6]
    a[1:3] = [range(10, 15)...]
    const expected = [3, 10, 11, 12, 13, 14, 6]
    assert a.size == expected.size
    for const i in range(a.size) {
        assert a[i] == expected[i]
    }
}

do {
    const a = [1, 2, 3, 4]
    a[:] = []
    assert typeof a == "array"
    assert a.size   == 0
}

do {
    const a = [10, 11, 12]
    a[1:1] = -2
    assert a.size == 4
    assert a[0]   == 10
    assert a[1]   == -2
    assert a[2]   == 11
    assert a[3]   == 12

    a[a.size:] = [20, 21]
    assert a.size == 6
    assert a[-2]  == 20
    assert a[-1]  == 21

    a[a.size:] = 22
    assert a.size == 7
    assert a[-1]  == 22
}

do {
    var a = ""
    expect_fail(fun { a[:] = [] })
}

do {
    var a = {}
    expect_fail(fun { a[:] = [] })
}

do {
    var a = 2
    expect_fail(fun { a[:] = [] })
}

do {
    # These don't make sense, but are correct
    [1, 2, 3][0] = void;
    [1, 2, 3][:] = []
}

do {
    var a = []
    a[:] = { abc: void }
    assert a.size >= 1

    var found = false
    for const i in range(a.size) {
        const k, v = a[i]
        if k == "abc" {
            found = true
            break
        }
    }
    assert found
}

# Invalid index
do {
    const a = []

    fun elem(e)
    {
        return a[e]
    }

    fun set_elem(e)
    {
        a[e] = 0
    }

    expect_fail(()=>elem(0x8000000000000000))
    expect_fail(()=>set_elem(0x8000000000000000))
}

# Large array
do {
    const a = [   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
                 10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
                 20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
                 30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
                 40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
                 50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
                 60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
                 70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
                 80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
                 90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
                100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
                110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
                120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
                130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
                140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
                150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
                160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
                170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
                180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
                190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
                200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
                210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
                220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
                230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
                240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
                250, 251, 252, 253, 254, 255, 256, 257, 258, 259 ]
    assert a.size == 260
    for const i in range(260) {
        assert a[i] == i
    }
}

# Expanded elements
do {
    const a = [ []... ]
    assert typeof a == "array"
    assert a.size == 0
}
do {
    const a = [ [10, 20]..., 30 ]
    assert typeof a == "array"
    assert a.size == 3
    assert a[0] == 10
    assert a[1] == 20
    assert a[2] == 30
}
do {
    const a = [ 10, [20]..., "30", "40"..., 50 ]
    assert typeof a == "array"
    assert a.size == 6
    assert a[0] == 10
    assert a[1] == 20
    assert a[2] == "30"
    assert a[3] == "4"
    assert a[4] == "0"
    assert a[5] == 50
}

# Cannot expand these
do {
    expect_fail(() => [1 ...])
    expect_fail(() => [1.5...])
    expect_fail(() => [true...])
    expect_fail(() => [void...])
    expect_fail(() => [{}...])
    expect_fail(() => [fun{}...])
}

# Throw exception during array element expansion
do {
    fun will_throw
    {
        yield 11
        throw 13
        yield 17
    }

    var a         = void
    var exception = void

    try {
        a = [ will_throw()... ]
    }
    catch const e {
        exception = e.value
    }

    assert exception == 13
    assert typeof a  == "void"
}

# Slice test case from fuzzer
# Invalid operand for slice operator must not crash the compiler.
do {
    expect_fail(fun {
        0[0[:]:0[:]] = 0
    })
}

# Array comparisons
do {
    const cmp_eq = (x, y) => x == y
    const cmp_ne = (x, y) => x != y
    const cmp_lt = (x, y) => x <  y
    const cmp_le = (x, y) => x <= y
    const cmp_gt = (x, y) => x >  y
    const cmp_ge = (x, y) => x >= y

    const a0 = []
    const a1 = [ void, "test", true ]
    const a2 = [ void, "tett", true ]
    const a3 = [ void, "test", true, 0.0 ]

    assert cmp_eq(a0, a0[:])
    assert cmp_eq(a1, a1[:])
    assert cmp_eq(a2, a2[:])
    assert cmp_eq(a3, a3[:])

    assert cmp_ne(a0, a1)
    assert cmp_ne(a0, a2)
    assert cmp_ne(a0, a3)
    assert cmp_ne(a1, a2)
    assert cmp_ne(a1, a3)

    assert cmp_lt(a0, a1)
    assert cmp_lt(a1, a2)
    assert cmp_lt(a1, a3)
    assert cmp_lt(a3, a2)
    assert ! cmp_lt(a1, a0)
    assert ! cmp_lt(a2, a1)
    assert ! cmp_lt(a3, a1)
    assert ! cmp_lt(a2, a3)

    assert cmp_le(a0, a1)
    assert cmp_le(a1, a2)
    assert cmp_le(a1, a3)
    assert cmp_le(a3, a2)
    assert cmp_le(a1, a1[:])
    assert ! cmp_le(a1, a0)
    assert ! cmp_le(a2, a1)
    assert ! cmp_le(a3, a1)
    assert ! cmp_le(a2, a3)

    assert ! cmp_gt(a0, a1)
    assert ! cmp_gt(a1, a2)
    assert ! cmp_gt(a1, a3)
    assert ! cmp_gt(a3, a2)
    assert ! cmp_gt(a1, a1[:])
    assert cmp_gt(a1, a0)
    assert cmp_gt(a2, a1)
    assert cmp_gt(a3, a1)
    assert cmp_gt(a2, a3)

    assert ! cmp_ge(a0, a1)
    assert ! cmp_ge(a1, a2)
    assert ! cmp_ge(a1, a3)
    assert ! cmp_ge(a3, a2)
    assert cmp_ge(a1, a0)
    assert cmp_ge(a2, a1)
    assert cmp_ge(a3, a1)
    assert cmp_ge(a2, a3)
}

# Comparing arrays containing themselves or each other
do {
    const a = [ 1, void ]
    const b = [ 0, void ]
    a[1] = a
    b[1] = b

    assert a >  b
    assert a >= b
    assert b <  a
    assert b <= a

    b[0] = 1

    assert a == b

    a[1] = ["x", a]
    b[1] = ["x", b]

    assert a == b

    a[1] = b
    b[1] = a

    assert a != b
}

# Resize array
do {
    const a = [ 1, 2, 3 ]
    a.resize(4)
    assert a.size == 4
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == 3
    assert a[3] == void
}

# Resize array, with value
do {
    const a = [ -1, -2 ]
    a.resize(5, 42)
    assert a.size == 5
    assert a[0] == -1
    assert a[1] == -2
    assert a[2] == 42
    assert a[3] == 42
    assert a[4] == 42
}

# Resize array, with value being another array
do {
    const a = [ 8 ]
    a.resize(3, [])
    assert a.size == 3
    assert a[0] == 8
    assert typeof a[1] == "array"
    assert a[1].size == 0
    assert a[1] == a[2]
    a[1].push(77)
    assert a[1][0] == 77
    assert a[2][0] == 77
}

##############################################################################
# base.array

do {
    assert typeof base.array           == "class"
    assert typeof base.array.prototype == "object"
    assert base.array instanceof base.function
    assert base.array instanceof base.class
}

do {
    const a = base.array()
    assert typeof a == "array"
    assert a.size   == 0
}

do {
    const a = base.array(1)
    assert a.size == 1
    assert a[0]   == void
}

do {
    const a = base.array(5)
    assert a.size == 5
    assert a[0]   == void
    assert a[1]   == void
    assert a[2]   == void
    assert a[3]   == void
    assert a[4]   == void
}

do {
    const a = base.array(4, 72.5)
    assert a.size == 4
    assert a[0]   == 72.5
    assert a[1]   == 72.5
    assert a[2]   == 72.5
    assert a[3]   == 72.5
}

do {
    expect_fail(()=>base.array(-1))
    expect_fail(()=>base.array(1, 1, 0))
    expect_fail(()=>base.array(0x1FFFFFFE))
    expect_fail(()=>base.array(0x7FFFFFFF))
    expect_fail(()=>base.array(0x80000000))
    expect_fail(()=>base.array(0xFFFFFFFF))
    expect_fail(()=>base.array(0x100000000))
}

do {
    const a = base.array([8])
    assert typeof a    == "array"
    assert a.size      == 1
    assert typeof a[0] == "integer"
    assert a[0]        == 8
    expect_fail(()=>a[1])
}

do {
    const a = base.array("ab", base.buffer([100, 101]))
    assert typeof a == "array"
    assert a.size   == 4
    assert a[0]     == 0x61
    assert a[1]     == 0x62
    assert a[2]     == 100
    assert a[3]     == 101
    expect_fail(()=>a[4])
}

do {
    const a = base.array("", base.buffer(0), "", [])
    assert typeof a == "array"
    assert a.size   == 0
}

do {
    const a = base.array(2.1)
    assert a.size == 2
    assert a[0]   == void
    assert a[1]   == void
}

do {
    const a = base.array(base.range(4))
    assert typeof a == "array"
    assert a.size   == 4
    for const i in range(4) {
        assert a[i] == i
    }
}

do {
    const a = base.array(base.shallow({a: void, b: void, c: void}))
    assert typeof a == "array"
    assert a.size   == 3
    const had = { "a": false, "b": false, "c": false }
    for const i in range(a.size) {
        const key, value = a[i]
        assert key == "a" || key == "b" || key == "c"
        assert ! had[key]
        had[key] = true
    }
}

do {
    fun gen
    {
        yield "abc"
        yield 10.25
        yield -8
        yield true
        yield ["x", 2]
    }

    const a = base.array(gen())
    assert a.size == 5
    assert a[0]   == "abc"
    assert a[1]   == 10.25
    assert a[2]   == -8
    assert a[3]   == true
    assert a[4]   == ["x", 2]
}

do {
    expect_fail(fun {
        base.array.prototype = {}
    })
}

do {
    const a = [ "a", "b", "c", "d", "e" ]

    expect_fail(()=>a.ret_elem_3())

    base.array.prototype.ret_elem_3 = fun {
        return this[3]
    }

    assert a.ret_elem_3() == "d"
}

do {
    const a = base.array([10, 20], [30])
    assert a.size == 3
    assert a[0]     == 10
    assert a[1]     == 20
    assert a[2]     == 30
    expect_fail(()=>a[3])
}

do {
    assert [] instanceof base.array
    assert [] instanceof base.object
}

do {
    const value = (()=>[])()
    assert value instanceof base.array
    assert value instanceof base.object
    assert ! (value instanceof base.integer)
    assert ! (value instanceof base.float)
    assert ! (value instanceof base.number)
    assert ! (value instanceof base.boolean)
    assert ! (value instanceof base.string)
}

do {
    const a = [1, 2, 100]
    const b = base.array.apply(void, [a])
    assert typeof b == "array"
    assert b        == a
    assert b.size   == a.size
    for const i in range(b.size) {
        assert b[i] == a[i]
    }
    b.push(0)
    assert b.size == a.size + 1
    assert b      != a
}

do {
    class fake_array { }

    fake_array.prototype = base.array.prototype

    const o = fake_array()

    assert typeof o == "object"
    assert o instanceof base.array
    expect_fail(()=>o.size)
    assert typeof o.resize == "function"
    expect_fail(()=>o.resize(10))
    expect_fail(()=>o[0])
}

do {
    const buf = base.buffer(10)
    const size = buf.size
    for const i in range(size) {
        buf[i] = i + 20
    }

    const a = base.array(buf)

    assert a.size == 10

    var count = 0
    for var elem in a {
        assert elem == count + 20
        count += 1
    }
    assert count == 10
}

do {
    const a = base.array(base.buffer())

    assert typeof a    == "array"
    assert a.size      == 0
}

do {
    expect_fail(fun { [].reserve(-1) })
    expect_fail(fun { base.array.prototype.reserve(void, [0]) })

    const a = []
    a.reserve(100)
    assert a.size == 0
}

do {
    expect_fail(fun { base.array.prototype.push(0) })
    expect_fail(fun { base.array.prototype.pop() })
    expect_fail(fun { [].push.apply("", ["a"]) })
    expect_fail(fun { [].pop.apply("a", []) })

    const a = []
    assert a.push(1)       == 0
    assert a.push(2, 3, 4) == 1
    assert a.push(5)       == 4
    assert a.push(6)       == 5
    assert a.push()        == 6
    assert a.size          == 6

    assert a.size == 6
    assert a[0]   == 1
    assert a[1]   == 2
    assert a[2]   == 3
    assert a[3]   == 4
    assert a[4]   == 5
    assert a[5]   == 6

    assert a.pop() == 6
    assert a.size  == 5
    assert a[0]    == 1
    assert a[4]    == 5

    const b = a.pop(3)
    assert typeof b == "array"
    assert b.size   == 3
    assert b[0]     == 3
    assert b[1]     == 4
    assert b[2]     == 5
    assert a.size   == 2
    assert a[0]     == 1
    assert a[1]     == 2

    const c = a.pop(0)
    assert typeof c == "void"
    assert a.size   == 2

    expect_fail(()=>a.pop(3))
    assert a.size == 0

    assert [1, 2].pop() == 2

    expect_fail(()=>[].pop())
    expect_fail(()=>[1].pop(2))
    expect_fail(()=>[1].pop(-1))
}

# dynamic property in an object passed to array constructor
do {
    const a = base.array(base.array.prototype)
    var has_size = false
    for (const i in range(a.size)) {
        if a[i][0] == "size" {
            assert ! has_size
            has_size = true
        }
    }
    assert has_size
}

# exception from within a generator passed to array constructor
do {
    var exc = void
    try {
        base.array(fun { yield 1; throw "xyz" } ())
    }
    catch const e {
        exc = e.value
    }
    assert typeof exc == "string"
    assert exc == "xyz"
}

##############################################################################
# base.array.prototype.slice

do {
    const a = []
    const b = a.slice(10, -20)

    assert typeof b == "array"
    assert b.size == 0
}

do {
    const a = [1, 2, 3, 4]
    const b = a.slice(1, -1)

    assert typeof b == "array"
    assert b.size == 2
    assert b[0] == 2
    assert b[1] == 3
}

do {
    const a = ["a", "b", "c", "d", "e"]

    do {
        const b = a.slice(void, void)
        assert b.size == 5
        assert b[0] == "a"
        assert b[-1] == "e"
    }

    do {
        const b = a.slice(2, void)
        assert b.size == 3
        assert b[0] == "c"
        assert b[-1] == "e"
    }

    do {
        const b = a.slice(void, -3)
        assert b.size == 2
        assert b[0] == "a"
        assert b[1] == "b"
    }

    do {
        expect_fail(()=>[].slice(0, false))
        expect_fail(()=>[].slice(false, 0))
    }
}

##############################################################################
# generic slice function

do {
    const obj = {
        slice: fun {
            return 42
        }
    }

    const x = obj[10:100]

    assert typeof x == "integer"
    assert x == 42
}
do {
    const obj = {
        slice: 10
    }

    # slice is not a function
    expect_fail(()=>obj[10:100])
}

##############################################################################
# base.array.prototype.insert (with array)

do {
    const a = [1, 2, 3, 4]
    const b = ["x", "y"]
    const c = a.insert(2, b)

    assert a == c
    assert a.size == 6
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == "x"
    assert a[3] == "y"
    assert a[4] == 3
    assert a[5] == 4
}

do {
    const a = [1, 2]
    const c = a.insert(0, a)

    assert a == c
    assert a.size == 4
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == 1
    assert a[3] == 2
}

do {
    const a = [1, 2]
    const c = a.insert(void, a)

    assert a == c
    assert a.size == 4
    assert a[0] == 1
    assert a[1] == 2
    assert a[2] == 1
    assert a[3] == 2
}

do {
    fun test_case(test)
    {
        test.args[-1] = test.args[-1] || test.array
        const out = [].insert.apply(test.array, test.args)
        const size = out.size
        assert out  == test.array
        assert size == test.result.size
        for const i in range(size) {
            assert out[i] == test.result[i]
        }
    }

    test_case({ array: [ 1, 2, 3 ], args: [   -4,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [   -3,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [    0,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [    1,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [   -2,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [ void,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [    4,       []           ], result: [ 1, 2, 3 ]           })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    1, []           ], result: [ 2, 3 ]              })
    test_case({ array: [ 1, 2, 3 ], args: [    1,    2, []           ], result: [ 1, 3 ]              })
    test_case({ array: [ 1, 2, 3 ], args: [   -1, void, []           ], result: [ 1, 2 ]              })
    test_case({ array: [ 1, 2, 3 ], args: [ void, void, []           ], result: [ ]                   })
    test_case({ array: [ 1, 2, 3 ], args: [   -4,       [ "x" ]      ], result: [ "x", 1, 2, 3 ]      })
    test_case({ array: [ 1, 2, 3 ], args: [   -3,       [ "x" ]      ], result: [ "x", 1, 2, 3 ]      })
    test_case({ array: [ 1, 2, 3 ], args: [    0,       [ "x" ]      ], result: [ "x", 1, 2, 3 ]      })
    test_case({ array: [ 1, 2, 3 ], args: [    1,       [ "x" ]      ], result: [ 1, "x", 2, 3 ]      })
    test_case({ array: [ 1, 2, 3 ], args: [   -1,       [ "x" ]      ], result: [ 1, 2, "x", 3 ]      })
    test_case({ array: [ 1, 2, 3 ], args: [ void,       [ "x" ]      ], result: [ 1, 2, 3, "x" ]      })
    test_case({ array: [ 1, 2, 3 ], args: [    4,       [ "x" ]      ], result: [ 1, 2, 3, "x" ]      })
    test_case({ array: [ 1, 2, 3 ], args: [   -4,    1, [ "x" ]      ], result: [ "x", 2, 3 ]         })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    1, [ "x" ]      ], result: [ "x", 2, 3 ]         })
    test_case({ array: [ 1, 2, 3 ], args: [   -2,    2, [ "x" ]      ], result: [ 1, "x", 3 ]         })
    test_case({ array: [ 1, 2, 3 ], args: [   -1, void, [ "x" ]      ], result: [ 1, 2, "x" ]         })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    2, [ "x" ]      ], result: [ "x", 3 ]            })
    test_case({ array: [ 1, 2, 3 ], args: [    1, void, [ "x" ]      ], result: [ 1, "x" ]            })
    test_case({ array: [ 1, 2, 3 ], args: [ void, void, [ "x" ]      ], result: [ "x" ]               })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    0, [ "x", "y" ] ], result: [ "x", "y", 1, 2, 3 ] })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    1, [ "x", "y" ] ], result: [ "x", "y", 2, 3 ]    })
    test_case({ array: [ 1, 2, 3 ], args: [   -2,    2, [ "x", "y" ] ], result: [ 1, "x", "y", 3 ]    })
    test_case({ array: [ 1, 2, 3 ], args: [   -1, void, [ "x", "y" ] ], result: [ 1, 2, "x", "y" ]    })
    test_case({ array: [ 1, 2, 3 ], args: [   -1, void, [ "x", "y" ] ], result: [ 1, 2, "x", "y" ]    })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    2, [ "x", "y" ] ], result: [ "x", "y", 3 ]       })
    test_case({ array: [ 1, 2, 3 ], args: [   -2, void, [ "x", "y" ] ], result: [ 1, "x", "y" ]       })
    test_case({ array: [ 1, 2, 3 ], args: [ void, void, [ "x", "y" ] ], result: [ "x", "y" ]          })
    test_case({ array: [ 1, 2, 3 ], args: [    0,       void         ], result: [ 1, 2, 3, 1, 2, 3 ]  })
    test_case({ array: [ 1, 2, 3 ], args: [    1,       void         ], result: [ 1, 1, 2, 3, 2, 3 ]  })
    test_case({ array: [ 1, 2, 3 ], args: [    2,       void         ], result: [ 1, 2, 1, 2, 3, 3 ]  })
    test_case({ array: [ 1, 2, 3 ], args: [ void,       void         ], result: [ 1, 2, 3, 1, 2, 3 ]  })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    1, void         ], result: [ 1, 2, 3, 2, 3 ]     })
    test_case({ array: [ 1, 2, 3 ], args: [    1,    2, void         ], result: [ 1, 1, 2, 3, 3 ]     })
    test_case({ array: [ 1, 2, 3 ], args: [    2, void, void         ], result: [ 1, 2, 1, 2, 3 ]     })
    test_case({ array: [ 1, 2, 3 ], args: [ void,    2, void         ], result: [ 1, 2, 3, 3 ]        })
    test_case({ array: [ 1, 2, 3 ], args: [    1, void, void         ], result: [ 1, 1, 2, 3 ]        })
    test_case({ array: [ 1, 2, 3 ], args: [ void, void, void         ], result: [ 1, 2, 3 ]           })
}

do {
    expect_fail(()=>[].insert("", 0, []))
    expect_fail(()=>[].insert(0, "", []))
}

##############################################################################
# base.array.prototype.insert

do {
    const a = []

    a.insert(0, "abc")
    assert a.size == 3
    assert a[0]   == "a"
    assert a[2]   == "c"

    a.insert(void, base.buffer())
    assert a.size == 3
    assert a[0]   == "a"
    assert a[2]   == "c"

    const buf   = base.buffer(4)
    const size1 = buf.size
    for const i in range(size1) {
        buf[i] = buf.size - i
    }

    a.insert(void, buf)
    assert a.size == 7
    assert a[2]   == "c"
    assert a[3]   == 4
    assert a[6]   == 1

    const size2 = buf.size
    for const i in range(size2) {
        buf[i] = 10 + i
    }

    a[1:-1] = buf
    assert a.size == 6
    assert a[0]   == "a"
    assert a[1]   == 10
    assert a[2]   == 11
    assert a[3]   == 12
    assert a[4]   == 13
    assert a[5]   == 1
}

##############################################################################
# base.array.prototype.insert_array

do {
    const a = [1, 2, 3]
    const b = [4, 5, 6]
    a.insert_array(1, 1, b)
    assert a.size == 6
    assert b.size == 3
    assert a[0] == 1
    assert a[1] == 4
    assert a[2] == 5
    assert a[3] == 6
    assert a[4] == 2
    assert a[5] == 3
}

do {
    expect_fail(()=>base.array.prototype.insert_array.apply(void, [1,2,[]]))
}

##############################################################################
# base.array.prototype.fill

do {
    const a = base.array()
    a.resize(10)

    assert a.size == 10

    for var e in a {
        assert e == void
    }

    a.fill("abc")

    for var e in a {
        assert e == "abc"
    }

    a.fill(42, -3)

    for const i in range(a.size) {
        if i < 7 {
            assert a[i] == "abc"
        }
        else {
            assert a[i] == 42
        }
    }

    const obj = { x : 1, y : 2 }
    a.fill(obj, 2, 8)

    for const i in range(a.size) {
        if i < 2 {
            assert a[i] == "abc"
        }
        else if i < 8 {
            const e = a[i]
            assert typeof e == "object"
            assert e == obj
        }
        else {
            assert a[i] == 42
        }
    }

    expect_fail(()=>base.array.prototype.fill.apply(void, [1]))
    expect_fail(()=>a.fill())
}

##############################################################################
# base.array.prototype.sort

do {
    const a = []
    const b = a.sort()
    assert typeof b == "array"
    assert b == a
    assert a == []
}

do {
    const a = ["x"]
    const b = a.sort()
    assert typeof b == "array"
    assert b == a
    assert a.size == 1
    assert a[0] == "x"
}

do {
    const a = [3, 10, 5, 1]
    const b = a.sort(reverse = true)
    assert a == b
    assert a[0] == 10
    assert a[1] == 5
    assert a[2] == 3
    assert a[3] == 1
    assert b[0] == 10
    assert b[1] == 5
    assert b[2] == 3
    assert b[3] == 1
}

do {
    const a = ["base", 101, "array", 42, 60, "sort", -10, "size"]
    const b = a.sort(reverse = true, key = x => typeof x)
    assert a == b
    assert a[0] == "size"
    assert a[1] == "sort"
    assert a[2] == "array"
    assert a[3] == "base"
    assert a[4] == -10
    assert a[5] == 60
    assert a[6] == 42
    assert a[7] == 101
}

do {
    const a = ["base", 101, "array", 42, 60, "sort", -10, "size"]
    const b = a.sort(x => typeof x)
    assert a == b
    assert a[0] == 101
    assert a[1] == 42
    assert a[2] == 60
    assert a[3] == -10
    assert a[4] == "base"
    assert a[5] == "array"
    assert a[6] == "sort"
    assert a[7] == "size"
}

do {
    expect_fail(() => [false,true].sort(base.integer))
    expect_fail(() => base.array.prototype.sort.apply(1, []))
    expect_fail(() => [].sort(1))
    expect_fail(() => [].sort(void, void))
}

##############################################################################
# base.sort

do {
    const empty = []
    const a = base.sort(empty)
    assert typeof a == "array"
    assert a.size == 0
    assert a == empty

    empty.push(0)
    assert empty.size == 1
    assert a.size == 0
}

do {
    fun empty
    {
        if false { yield void }
    }

    const a = base.sort(false, empty())
    assert typeof a == "array"
    assert a.size == 0
}

do {
    const a = [8]
    const b = base.sort(a)
    assert a.size == 1
    assert a[0] == 8
    assert a == b
    a.push(0)
    assert a.size == 2
    assert b.size == 1
    assert b[0] == 8
}

do {
    const a = [0, 1]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a == b
    assert b.size == 2
    assert b[0] == 0
    assert b[1] == 1
    b.push(2)
    assert b.size == a.size + 1
}

do {
    const a = [0, 1]
    const b = base.sort(true, a)
    a.push(2)
    assert typeof b == "array"
    assert b.size == 2
    assert b[0] == 1
    assert b[1] == 0
}

do {
    const a = [1, 0]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a != b
    assert b.size == 2
    assert b[0] == 0
    assert b[1] == 1
}

do {
    const a = [1, 1]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a == b
    assert b.size == 2
    assert b[0] == 1
    assert b[1] == 1
    b.push(0)
    assert b.size == a.size + 1
}

do {
    const a = [1, 2, 3]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a == b
    a[1] = 0
    assert b.size == 3
    assert b[0] == 1
    assert b[1] == 2
    assert b[2] == 3
}

do {
    const a = [3, 2, 1]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a != b
    assert b.size == 3
    assert b[0] == 1
    assert b[1] == 2
    assert b[2] == 3
}

do {
    const a = [1, 3, 2]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a != b
    assert b.size == 3
    assert b[0] == 1
    assert b[1] == 2
    assert b[2] == 3
}

do {
    const a = [3, 3, 2]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a != b
    assert b.size == 3
    assert b[0] == 2
    assert b[1] == 3
    assert b[2] == 3
}

do {
    const a = [2, 2, 2]
    const b = base.sort(a)
    assert typeof b == "array"
    assert a == b
    a[0] = 0
    assert b.size == 3
    assert b[0] == 2
    assert b[1] == 2
    assert b[2] == 2
}

do {
    class sortable {
        constructor(key) {
            this.key = key
        }
    }

    const a = [ sortable(40), sortable(20), sortable(30), sortable(10), sortable(25) ]
    const b = base.sort(x => x.key, a)
    assert b[0].key == 10
    assert b[1].key == 20
    assert b[2].key == 25
    assert b[3].key == 30
    assert b[4].key == 40
}

do {
    class sortable {
        constructor(key) {
            this.key = key
        }
    }

    const a = [ sortable(40), sortable(20), sortable(30), sortable(10), sortable(25) ]
    const b = base.sort(x => x.key, true, a)
    assert b[0].key == 40
    assert b[1].key == 30
    assert b[2].key == 25
    assert b[3].key == 20
    assert b[4].key == 10
}

do {
    const a = [ 5, 4, 2, 3, 1 ]
    const s = base.sort(a)
    assert typeof s == "array"
    assert s.size == 5
    assert s[0] == 1
    assert s[1] == 2
    assert s[2] == 3
    assert s[3] == 4
    assert s[4] == 5
    assert a.size == 5
    assert a[0] == 5
    assert a[1] == 4
    assert a[2] == 2
    assert a[3] == 3
    assert a[4] == 1
}

do {
    const s = base.sort("foobar")
    assert typeof s == "array"
    assert s.size == 6
    assert s[0] == "a"
    assert s[1] == "b"
    assert s[2] == "f"
    assert s[3] == "o"
    assert s[4] == "o"
    assert s[5] == "r"
}

do {
    const s = base.sort(true, "fooba")
    assert typeof s == "array"
    assert s.size == 5
    assert s[0] == "o"
    assert s[1] == "o"
    assert s[2] == "f"
    assert s[3] == "b"
    assert s[4] == "a"
}

do {
    const s = [10, 11, 9, 8] -> base.sort
    assert typeof s == "array"
    assert s.size == 4
    assert s[0] == 8
    assert s[1] == 9
    assert s[2] == 10
    assert s[3] == 11
}

do {
    const s = [10, 11, 9, 8] -> base.sort(true)
    assert typeof s == "array"
    assert s.size == 4
    assert s[0] == 11
    assert s[1] == 10
    assert s[2] == 9
    assert s[3] == 8
}

do {
    const it = [30, 1, 20, -2] -> base.sort -> base.map(x => x + 1)
    assert typeof it == "function"
    assert it() == -1
    assert it() == 2
    assert it() == 21
    assert it() == 31
    expect_fail(it)
}

# Order of "equal" elements must be preserved
do {
    const input = ["020", 1, 20, "21", 5, 3, "0020", "8", "5", "05", "0001"]
    const a = base.sort(x => base.integer(x), input)
    assert typeof a == "array"
    assert a.size == 11
    assert a[0]   == 1
    assert a[1]   == "0001"
    assert a[2]   == 3
    assert a[3]   == 5
    assert a[4]   == "5"
    assert a[5]   == "05"
    assert a[6]   == "8"
    assert a[7]   == "020"
    assert a[8]   == 20
    assert a[9]   == "0020"
    assert a[10]  == "21"
}

# Use class for sorting key
do {
    const input = [1, 5, 10, 50, 100, 500]
    const a = base.sort(base.string, input)
    assert typeof a == "array"
    assert a.size == 6
    assert a[0] == 1
    assert a[1] == 10
    assert a[2] == 100
    assert a[3] == 5
    assert a[4] == 50
    assert a[5] == 500
}

##############################################################################
# base.array.prototype.cas

do {
    const input = [1, 2, 3, 4]
    assert input.cas(1, 2, 5) == 2
    assert input.cas(2, 2, 6) == 3
    assert input.cas(-1, 4, 7) == 4
    assert input.cas(-4, 1, "x") == 1
    assert input[0] == "x"
    assert input[1] == 5
    assert input[2] == 3
    assert input[3] == 7
    expect_fail(()=>input.cas(4, 0, 0))
    expect_fail(()=>input.cas(-5, 0, 0))
    expect_fail(()=>input.cas())
    expect_fail(()=>input.cas(0))
    expect_fail(()=>input.cas(0, 0))
    expect_fail(()=>input.cas(void, 2, 3))
    expect_fail(()=>base.array.prototype.cas.apply(void, [1,2,3]))
}

##############################################################################
# base.array.prototype.get

do {
    const a = [1, 2, 3]
    assert a.get(1)      == 2
    assert a.get(-1)     == 3
    assert a.get(4)      == void
    assert a.get(-4, 42) == 42
}
