#
# Copyright (c) 2014-2017 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

do {
    assert ["a", "b", "c"][0]  == "a"
    assert ["a", "b", "c"][1]  == "b"
    assert ["a", "b", "c"][-1] == "c"
}

expect_fail(()=>([][0]))

do {
    const a = []
    assert a.size == 0
}

do {
    const a = [[], [], []]
    assert a.size == 3
}

do {
    const a = [1, 2]
    assert a.size == 2
    assert a[0]   == 1
    assert a[1]   == 2
    assert a[-1]  == 2
    assert a[-2]  == 1

    a.resize(1)
    assert a.size == 1
    assert a[0]   == 1
    assert a[-1]  == 1
    expect_fail(()=>(a[1]))
    expect_fail(()=>(a[-2]))

    a.resize(3)
    assert a.size == 3
    assert a[0]   == 1
    assert a[1]   == void
    assert a[2]   == void
    assert a[-1]  == void
    assert a[-2]  == void
    assert a[-3]  == 1
    expect_fail(()=>(a[3]))
    expect_fail(()=>(a[-4]))
}

do {
    const a = [1, 2, 3, 4]
    assert a.size    == 4
    assert a["size"] == 4
    assert a[0]      == 1
    assert a[-1]     == 4
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == i + 1
    }
}

do {
    const a = [1, 2, 3, 4, 5]
    assert a.size == 5

    delete a.size
    assert a.size == 5

    a.resize(100)
    assert a.size == 100
    assert a[-1]  == void
    assert a[4]   == 5
    assert a[5]   == void
}

do {
    const a = [1, 2, 3]
    expect_fail(fun { a.size = 4 })
    assert a.size == 3
}

do {
    const a = [  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
                10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
                20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
                30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
                40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
                50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
                60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
                70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
                80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
                90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
               100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
               110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
               120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
               130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
               140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
               150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
               160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
               170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
               180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
               190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
               200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
               210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
               220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
               230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
               240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
               250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
               260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
               270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
               280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
               290, 291, 292, 293, 294, 295, 296, 297, 298, 299 ]
    assert typeof a == "array"
    assert a.size   == 300
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == i
    }
}

do {
    const a = ["a", "b", void, "d", true, "f"]

    const b = a[:]
    assert b      != a
    assert b.size == 6
    assert b[0]   == "a"
    assert b[2]   == void
    assert b[-1]  == "f"

    const c = a[-4:-2]
    assert c      != a
    assert c.size == 2
    assert c[0]   == void
    assert c[1]   == "d"

    const d = a[:2.5]
    assert d      != a
    assert d.size == 2
    assert d[0]   == "a"
    assert d[1]   == "b"

    const e = a[-2.9:]
    assert e      != a
    assert e.size == 3
    assert e[0]   == "d"
    assert e[1]   == true
    assert e[2]   == "f"

    const f = a[-10:10]
    assert a.size == f.size
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == f[i]
    }

    assert a[10:0].size == 0

    assert a[10:20].size == 0
}

do {
    var a = 123
    a = [a]
    assert typeof a    == "array"
    assert a.size      == 1
    assert typeof a[0] == "integer"
    assert a[0]        == 123
}

do {
    var a = [1, 2, 3, 4]
    a[1:3] = [5]
    assert a.size == 3
    assert a[0]   == 1
    assert a[1]   == 5
    assert a[2]   == 4
}

do {
    var a = [5]
    a.resize(100)
    assert a.size == 100
    assert a[0]   == 5

    a[:] = ["x", "y", "z"]

    assert typeof a == "array"
    assert a.size   == 3
    assert a[0]     == "x"
    assert a[1]     == "y"
    assert a[2]     == "z"
}

do {
    var a = [5]
    a.resize(100)
    assert a.size == 100
    assert a[0]   == 5

    a[:] = "xyz"

    assert typeof a == "array"
    assert a.size   == 3
    assert a[0]     == "x"
    assert a[1]     == "y"
    assert a[2]     == "z"
}

do {
    fun gen {
        for var i = 10; i < 15; i += 1 {
            yield i
        }
    }
    var a = [3, 4, 5, 6]
    a[1:3] = gen()
    const expected = [3, 10, 11, 12, 13, 14, 6]
    assert a.size == expected.size
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == expected[i]
    }
}

do {
    const a = [1, 2, 3, 4]
    a[:] = []
    assert typeof a == "array"
    assert a.size   == 0
}

do {
    const a = [10, 11, 12]
    a[1:1] = -2
    assert a.size == 4
    assert a[0]   == 10
    assert a[1]   == -2
    assert a[2]   == 11
    assert a[3]   == 12

    a[a.size:] = [20, 21]
    assert a.size == 6
    assert a[-2]  == 20
    assert a[-1]  == 21

    a[a.size:] = 22
    assert a.size == 7
    assert a[-1]  == 22
}

do {
    var a = ""
    expect_fail(fun { a[:] = [] })
}

do {
    var a = {}
    expect_fail(fun { a[:] = [] })
}

do {
    var a = 2
    expect_fail(fun { a[:] = [] })
}

do {
    # These don't make sense, but are correct
    [1, 2, 3][0] = void;
    [1, 2, 3][:] = []
}

do {
    var a = []
    a[:] = { abc: void }
    assert a.size >= 1

    var found = false
    for var i = 0; i < a.size; i += 1 {
        const k, v = a[i]
        if k == "abc" {
            found = true
            break
        }
    }
    assert found
}

# Invalid index
do {
    const a = []

    fun elem(e)
    {
        return a[e]
    }

    fun set_elem(e)
    {
        a[e] = 0
    }

    expect_fail(()=>(elem(0x8000000000000000)))
    expect_fail(()=>(set_elem(0x8000000000000000)))
}

# Large array
do {
    const a = [   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
                 10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
                 20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
                 30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
                 40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
                 50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
                 60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
                 70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
                 80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
                 90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
                100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
                110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
                120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
                130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
                140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
                150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
                160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
                170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
                180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
                190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
                200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
                210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
                220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
                230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
                240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
                250, 251, 252, 253, 254, 255, 256, 257, 258, 259 ]
    assert a.size == 260
    for var i = 0; i < 260; i += 1 {
        assert a[i] == i
    }
}

# Reverse
do {
    const a = [ 2, true, 1.5, "str" ].reverse()
    assert a.size == 4
    assert a[0] == "str"
    assert a[1] == 1.5
    assert a[2] == true
    assert a[3] == 2

    const empty = []
    const empty_r = empty.reverse()
    assert typeof empty_r == "array"
    assert empty_r.size == 0
    empty_r.push({})
    assert empty_r.size == 1
    assert empty.size == 0

    const one = [ 60 ]
    const one_r = one.reverse()
    assert typeof one_r == "array"
    assert one_r.size == 1
    assert one_r[0] == 60
    one_r.push({})
    assert one_r.size == 2
    assert one.size == 1
}
