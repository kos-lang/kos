#
# Copyright (c) 2014-2016 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
fun expect_fail(function)
{
    var failed = false;
    try {
        function();
    }
    catch const e {
        failed = true;
    }
    assert failed;
}

{
    assert ['a', 'b', 'c'][0]  == 'a';
    assert ['a', 'b', 'c'][1]  == 'b';
    assert ['a', 'b', 'c'][-1] == 'c';
}

expect_fail(λ->([][0]));

{
    const a = [];
    assert a.size == 0;
}

{
    const a = [[], [], []];
    assert a.size == 3;
}

{
    const a = [1, 2];
    assert a.size == 2;
    assert a[0]   == 1;
    assert a[1]   == 2;
    assert a[-1]  == 2;
    assert a[-2]  == 1;

    a.resize(1);
    assert a.size == 1;
    assert a[0]   == 1;
    assert a[-1]  == 1;
    expect_fail(λ->(a[1]));
    expect_fail(λ->(a[-2]));

    a.resize(3);
    assert a.size == 3;
    assert a[0]   == 1;
    assert a[1]   == void;
    assert a[2]   == void;
    assert a[-1]  == void;
    assert a[-2]  == void;
    assert a[-3]  == 1;
    expect_fail(λ->(a[3]));
    expect_fail(λ->(a[-4]));
}

{
    const a = [1, 2, 3, 4];
    assert a.size    == 4;
    assert a["size"] == 4;
    assert a[0]      == 1;
    assert a[-1]     == 4;
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == i + 1;
    }
}

{
    const a = [1, 2, 3, 4, 5];
    assert a.size == 5;

    delete a.size;
    assert a.size == 5;

    a.resize(100);
    assert a.size == 100;
    assert a[-1]  == void;
    assert a[4]   == 5;
    assert a[5]   == void;
}

{
    const a = [1, 2, 3];
    expect_fail(fun { a.size = 4; });
    assert a.size == 3;
}

{
    const a = ['a', 'b', void, 'd', true, 'f'];

    const b = a[:];
    assert b      != a;
    assert b.size == 6;
    assert b[0]   == 'a';
    assert b[2]   == void;
    assert b[-1]  == 'f';

    const c = a[-4:-2];
    assert c      != a;
    assert c.size == 2;
    assert c[0]   == void;
    assert c[1]   == 'd';

    const d = a[:2.5];
    assert d      != a;
    assert d.size == 2;
    assert d[0]   == 'a';
    assert d[1]   == 'b';

    const e = a[-3.9:];
    assert e      != a;
    assert e.size == 3;
    assert e[0]   == 'd';
    assert e[1]   == true;
    assert e[2]   == 'f';

    const f = a[-10:10];
    assert a.size == f.size;
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == f[i];
    }

    assert a[10:0].size == 0;

    assert a[10:20].size == 0;
}

{
    var a = 123;
    a = [a];
    assert typeof a    == "array";
    assert a.size      == 1;
    assert typeof a[0] == "integer";
    assert a[0]        == 123;
}

{
    var a = [1, 2, 3, 4];
    a[1:3] = [5];
    assert a.size == 3;
    assert a[0]   == 1;
    assert a[1]   == 5;
    assert a[2]   == 4;
}

{
    var a = [5];
    a.resize(100);
    assert a.size == 100;
    assert a[0]   == 5;

    a[:] = ["x", "y", "z"];

    assert typeof a == "array";
    assert a.size   == 3;
    assert a[0]     == "x";
    assert a[1]     == "y";
    assert a[2]     == "z";
}

{
    var a = [5];
    a.resize(100);
    assert a.size == 100;
    assert a[0]   == 5;

    a[:] = "xyz";

    assert typeof a == "array";
    assert a.size   == 3;
    assert a[0]     == "x";
    assert a[1]     == "y";
    assert a[2]     == "z";
}

{
    fun gen {
        for var i = 10; i < 15; i += 1 {
            yield i;
        }
    }
    var a = [3, 4, 5, 6];
    a[1:3] = gen();
    const expected = [3, 10, 11, 12, 13, 14, 6];
    assert a.size == expected.size;
    for var i = 0; i < a.size; i += 1 {
        assert a[i] == expected[i];
    }
}

{
    const a = [1, 2, 3, 4];
    a[:] = [];
    assert typeof a == "array";
    assert a.size   == 0;
}

{
    const a = [10, 11, 12];
    a[1:1] = -2;
    assert a.size == 4;
    assert a[0]   == 10;
    assert a[1]   == -2;
    assert a[2]   == 11;
    assert a[3]   == 12;

    a[a.size:] = [20, 21];
    assert a.size == 6;
    assert a[-2]  == 20;
    assert a[-1]  == 21;

    a[a.size:] = 22;
    assert a.size == 7;
    assert a[-1]  == 22;
}

{
    var a = "";
    expect_fail(fun { a[:] = []; });
}

{
    var a = {};
    expect_fail(fun { a[:] = []; });
}

{
    var a = 2;
    expect_fail(fun { a[:] = []; });
}

{
    # These don't make sense, but are correct
    [1, 2, 3][0] = void;
    [1, 2, 3][:] = [];
}

{
    var a = [];
    a[:] = { abc: void };
    assert a.size >= 1;

    var found = false;
    for var i = 0; i < a.size; i += 1 {
        if a[i] == "abc" {
            found = true;
            break;
        }
    }
    assert found;
}
