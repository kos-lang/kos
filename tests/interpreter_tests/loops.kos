# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) 2014-2024 Chris Dragan

import base.print
import base.range
import base.generator_end

do {
    var a = 1
    while a < 10 {
        a = a + 1
    }
    assert a == 10
}

do {
    var a = 0
    var c = 0
    while a < 100 {
        c = c + 1
        a = a + 6
    }
    assert a == 102
    assert c == 17
}

do {
    var a = 1
    repeat {
        a = a - 1
    } while a > -5
    assert a == -5
}

do {
    var a = 20
    var c = 0
    repeat {
        c = c + 1
        a = a - 3
    } while a > 0
    assert a == -1
    assert c == 7
}

do {
    var c = 0
    for const i in range(2) {
        c += 1
    }
    assert c == 2
}

do {
    var sum = 0
    for const i in fun { yield 1; yield 3; yield 5 } ( ) {
        sum += i
        if i == 3 { break }
    }
    assert sum == 4
}

do {
    var v = 123
    for v in [] { }
    assert v == void
}

do {
    var v = 123
    for v in ["a", "b", "c"] { }
    assert v == void
}

do {
    var v = 123
    for v in ["a", "b", "c"] {
        assert v == "a"
        break
    }
    assert v == "a"
}

const myrange = range(0) ? range : void

do {
    var v = 123
    for v in myrange(3) { }
    assert v == void
}

do {
    var v = 123
    for v in myrange(3) { }
    assert v == void
}

do {
    var v = 123
    for v in myrange(3) {
        assert v == 0
        break
    }
    assert v == 0
}

do {
    var v = 123
    for v in range(3) { }
    assert v == void
}

do {
    var v = 123
    for v in range(3) { }
    assert v == void
}

do {
    var v = 123
    for v in range(3) {
        assert v == 0
        break
    }
    assert v == 0
}

do {
    var c = 10
    var d = 20
    var sum = 0
    for c, d in { a: 1, b: 2 } {
        sum += d
        if c == "a" {
            break
        }
    }
    assert c == "a"
    assert d == 1
    assert (sum == 1) || (sum == 3)
}

do {
    var k = 10
    var v = 20
    var sum = 0
    for k, v in { c: 3 } {
        sum += v
    }
    assert k == "c"
    assert v == 3
    assert sum == 3
}

do {
    var v = false
    var sum = 0
    for v in range(4) {
        sum += v
    }
    assert v == void
    assert sum == 6
}

do {
    var v = -1
    var sum = 0
    for v in [ 10, 11, 12 ] {
        sum += v
    }
    assert v == void
    assert sum == 33
}

do {
    var v = -1
    var sum = 0
    while v == -1 {
        const fun_range = (v == -1) ? range : void
        for v in fun_range(4) {
            sum += v
        }
    }
    assert v == void
    assert sum == 6
}

do {
    var begin = 5
    var end   = 10
    var sum   = 0

    for const i in range(begin, end) {
        sum += i
        begin += 1
        end   -= 1
    }

    assert sum == 5 + 6 + 7 + 8 + 9
    assert begin == 10
    assert end   == 5
}

do {
    var sum = ""
    for const k, _ in { "1": -1, "2": -2 } {
        sum += k
    }
    assert sum == "12" || sum == "21"
}

do {
    var sum = 0
    for const _, v in { "1": -1, "2": -2 } {
        sum += v
    }
    assert sum == -3
}

do {
    var   c     = 0
    const step1 = 2
    const step2 = 3
    var   c1    = 2
    var   c2    = 0
            
    while c1 > c2 {
        c1 += step1
        c2 += step2
        c  += 1
    }
    assert c == 2
}

do {
    var i = 0
    while i < 10 { i+=1 }
    assert i == 10
}

do {
    var i = 0
    fun inc
    {
        i += 1
    }

    var x = 1
    while i < 5 {
        x += 2
        inc()
    }
    assert i == 5
    assert x == 11
}

do {
    var sum = 0
    for var val in [3, 10, 700, 8000] {
        sum += val
    }
    assert sum == 8713
}

do {
    fun values(a, b, c)
    {
        yield a
        yield b
        yield c
    }

    var sum = 0
    for var val in values(800, 6, 20) {
        sum += val
    }
    assert sum == 826
}

do {
    var   sum = 0
    const obj = { a: 9000, b: 7, c: 50, d: 300 }
    for const key, val in obj {
        if typeof val == "integer" {
            sum += val
        }
    }
    assert sum == 9357
}

do {
    for var x in [] {
        throw "Unexpected iteration"
    }

    fun no_yield
    {
        return void
        yield void
    }

    for var x in no_yield() {
        throw "Unexpected iteration"
    }
}

do {
    var count = 0
    var sum   = 0
    var array = [1, 2, 3]
    for var v in array {
        sum   += v
        count += 1
        if v == 2 {
            array.insert(array.size, 4)
        }
    }
    assert count == 4
    assert sum   == 10
}

do {
    var sum = 0
    var i   = 0
    repeat {
        i += 1
        if i == 2 {
            sum += 200 + i
            continue
        }
        if i == 5 {
            sum += 8000 + i
            continue
        }
        if i == 7 {
            break
        }
        sum += 10
    } while i < 100

    assert sum == 8247
}

do {
    var sum = 0
    var i   = 0
    while i < 100 {
        i += 1
        if i == 3 {
            sum += 400 + i
            continue
        }
        if i == 4 {
            sum += 9000 + i
            continue
        }
        if i == 6 {
            break
        }
        sum += 10
    }

    assert sum == 9437
}

do {
    var sum = 0
    for var i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] {
        if i == 2 {
            sum += 100 + i
            continue
        }
        if i == 5 {
            sum += 6000 + i
            continue
        }
        if i == 8 {
            break
        }
        sum += 10
    }

    assert sum == 6157
}

do {
    var sum = 0
    for const i in range(1, 100) {
        if i == 3 {
            sum += 500 + i
            continue
        }
        if i == 6 {
            sum += 7000 + i
            continue
        }
        if i == 9 {
            break
        }
        sum += 10
    }

    assert sum == 7569
}

do {
    var status = 0

    try {
        for const i in range(1) {
            try {
                continue
            }
            catch const e {
                status += 1
            }
        }
        throw void
    }
    catch const e {
        status += 10
    }

    assert status == 10
}

do {
    var status = 0

    try {
        defer {
            status += 2
        }
        for const i in range(100) {
            try {
                break
            }
            catch const e {
                status += 1
            }
            status += 1
        }
        throw void
    }
    catch const e {
        status += 7000
    }

    assert status == 7002
}

# Use independent variable for looping
do {
    fun theloop
    {
        var elem = void

        return fun(iterable)
        {
            var cnt = 0
            for elem in iterable {
                cnt += elem
            }
            return cnt
        }
    }

    assert theloop()([1, 20, 300]) == 321
}

# Unused independent variable in for loop
do {
    fun theloop
    {
        var elem = void

        return fun(iterable)
        {
            var cnt = 0
            for elem in iterable {
                cnt += 1
            }
            return cnt
        }
    }

    assert theloop()([1, 20, 300]) == 3
}

# Use independent variable for looping (range)
do {
    fun theloop
    {
        var elem = void

        return fun(begin, end)
        {
            var cnt = 0
            for elem in range(begin, end) {
                cnt += elem
            }
            return cnt
        }
    }

    assert theloop()(3, 6) == 12
}

# Unused independent variable in for loop (range)
do {
    fun theloop
    {
        var elem = void

        return fun(begin, end)
        {
            var cnt = 0
            for elem in range(begin, end) {
                cnt += 1
            }
            return cnt
        }
    }

    assert theloop()(3, 6) == 3
}

# Use global variable for looping
public var global_loop = 123
do {
    fun loopit(iterable)
    {
        var cnt = 0
        for global_loop in iterable {
            cnt += global_loop
        }
        return cnt
    }

    assert loopit([1, 20, 300]) == 321
    assert global_loop == void
}

# Unused independent variable in for loop
public var global_loop_unused = 123
do {
    fun loopit(iterable)
    {
        var cnt = 0
        for global_loop_unused in iterable {
            cnt += 1
        }
        return cnt
    }

    assert loopit([1, 20, 300]) == 3
}

# Use global variable for looping (range)
do {
    fun loopit(begin, end)
    {
        var cnt = 0
        for global_loop in range(begin, end) {
            cnt += global_loop
        }
        return cnt
    }

    assert loopit(3, 6) == 12
    assert global_loop == void
}

# Unused independent variable in for loop (range)
do {
    fun loopit(begin, end)
    {
        var cnt = 0
        for global_loop_unused in range(begin, end) {
            cnt += 1
        }
        return cnt
    }

    assert loopit(3, 6) == 3
}

# Loop with multiple variables
do {
    fun theloop
    {
        var elem        = void
        var elem_unused = void

        return fun(iterable) {
            var local = void
            var sums  = []
            for elem, elem_unused, _, global_loop, global_loop_unused, local in iterable {
                var sum = 0
                sum += elem
                sum += global_loop
                sum += local
                sums.push(sum)
            }
            return sums
        }
    }

    const out = theloop()([ [1, 20, 300, 4000, 50_000, 600_000],
                            [70_000, 8_000, 900, 10, 2, 300_000] ])
    assert out.size == 2
    assert out[0] == 604_001
    assert out[1] == 370_010
    assert global_loop == void
}

do {
    var a = 0
    var b = 0
    try {
        a += 1
        try {
            while a < 10 {
                try {
                    b = b * 10 + a
                    a += 1
                    if a == 4 {
                        break
                    }
                }
                catch const e {
                    a = 0
                    b = 0
                }
            }
            throw void
        }
        catch const e {
            a += 9000
        }
    }
    catch const e {
        a = 100
        b = 100
    }

    assert a == 9004
    assert b == 123
}

do {
    var a = ""
    try {
        a += "a"
        try {
            a += "f:("
            for var fval in ["c", "m", "e"] {
                a += "\(fval)["
                try {
                    if fval == "e" {
                        a += "F"
                        break
                    }

                    a += "d:("

                    var c = 0
                    repeat {
                        try {
                            c += 1
                            a += "c=\(c), w:("

                            while c < 20 {
                                c += 3
                                try {
                                    a += "c=\(c)"
                                    if c > 8 {
                                        a += "W"
                                        break
                                    }
                                    throw ", "
                                }
                                catch const e {
                                    a += e.value
                                }
                            }

                            a += "):w"

                            throw ";"
                            a = -1000
                        }
                        catch const e {
                            a += e.value
                        }

                        if c > 9 {
                            a += "D"
                            break
                        }
                    } while c < 100

                    a += "):d"

                    throw " - "
                    a = -2000
                }
                catch const e {
                    a += e.value
                }
                a += "*"
            }
            throw "_"
        }
        catch const e {
            a += e.value
        }
        a += "):f"
    }
    catch const e {
        a = void
    }

    assert a == "af:(c[d:(c=1, w:(c=4, c=7, c=10W):w;D):d - *m[d:(c=1, w:(c=4, c=7, c=10W):w;D):d - *e[F_):f"
}

do {
    fun throw_from_loop(x)
    {
        try {
            var i = 0
            while i < 100 {
                try {
                    if i == 2 {
                        break
                    }
                }
                catch const e {
                    i = 100
                }
                i += 1
            }
            throw 5
        }
        catch const e {
            return x + e.value
        }
        throw x * 2
    }

    assert throw_from_loop(10) == 15
    assert throw_from_loop(20) == 25
}

do {
    var j = 0
    for const i in range(100) {
        defer {
            j += 1
        }
        continue
        j -= 1
    }

    assert j == 100
}

do {
    var a = ""

    fun try_break
    {
        defer {
            a += "6"
        }
        a += "1"
        defer {
            a += "5"
        }
        a += "2"
        const letters = ["a", "b", "c"]
        for const i in range(100) {
            defer {
                a += "3"
            }
            a += letters[i]
            if i == 2 {
                break
            }
        }
        a += "4"
    }

    try_break()

    assert a == "12a3b3c3456"
}

do {
    var a = ""

    fun try_break
    {
        try {
            a += "A"
            for const i in range(100) {
                defer {
                    a += "B"
                }
                if i == 2 {
                    break
                }
                a += "\(i)"
            }
            a += "C"
            throw "D"
            a += "E"
        }
        catch const e {
            a += e.value
        }
    }

    try_break()

    assert a == "A0B1BBCD"
}

do {
    var a = ""

    try {
        for const i in range(100) {
            defer {
                a += "e "
            }
            a += "a\(i) " 
            defer {
                a += "d"
            }
            a += "b\(i) "
            if i == 0 {
                continue
            }
            else if i == 2 {
                break
            }
            a += "c"
        }
    }
    catch const e {
        a = ""
    }

    assert a == "a0 b0 de a1 b1 cde a2 b2 de "
}

do {
    var fail1 = true
    var fail2 = true

    fun run_loop
    {
        var i = 0
        var j = 0
        defer {
            assert i == 5
            assert j == 6
            fail1 = false
        }

        fun iterate_over_i
        {
            i = 0
            while i < 10 {
                yield i
                i += 1
            }
        }

        j = 0
        for const i in iterate_over_i() {
            defer {
                j += 1
            }
            if i < 5 {
                continue
            }
            else if i == 5 {
                break
            }
            throw void
        }
    }

    do {
        defer {
            fail2 = false
        }
        run_loop()
        assert ! fail1
    }

    assert ! fail2
}

do {
    var i = 0

    while i < 10 {
        try {
            defer {
                throw void // Cancel break
            }
            break
        }
        catch const e {
            i += 1
        }
    }

    assert i == 10
}

do {
    var i = 0

    fun next
    {
        while i < 10 {
            yield i
            i += 1
        }
    }

    for const xyz in next() {
        defer {
            continue // Cancel break, override with continue
        }
        break
        throw void
    }

    assert i == 10
}

do {
    const value = fun {
        var i = 0
        while true {
            return i
            i += 1
        }
    } ()
    assert value == 0
}

do {
    var i = 0

    repeat {
        try {
            if i == 5 {
                throw void
            }
            i += 1
        }
        catch const e {
            break
        }
    } while i < 10

    assert i == 5
}

do {
    var a = ""

    for var c in ["a", "b", "c", "d"] {
        try {
            if c == "b" {
                throw void
            }
        }
        catch const e {
            continue
        }
        a += c
    }

    assert a == "acd"
}

do {
    var a = ""

    for var c in "xyza" {
        assert typeof c == "string"
        assert c.size == 1
        a += c
    }

    assert a == "xyza"
}

do {
    var count = 0
    for var v in 4 {
        assert typeof v == "integer"
        assert v == 4
        count += 1
    }
    assert count == 1
}

do {
    var count = 0
    for var v in 8.5 {
        assert typeof v == "float"
        assert v == 8.5
        count += 1
    }
    assert count == 1
}

do {
    var count = 0
    for var v in false {
        assert typeof v == "boolean"
        assert v == false
        count += 1
    }
    assert count == 1
}

do {
    for var v in [] {
        throw "unexpected iteration"
    }
}

do {
    var i = 0
    loop {
        i += 1
        if i == 10 {
            break
        }
    }
    assert i == 10
}

do {
    var x = 0
    fun set_x(value)
    {
        x = value
        return false
    }
    while set_x(1) {
        x = 2
    }
    assert x == 1
}

# custom iterator() function
do {
    const obj = {
        iterator: fun {
            yield 2
            yield 10
        }
    }

    for const v in obj {
        assert typeof v == "array"
        assert v[0] == "iterator"
        assert typeof v[1] == "function"
    }
}

# multiple defers
do {
    fun f(x)
    {
        var a = 0

        for const i in range(0, 10, 2) {
            do {
                defer { a = a * 10 + i + 1 }
                if i == x {
                    break
                }
            }

            do {
                defer { a = a * 10 + i + 2 }
                if i + 1 == x {
                    break
                }
            }
        }

        return a
    }

    assert f(0) == 1
    assert f(1) == 12
    assert f(2) == 123
    assert f(3) == 1234
}

# Declare function inside loop condition
do {
    while (()=>false) ()
    {
    }

    var ran = false

    while fun { ran = true; return false } ()
    {
    }

    assert ran == true
}

# Test case from fuzzer, must not crash
repeat {
    defer {
        class s {
            fun x { return ! s }
        }
    }

    defer {
        break
    }
} while false

# Forever loop using repeat
do {
    var count = 0
    repeat {
        count += 1
        if count >= 10 {
            break
        }
    } while true

    assert count == 10
}

# repeat loop with &&
do {
    fun doit(a...)
    {
        var idx = -2
        repeat {
            idx += 2
        } while a[idx] && a[idx + 1]
        return idx
    }

    assert doit(8, "", 9, 0) == 2
    assert doit(8, "", 0, 9) == 2
    assert doit(8, 0) == 0
    assert doit(0, "") == 0
}

# repeat loop with ||
do {
    fun doit(a...)
    {
        var idx = -2
        repeat {
            idx += 2
        } while a[idx] || a[idx + 1]
        return idx
    }

    assert doit(8, "a", void, 0) == 2
    assert doit(8, "a", 0, void) == 2
    assert doit(void, 0) == 0
    assert doit(0, false) == 0
}

# while loop with &&
do {
    fun doit(a...)
    {
        var idx = 0
        while a[idx] && a[idx + 1] {
            idx += 2
        }
        return idx
    }

    assert doit(8, "", true, true, 9, 0) == 4
    assert doit(8, "", true, true, 0, 9) == 4
    assert doit(8, "", 9, 0) == 2
    assert doit(8, "", 0, 9) == 2
    assert doit(8, 0) == 0
    assert doit(0, "") == 0
}

# while loop with ||
do {
    fun doit(a...)
    {
        var idx = 0
        while a[idx] || a[idx + 1] {
            idx += 2
        }
        return idx
    }

    assert doit(8, "a", false, "b", void, 0) == 4
    assert doit(8, "a", "b", false, 0, void) == 4
    assert doit(8, "a", void, 0) == 2
    assert doit(8, "a", 0, void) == 2
    assert doit(8, false, void, 0) == 2
    assert doit(void, "a", 0, void) == 2
    assert doit(void, 0) == 0
    assert doit(0, false) == 0
}

# continue in switch
do {
    repeat {
        switch void {
            default {
                continue
            }
        }
        switch void {
        }
    } while false
}

# continue in switch
do {
    repeat {
        switch void {
            default {
                continue
            }
        }
        switch void {
            default {
                break
            }
        }
    } while false
}

# switch after break
do {
    var i = 0
    loop {
        if i == 1 {
            break
        }
        switch void {
        }
        i += 1
    }
    assert i == 1
}

# switch after break
do {
    var i = 0
    loop {
        if i == 1 {
            break
        }
        switch void {
            default {
                i += 1
            }
        }
    }
    assert i == 1
}
