# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2023 Chris Dragan

import base
import net
import os
import test_tools.expect_fail

##############################################################################
# Invalid inputs

do {
    expect_fail(() => net.socket(domain = ~net.AF_INET))
    expect_fail(() => net.socket(type = ~net.SOCK_STREAM))
    expect_fail(() => net.socket(protocol = 0x87654123))

    const sock = net.socket()

    expect_fail(() => sock.bind(address = -1))
    expect_fail(() => sock.bind(port = 0x1_0000))
    expect_fail(() => sock.bind(address = "https://$&%,"))

    expect_fail(() => sock.connect(address = -1))
    expect_fail(() => sock.connect(port = 0x1_0000))
    expect_fail(() => sock.bind().connect("invalid.address"))

    expect_fail(() => sock.listen(-1))
    expect_fail(() => sock.listen(0x1_0000))

    expect_fail(() => sock.recv(flags = {}))
    expect_fail(() => sock.recv(flags = 0xFFFF_FFFF))
    expect_fail(() => sock.recv(buffer = []))
    expect_fail(() => sock.recv(size = 0x1_0000_0000))

    expect_fail(() => sock.recvfrom(flags = {}))
    expect_fail(() => sock.recvfrom(flags = 0xFFFF_FFFF))
    expect_fail(() => sock.recvfrom(buffer = []))
    expect_fail(() => sock.recvfrom(size = 0x1_0000_0000))

    expect_fail(() => sock.wait(-0.001))
    expect_fail(() => sock.wait(-1))

    expect_fail(() => sock.send(123))
    expect_fail(() => sock.send(data="hello", flags="world"))
    expect_fail(() => sock.send(data="hello", flags=0xFFFF_FFFF))

    expect_fail(() => sock.sendto("localhost", 8080, 123))
    expect_fail(() => sock.sendto("localhost", 8080, "hello", "world"))
    expect_fail(() => sock.sendto("localhost", 8080, "hello", 0xFFFF_FFFF))

    expect_fail(fun { sock.blocking = "abc" })

    assert sock.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true) == sock
    assert sock.close() == sock
    expect_fail(() => sock.bind(port = 11000))
    expect_fail(() => sock.wait(0.001))

    expect_fail(() => sock.bind.apply(void, []))
    expect_fail(() => sock.bind.apply(123, []))
    expect_fail(() => sock.close.apply(void, []))
    expect_fail(() => sock.close.apply(123, []))
}

##############################################################################
# getaddrinfo

var ipv6 = false

do {
    const addr = net.getaddrinfo("localhost", "http")
    assert typeof addr == "array"
    assert addr.size > 0
    for const a in addr {
        assert "address" in a
        assert typeof a.address == "string"

        assert "port" in a
        assert a.port == 80

        assert "family" in a
        assert a.family == net.AF_INET || a.family == net.AF_INET6

        if a.family == net.AF_INET6 {
            ipv6 = true
        }

        assert "socktype" in a
        assert typeof a.socktype == "integer"

        assert "protocol" in a
        assert typeof a.protocol == "integer"
    }

    expect_fail(() => net.getaddrinfo(""))
    expect_fail(() => net.getaddrinfo(100))
    expect_fail(() => net.getaddrinfo("", []))
}

do {
    const addr = net.getaddrinfo(void, 80)
    assert addr.size > 0
    for const a in addr {
        assert a.port == 80
    }
}

##############################################################################
# socket.getsockopt()

do {
    const socktcp = net.socket(type = net.SOCK_STREAM)
    const sockudp = net.socket(type = net.SOCK_DGRAM)

    expect_fail(() => socktcp.getsockopt(~net.SOL_SOCKET, net.SO_REUSEADDR))
    expect_fail(() => socktcp.getsockopt(net.SOL_SOCKET, ~net.SO_REUSEADDR))
    expect_fail(() => socktcp.getsockopt("hello", net.SO_REUSEADDR))
    expect_fail(() => socktcp.getsockopt(net.SOL_SOCKET, "hello"))

    assert typeof sockudp.getsockopt(net.SOL_SOCKET, net.SO_BROADCAST) == "boolean"
    assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_DEBUG)     == "boolean"
    assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_DONTROUTE) == "boolean"
    assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_KEEPALIVE) == "boolean"
    assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_OOBINLINE) == "boolean"
    assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_REUSEADDR) == "boolean"
    assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_REUSEPORT) == "boolean"
    if os.sysname != "Haiku" {
        assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_RCVBUF)    == "integer"
        assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_RCVTIMEO)  == "float"
        assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_SNDBUF)    == "integer"
        assert typeof socktcp.getsockopt(net.SOL_SOCKET, net.SO_SNDTIMEO)  == "float"
    }
}

##############################################################################
# socket.setsockopt()

do {
    const socktcp = net.socket(type = net.SOCK_STREAM)
    const sockudp = net.socket(type = net.SOCK_DGRAM)

    expect_fail(() => socktcp.setsockopt(~net.SOL_SOCKET, net.SO_REUSEADDR,  true))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  ~net.SO_REUSEADDR, true))
    expect_fail(() => socktcp.setsockopt("hello",         net.SO_REUSEADDR,  true))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  "hello",           true))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_REUSEADDR,  "hello"))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_REUSEADDR,  9223372036854775809.0))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_RCVBUF,     "hello"))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_RCVBUF,     9223372036854775809.0))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_RCVTIMEO,   "hello"))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_RCVTIMEO,   -1))
    expect_fail(() => socktcp.setsockopt(net.SOL_SOCKET,  net.SO_RCVTIMEO,   0x1_0000_0000_0000))

    sockudp.setsockopt(net.SOL_SOCKET, net.SO_BROADCAST, true)
    socktcp.setsockopt(net.SOL_SOCKET, net.SO_DEBUG,     false)
    socktcp.setsockopt(net.SOL_SOCKET, net.SO_DONTROUTE, true)
    socktcp.setsockopt(net.SOL_SOCKET, net.SO_KEEPALIVE, true)
    socktcp.setsockopt(net.SOL_SOCKET, net.SO_OOBINLINE, true)
    socktcp.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true)
    socktcp.setsockopt(net.SOL_SOCKET, net.SO_REUSEPORT, true)
    if os.sysname != "Haiku" {
        socktcp.setsockopt(net.SOL_SOCKET, net.SO_RCVBUF,    4096)
        socktcp.setsockopt(net.SOL_SOCKET, net.SO_RCVTIMEO,  10)
        socktcp.setsockopt(net.SOL_SOCKET, net.SO_RCVTIMEO,  10.0)
        socktcp.setsockopt(net.SOL_SOCKET, net.SO_SNDBUF,    4096)
        socktcp.setsockopt(net.SOL_SOCKET, net.SO_SNDTIMEO,  10)
        socktcp.setsockopt(net.SOL_SOCKET, net.SO_SNDTIMEO,  10.0)
    }
}

##############################################################################
# socket.bind()

do {
    net.socket().bind()
    net.socket().bind("")
    net.socket().bind("localhost")
    net.socket().bind("127.0.0.1")
    net.socket().setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("localhost", 11000)
    net.socket().setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("127.0.0.1", 11001)
    const sock = net.socket().setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind(port = 11002)

    expect_fail(() => net.socket().bind(port = 11002))

    if ipv6 {
        net.socket(net.AF_INET6).bind()
        net.socket(net.AF_INET6).bind("")
        net.socket(net.AF_INET6).setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind(port = 11003)

        net.socket(net.AF_INET6).bind("localhost")
        net.socket(net.AF_INET6).bind("::1")
        net.socket(net.AF_INET6).setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("::1", 11004)
    }
}

##############################################################################

do {
    const port = 11005

    const server_sock = net.socket(net.AF_INET, net.SOCK_STREAM)

    assert server_sock.blocking
    server_sock.blocking = false
    assert ! server_sock.blocking
    server_sock.blocking = true
    assert server_sock.blocking

    assert server_sock.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true) == server_sock
    assert server_sock.bind("0.0.0.0", port) == server_sock
    assert server_sock.listen()              == server_sock

    const recv_thread = async do {
        const recv_sock = server_sock.accept().socket
        assert recv_sock.blocking
        assert recv_sock instanceof net.socket

        assert server_sock.close() == server_sock

        assert recv_sock.shutdown(net.SHUT_WR) == recv_sock

        const b = base.buffer()
        while b.size < 12 {
            const br = recv_sock.recv(128, b)
            assert typeof br == "buffer"
            assert br == b
        }

        assert recv_sock.shutdown(net.SHUT_RD) == recv_sock
        assert recv_sock.close()               == recv_sock

        assert b.size == 12
        assert base.string(b) == "hello, world"
    }

    const send_sock = net.socket(net.AF_INET, net.SOCK_STREAM)
    assert send_sock.connect("localhost", port) == send_sock
    assert send_sock.send("hello")              == send_sock
    assert send_sock.write(", ", "world")       == send_sock

    recv_thread.wait()

    assert send_sock.shutdown(net.SHUT_WR)      == send_sock
    assert send_sock.close()                    == send_sock
}

##############################################################################

do {
    const port = 11006

    const server_sock = net.socket()
    server_sock.blocking = false
    assert ! server_sock.blocking
    assert server_sock.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true) == server_sock
    assert server_sock.bind("0.0.0.0", port) == server_sock
    assert server_sock.listen()              == server_sock

    expect_fail(() => server_sock.accept())
    assert ! server_sock.wait(0)

    const recv_thread = async do {
        assert server_sock.wait()
        const recv_sock = server_sock.accept().socket
        recv_sock.blocking = false
        assert ! recv_sock.blocking
        assert recv_sock instanceof net.socket

        assert server_sock.close() == server_sock

        assert recv_sock.shutdown(net.SHUT_WR) == recv_sock

        assert recv_sock.wait(10)

        const b = recv_sock.recv(128)
        assert typeof b == "buffer"

        assert recv_sock.shutdown(net.SHUT_RD) == recv_sock
        assert recv_sock.close()               == recv_sock

        assert b.size == 5
        assert base.string(b) == "world"
    }

    const send_sock = net.socket()
    assert send_sock.connect("localhost", port) == send_sock

    assert send_sock.send(base.buffer("world")) == send_sock

    recv_thread.wait()

    assert send_sock.shutdown(net.SHUT_WR)      == send_sock
    assert send_sock.close()                    == send_sock
}

##############################################################################
# UDP sendto/recvfrom with IPv4

do {
    const sport = 11007
    const rport = 11008

    const udp_sender   = net.socket(net.AF_INET, net.SOCK_DGRAM)
    const udp_receiver = net.socket(net.AF_INET, net.SOCK_DGRAM)

    assert udp_sender.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("localhost", sport) == udp_sender
    assert udp_receiver.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("localhost", rport) == udp_receiver

    const ping_back = async do {
        while ! udp_receiver.wait() { }

        const received = udp_receiver.recvfrom()

        assert received.port == sport

        const data = base.string(received.data)
        assert data.size > 5
        assert data[:5] == "hello"
        assert data.size < 8

        udp_receiver.sendto(received.address, received.port, "got\(data[5:])")
    }

    var got  = void
    var last = -1

    for const i in base.range(16) {
        assert udp_sender.sendto("localhost", rport, "hello\(i)") == udp_sender
        if udp_sender.wait(0.05) {
            got  = udp_sender.recvfrom()
            last = i
            break
        }
    }

    if os.sysname != "Windows" {
        expect_fail(() => udp_sender.shutdown())
        expect_fail(() => udp_receiver.shutdown())
    }

    assert got
    const data = base.string(got.data)
    assert data.size > 3
    assert data[:3] == "got"
    assert data.size < 6

    const index = base.integer(data[3:])
    assert index >= 0
    assert index <= last

    assert got.port == rport

    ping_back.wait()

    assert udp_sender.close()   == udp_sender
    assert udp_receiver.close() == udp_receiver
}

##############################################################################
# UDP sendto/recvfrom with IPv6

if ipv6 {
    const sport = 11009
    const rport = 11010

    const udp_sender   = net.socket(net.AF_INET6, net.SOCK_DGRAM)
    const udp_receiver = net.socket(net.AF_INET6, net.SOCK_DGRAM)

    assert udp_sender.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("::1", sport) == udp_sender
    assert udp_receiver.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("::1", rport) == udp_receiver

    const ping_back = async do {
        while ! udp_receiver.wait() { }

        const received = udp_receiver.recvfrom()

        assert received.port == sport

        const data = base.string(received.data)
        assert data.size > 5
        assert data[:5] == "hello"
        assert data.size < 8

        udp_receiver.sendto(received.address, received.port, "got\(data[5:])")
    }

    var got  = void
    var last = -1

    for const i in base.range(16) {
        assert udp_sender.sendto("localhost", rport, "hello\(i)") == udp_sender
        if udp_sender.wait(0.05) {
            got  = udp_sender.recvfrom()
            last = i
            break
        }
    }

    if os.sysname != "Windows" {
        expect_fail(() => udp_sender.shutdown())
        expect_fail(() => udp_receiver.shutdown())
    }

    assert got
    const data = base.string(got.data)
    assert data.size > 3
    assert data[:3] == "got"
    assert data.size < 6

    const index = base.integer(data[3:])
    assert index >= 0
    assert index <= last

    assert got.port == rport

    ping_back.wait()

    assert udp_sender.close()   == udp_sender
    assert udp_receiver.close() == udp_receiver
}
