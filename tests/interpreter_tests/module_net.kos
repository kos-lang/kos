# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2023 Chris Dragan

import base
import net
import os
import test_tools.expect_fail

##############################################################################
# Invalid inputs

do {
    expect_fail(() => net.socket(domain = ~net.AF_INET))
    expect_fail(() => net.socket(type = ~net.SOCK_STREAM))
    expect_fail(() => net.socket(protocol = 0x87654123))

    const sock = net.socket()

    expect_fail(() => sock.bind(address = -1))
    expect_fail(() => sock.bind(port = 0x1_0000))

    expect_fail(() => sock.connect(address = -1))
    expect_fail(() => sock.connect(port = 0x1_0000))

    expect_fail(() => sock.listen(-1))
    expect_fail(() => sock.listen(0x1_0000))

    expect_fail(() => sock.getsockopt(~net.SOL_SOCKET, net.SO_REUSEADDR))
    expect_fail(() => sock.getsockopt(net.SOL_SOCKET, ~net.SO_REUSEADDR))

    expect_fail(() => sock.setsockopt(~net.SOL_SOCKET, net.SO_REUSEADDR, true))
    expect_fail(() => sock.setsockopt(net.SOL_SOCKET, ~net.SO_REUSEADDR, true))
}

##############################################################################
# socket.bind()

var ipv6 = true

do {
    net.socket().bind()
    net.socket().bind("")
    net.socket().bind("localhost")
    net.socket().bind("127.0.0.1")
    net.socket().setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("localhost", 11000)
    net.socket().setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("127.0.0.1", 11001)
    net.socket().setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind(port = 11002)

    net.socket(net.AF_INET6).bind()
    net.socket(net.AF_INET6).bind("")
    net.socket(net.AF_INET6).setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind(port = 11003)

    var ok = true
    try {
        net.socket(net.AF_INET6).bind("localhost")
    }
    catch (const e) {
        ipv6 = false
    }
    if ipv6 {
        net.socket(net.AF_INET6).bind("::1")
        net.socket(net.AF_INET6).setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("::1", 11004)
    }
}

##############################################################################

do {
    const port = 11005

    const server_sock = net.socket(net.AF_INET, net.SOCK_STREAM)
    assert server_sock.blocking
    assert server_sock.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true) == server_sock
    assert server_sock.bind("0.0.0.0", port) == server_sock
    assert server_sock.listen()              == server_sock

    const recv_thread = async do {
        const recv_sock = server_sock.accept().socket
        assert recv_sock.blocking
        assert recv_sock instanceof net.socket

        assert server_sock.close() == server_sock

        assert recv_sock.shutdown(net.SHUT_WR) == recv_sock

        const b = recv_sock.recv(128)
        assert typeof b == "buffer"

        assert recv_sock.shutdown(net.SHUT_RD) == recv_sock
        assert recv_sock.close()               == recv_sock

        assert b.size == 5
        assert base.string(b) == "hello"
    }

    const send_sock = net.socket(net.AF_INET, net.SOCK_STREAM)
    assert send_sock.connect("localhost", port) == send_sock
    assert send_sock.send("hello")              == send_sock

    recv_thread.wait()

    assert send_sock.shutdown(net.SHUT_WR)      == send_sock
    assert send_sock.close()                    == send_sock
}

##############################################################################

do {
    const port = 11006

    const server_sock = net.socket()
    server_sock.blocking = false
    assert ! server_sock.blocking
    assert server_sock.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true) == server_sock
    assert server_sock.bind("0.0.0.0", port) == server_sock
    assert server_sock.listen()              == server_sock

    expect_fail(() => server_sock.accept())
    assert ! server_sock.wait(0)

    const recv_thread = async do {
        assert server_sock.wait()
        const recv_sock = server_sock.accept().socket
        recv_sock.blocking = false
        assert ! recv_sock.blocking
        assert recv_sock instanceof net.socket

        assert server_sock.close() == server_sock

        assert recv_sock.shutdown(net.SHUT_WR) == recv_sock

        assert recv_sock.wait(10)

        const b = recv_sock.recv(128)
        assert typeof b == "buffer"

        assert recv_sock.shutdown(net.SHUT_RD) == recv_sock
        assert recv_sock.close()               == recv_sock

        assert b.size == 5
        assert base.string(b) == "world"
    }

    const send_sock = net.socket()
    assert send_sock.connect("localhost", port) == send_sock

    assert send_sock.send("world")         == send_sock

    recv_thread.wait()

    assert send_sock.shutdown(net.SHUT_WR)      == send_sock
    assert send_sock.close()                    == send_sock
}

##############################################################################
# UDP sendto/recvfrom with IPv4

do {
    const sport = 11007
    const rport = 11008

    const udp_sender   = net.socket(net.AF_INET, net.SOCK_DGRAM)
    const udp_receiver = net.socket(net.AF_INET, net.SOCK_DGRAM)

    assert udp_sender.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("localhost", sport) == udp_sender
    assert udp_receiver.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("localhost", rport) == udp_receiver

    const ping_back = async do {
        while ! udp_receiver.wait() { }

        const received = udp_receiver.recvfrom()

        assert received.port == sport

        const data = base.string(received.data)
        assert data.size > 5
        assert data[:5] == "hello"
        assert data.size < 8

        udp_receiver.sendto(received.address, received.port, "got\(data[5:])")
    }

    var got  = void
    var last = -1

    for const i in base.range(16) {
        assert udp_sender.sendto("localhost", rport, "hello\(i)") == udp_sender
        if udp_sender.wait(0.05) {
            got  = udp_sender.recvfrom()
            last = i
            break
        }
    }

    if os.sysname != "Windows" {
        expect_fail(() => udp_sender.shutdown())
        expect_fail(() => udp_receiver.shutdown())
    }

    assert got
    const data = base.string(got.data)
    assert data.size > 3
    assert data[:3] == "got"
    assert data.size < 6

    const index = base.integer(data[3:])
    assert index >= 0
    assert index <= last

    assert got.port == rport

    ping_back.wait()

    assert udp_sender.close()   == udp_sender
    assert udp_receiver.close() == udp_receiver
}

##############################################################################
# UDP sendto/recvfrom with IPv6

do {
    const sport = 11009
    const rport = 11010

    const udp_sender   = net.socket(net.AF_INET6, net.SOCK_DGRAM)
    const udp_receiver = net.socket(net.AF_INET6, net.SOCK_DGRAM)

    assert udp_sender.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("::1", sport) == udp_sender
    assert udp_receiver.setsockopt(net.SOL_SOCKET, net.SO_REUSEADDR, true).bind("::1", rport) == udp_receiver

    const ping_back = async do {
        while ! udp_receiver.wait() { }

        const received = udp_receiver.recvfrom()

        assert received.port == sport

        const data = base.string(received.data)
        assert data.size > 5
        assert data[:5] == "hello"
        assert data.size < 8

        udp_receiver.sendto(received.address, received.port, "got\(data[5:])")
    }

    var got  = void
    var last = -1

    for const i in base.range(16) {
        assert udp_sender.sendto("localhost", rport, "hello\(i)") == udp_sender
        if udp_sender.wait(0.05) {
            got  = udp_sender.recvfrom()
            last = i
            break
        }
    }

    if os.sysname != "Windows" {
        expect_fail(() => udp_sender.shutdown())
        expect_fail(() => udp_receiver.shutdown())
    }

    assert got
    const data = base.string(got.data)
    assert data.size > 3
    assert data[:3] == "got"
    assert data.size < 6

    const index = base.integer(data[3:])
    assert index >= 0
    assert index <= last

    assert got.port == rport

    ping_back.wait()

    assert udp_sender.close()   == udp_sender
    assert udp_receiver.close() == udp_receiver
}
