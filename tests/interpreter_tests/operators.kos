# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2020 Chris Dragan

fun expect_fail(function)
{
    var failed = false
    try {
        function()
    }
    catch const e {
        failed = true
    }
    assert failed
}

##############################################################################
# typeof
assert typeof 0        == "integer"
assert typeof 0.0      == "float"
assert typeof 0e0      == "float"
assert typeof ""       == "string"
assert typeof void     == "void"
assert typeof false    == "boolean"
assert typeof {}       == "object"
assert typeof []       == "array"
assert typeof (()=>0)  == "function"
assert typeof class {} == "class"
do {
    fun double_typeof(x)
    {
        x = typeof typeof x
        return x
    }
    assert double_typeof(1)  == "string"
    assert double_typeof([]) == "string"
}

##############################################################################
# +
do {
    const a = 1
    const b = 2
    const c = a + b
    assert c == 3
    assert typeof c == "integer"
}
do {
    const a = 0x7FFFFFFFFFFFFFFE
    const b = 1
    const c = a + b
    assert c == 0x7FFFFFFFFFFFFFFF
    assert typeof c == "integer"
}
do {
    const a = 0x7FFFFFFFFFFFFFFF
    const b = 2
    const c = a + b
    assert c == -0x7FFFFFFFFFFFFFFF
    assert typeof c == "integer"
}
do {
    const a = 0x7FFFFFFFFFFFFFFF
    const b = 1
    const c = a + b
    assert c == 0x8000000000000000
    assert typeof c == "integer"
}
do {
    const a = 1
    const b = 0.25
    const c = a + b
    assert c == 1.25
    assert typeof c == "float"
}
do {
    const a = 0.5
    const b = 2
    const c = a + b
    assert c == 2.5
    assert typeof c == "float"
}
do {
    const a = "abc"
    const b = "def"
    const c = a + b
    assert c == "abcdef"
    assert typeof c == "string"
    assert a == "abc"
    assert b == "def"
}
do {
    const a = (()=>1)()
    const b = +(2 + a)
    assert b == 3
    assert a == 1
}
expect_fail(fun {
    const a = 1
    const b = (()=>"abc")()
    const c = a + b
})
expect_fail(fun {
    const a = 1
    const b = (()=>void)()
    const c = a + b
})
expect_fail(fun {
    const a = (()=>true)()
    const b = (()=>false)()
    const c = a + b
})

##############################################################################
# -
do {
    const a = 1
    const b = 2
    const c = a - b
    assert c == -1
    assert typeof c == "integer"
}
do {
    const a = 0x8000000000000000
    const b = 1
    const c = a - b
    assert c == 0x7FFFFFFFFFFFFFFF
    assert typeof c == "integer"
}
do {
    const a = 3
    const b = 2.0
    const c = a - b
    assert c == 1
    assert typeof c == "float"
}
do {
    const a = 3.0
    const b = 2
    const c = a - b
    assert c == 1
    assert typeof c == "float"
    assert a == 3
    assert b == 2
}
do {
    const a = (()=>1)()
    const b = -(a + 2)
    assert b == -3
    assert a == 1
}

# positive zero equals negative zero
do {
    const positive = 0.0
    assert typeof positive == "float"

    const negative = (x=>-x)(positive)
    assert typeof negative == "float"

    assert positive == negative

    const not_equal = positive != negative
    assert ! not_equal
}

expect_fail(fun {
    const a = (()=>"abc")()
    const b = (()=>"xyz")()
    const c = a - b
})
expect_fail(fun {
    const a = (()=>"abc")()
    const b = 0
    const c = a - b
})

##############################################################################
# *
do {
    const a = 10
    const b = 2
    const c = a - b * 3
    assert c == 4
    assert typeof c == "integer"
}
do {
    const a = 1.0
    const b = 2
    const c = a * b
    assert c == 2
    assert typeof c == "float"
}
do {
    const a = 1
    const b = 2.0
    const c = a * b
    assert c == 2
    assert typeof c == "float"
    assert a == 1
    assert b == 2
}
expect_fail(fun {
    const a = (()=>"a")()
    const b = 5
    const c = a * b
})

##############################################################################
# /
do {
    const a = 10
    const b = 1
    const c = a / 2 + b
    assert c == 6
    assert typeof c == "integer"
}
do {
    const a = 10
    const b = 3
    const c = a / b
    assert c == 3
    assert typeof c == "integer"
    assert a == 10
    assert b == 3
}
do {
    const a = 10
    const b = 4.0
    const c = a / b
    assert c == 2.5
    assert typeof c == "float"
}
do {
    const a = 10.0
    const b = 4
    const c = a / b
    assert c == 2.5
    assert typeof c == "float"
}
do {
    const a  = 10
    const b  = (()=>0)()
    var   ok = false
    try {
        const c = a / b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a  = 10.0
    const b  = (()=>0)()
    var   ok = false
    try {
        const c = a / b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a  = 10
    const b  = (()=>0.0)()
    var   ok = false
    try {
        const c = a / b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a  = 1.0
    const b  = (()=>-0.0)()
    var   ok = false
    try {
        const c = a / b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const bi = (() => 0) ()
    const bf = (() => 0.0) ()
    expect_fail(() => 10 / bi)
    expect_fail(() => 10 / bf)
}

##############################################################################
# %
do {
    const a = 10
    const b = 4
    const c = a % b
    assert c == 2
    assert typeof c == "integer"
}
do {
    const a = 10
    const b = 4.0
    const c = a % b
    assert c == 2
    assert typeof c == "float"
    assert a == 10
    assert b == 4
}
do {
    const a = 10.0
    const b = 4
    const c = a % b
    assert c == 2
    assert typeof c == "float"
}
do {
    const a  = 10
    const b  = (()=>0)()
    var   ok = false
    try {
        const c = a % b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a  = 10.0
    const b  = (()=>0)()
    var   ok = false
    try {
        const c = a % b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a  = 10
    const b  = (()=>0.0)()
    var   ok = false
    try {
        const c = a % b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a  = 1.0
    const b  = (()=>-0.0)()
    var   ok = false
    try {
        const c = a % b
    }
    catch (const e) {
        ok = true
    }
    assert ok
}
do {
    const a = -1e-100
    const b = 1e100
    const c = a % b
    assert c == a
}
do {
    const a = (()=>-1e-100)()
    const b = 1e100
    const c = a % b
    assert c == a
}
do {
    const a = 5.0 % -4.0
    assert a == 1

    const b = -5.0 % 4.0
    assert b == -1
}
do {
    const a = (()=>5.0)()
    const b = a % -4.0
    assert b == 1
}
do {
    const a = (()=>-5.0)()
    const b = a % 4.0
    assert b == -1
}
do {
    const a = 5 % -4
    assert a == 1

    const b = -5 % 4
    assert b == -1
}
do {
    const a = (()=>5)()
    const b = a % -4
    assert b == 1
}
do {
    const a = (()=>-5)()
    const b = a % 4
    assert b == -1
}
do {
    const bi = (() => 0) ()
    const bf = (() => 0.0) ()
    expect_fail(() => 10 % bi)
    expect_fail(() => 10 % bf)
}

##############################################################################
# + * ()
do {
    const a = 10
    const b = 1
    const c = (a + 1) * 2 + 3 * b
    assert c == 25
    assert typeof c == "integer"
}

do {
    var a = 2
    a = (a + a) * (a + 1) + a
    assert typeof a == "integer"
    assert a        == 14
}

##############################################################################
# / *
do {
    const a = 10
    const c = a / 2 * 3
    assert c == 15
    assert typeof c == "integer"
}
do {
    const a = 10
    const c = a / (2 * 3)
    assert c == 1
    assert typeof c == "integer"
}

##############################################################################
# mixed types
do {
    const a = 2.0 * (()=>0x4000000000000000)()
    const b = (()=>0x4000000000000000)()
    const c = 0x4000000000000000
    const d = (a + b) / c
    assert typeof d == "float"
    assert d        == 3
}
do {
    const a = 2.0 * (()=>0x4000000000000000)()
    const b = 0x4000000000000000
    const c = a - b
    assert typeof c == "float"
    assert 0x4000000000000000 == c
}
do {
    const a = (()=>42)()
    const b = 0x4000000000000000
    const c = a % b
    assert typeof c == "integer"
    assert c        == 42
}
do {
    const a = (()=>123.25)()
    const b = 0x4000000000000000
    const c = a % b
    assert typeof c == "float"
    assert c        == 123.25
}
do {
    const a = (()=>0x4000000000000005)()
    const b = 16
    const c = a % b
    assert typeof c == "integer"
    assert c        == 5
}

##############################################################################
# ||
do {
    const _void  = void
    const _false = false
    const _true  = true
    assert (_void || _false) == false
    assert (_void || _true)  == true
    assert (_false || _true) == true
    assert (_true || _false) == true
    assert (false || "abc")  == "abc"
    assert _void  == void
    assert _false == false
    assert _true  == true
}

do {
    const a = false
    const b = true
    assert a || b
    assert ! a
    assert b
}

do {
    const a = true
    const b = false
    assert a || b
    assert a
    assert ! b
}

do {
    fun invoked(status, ret)
    {
        assert status
        return ret
    }

    const a = invoked(true, 8) || invoked(false, 9)
    assert a == 8
    const b = invoked(true, 0) || invoked(true, 10)
    assert b == 10
    const c = invoked(true, 0) || invoked(true, false)
    assert c == false
}

do {
    var   a = 0
    const b = (()=>42)()
    a = a || b
    assert a == 42
}

do {
    fun choose(obj)
    {
        const x = obj.x
        const y = x || obj.y
        return [x, y]
    }

    do {
        const a, b = choose({x: 2, y: 3})
        assert a == 2
        assert b == 2
    }

    do {
        const a, b = choose({x: 0, y: 4})
        assert a == 0
        assert b == 4
    }
}

##############################################################################
# &&
do {
    const _false = false
    const _true  = true
    assert (_true && "xyz") == "xyz"
    assert (_false && "xyz") == false
    assert _false == false
    assert _true  == true
}

do {
    fun invoked(status, ret)
    {
        assert status
        return ret
    }

    const a = invoked(true, 0) && invoked(false, 8)
    assert a == 0

    const b = invoked(true, 9) && invoked(true, false)
    assert b == false

    const c = invoked(true, 10) && invoked(true, 11)
    assert c == 11
}

do {
    fun choose(obj)
    {
        const x = obj.x
        const y = x && obj.y
        return [x, y]
    }

    do {
        const a, b = choose({x: 2, y: 3})
        assert a == 2
        assert b == 3
    }

    do {
        const a, b = choose({x: 0, y: 4})
        assert a == 0
        assert b == 0
    }
}

##############################################################################
# ?:
do {
    const _false = false
    const _true  = true
    assert (_true ? 1 : 2) == 1
    assert (_false ? 1 : 2) == 2
    assert _false == false
    assert _true  == true
}

do {
    const _false = false
    const a      = "a"
    const b      = "b"
    const c      = _false ? a : b
    assert c      == "b"
    assert _false == false
    assert a      == "a"
    assert b      == "b"
}

do {
    fun invoked(status, ret)
    {
        assert status
        return ret
    }

    const a = invoked(true, true) ? invoked(true, 8) : invoked(false, 10)
    assert a == 8

    const b = invoked(true, false) ? invoked(false, 6) : invoked(true, 7)
    assert b == 7
}

##############################################################################
# & | ^ ~
do {
    const a = 0x101
    const b = 0x011
    const c = a ^ b
    assert c == 0x110
    assert typeof c == "integer"
    assert a == 0x101
    assert b == 0x011
}
do {
    const a = 0x8F00000000000000
    const b = 0xC0F0000000000000
    const c = a ^ b
    assert c == 0x4FF0000000000000
    assert typeof c == "integer"
}
do {
    const a = 6.5
    const b = 3.2
    const c = a ^ b
    assert c == 5
    assert typeof c == "integer"
}
do {
    const a = 0x101
    const b = 0x011
    const c = a | b
    assert c == 0x111
    assert typeof c == "integer"
    assert a == 0x101
    assert b == 0x011
}
do {
    const a = 1.5
    const b = -15.2
    const c = a | b
    assert c == 0xFFFFFFFFFFFFFFF1
    assert typeof c == "integer"
}
do {
    const a = 0x4
    const b = -16
    const c = a | b
    assert c == 0xFFFFFFFFFFFFFFF4
    assert typeof c == "integer"
}
do {
    const a = (()=>8)()
    const b = 10
    const c = a | b
    assert c == 10
}
do {
    const a = 0x1001
    const b = 0x1100
    const c = a & b
    assert c == 0x1000
    assert typeof c == "integer"
    assert a == 0x1001
    assert b == 0x1100
}
do {
    const a = -2
    const b = 0xF00000000000000F
    const c = a & b
    assert c == 0xF00000000000000E
    assert typeof c == "integer"
}
do {
    const a = 0x100
    const b = -16.2
    const c = a & b
    assert c == 0x100
    assert typeof c == "integer"
}
do {
    const a = -2
    const c = ~a
    assert c == 1
    assert typeof c == "integer"
}
do {
    const a = 1.111
    const c = ~a
    assert c == -2
    assert typeof c == "integer"
}
do {
    const a = 0B10000000000000000000000000000001
    const b = 0b11111111111111111111111111111111
    const c = a ^ b
    assert typeof c == "integer"
    assert c        == 0x7FFFFFFE
}
do {
    var a = (()=>0xFFFFFFFFFFFFFFFE)()
    a = ~a
    assert a == 1
}
do {
    fun double_neg(x)
    {
        x = ~~x
        return x
    }
    assert double_neg(1)    == 1
    assert double_neg(10)   == 10
    assert double_neg(-100) == -100
}

##############################################################################
# !
do {
    const a = false
    const c = ! a
    assert c == true
    assert a == false
}
do {
    const a = true
    const c = ! a
    assert c == false
}
do {
    const a = 0
    const c = ! a
    assert c == true
    assert a == 0
}
do {
    const a = 0e0
    const c = ! a
    assert c == true
}
do {
    const a = 10
    const c = ! a
    assert c == false
}
do {
    fun double_neg(x)
    {
        x = !!x
        return x
    }
    assert double_neg(false) == false
    assert double_neg(true)  == true
    assert double_neg(void)  == false
    assert double_neg(0)     == false
    assert double_neg(0.0)   == false
    assert double_neg(1)     == true
    assert double_neg([])    == true
}

##############################################################################
# <<
do {
    const a = 1
    const b = 3
    const c = a << b
    assert c == 8
    assert typeof c == "integer"
    assert a == 1
    assert b == 3
}
do {
    const a = 0x1000000000000000
    const b = 3
    const c = a << b
    assert c == 0x8000000000000000
    assert typeof c == "integer"
}
do {
    const a = 1
    const b = 63
    const c = a << b
    assert c == 0x8000000000000000
    assert typeof c == "integer"
}
do {
    const a = 0x1000000000000000
    const b = 4
    const c = a << b
    assert c == 0
    assert typeof c == "integer"
}
do {
    const a = 0x101
    const b = 64
    const c = a << b
    assert c == 0
    assert typeof c == "integer"
}
do {
    const a = 0x101
    const b = -1
    const c = a << b
    assert c == 0x80
    assert typeof c == "integer"
}
do {
    const a = 0x8000000000000000
    const b = -15
    const c = a << b
    assert c == 0xFFFF000000000000
    assert typeof c == "integer"
}
do {
    const a = (()=>0x8000000000000000)()
    const b = -15
    const c = a << b
    assert c == 0xFFFF000000000000
    assert typeof c == "integer"
}
do {
    const a = 0x8000000000000000
    const b = -64
    const c = a << b
    assert c == -1
    assert typeof c == "integer"
}
do {
    const a = (()=>0x8000000000000000)()
    const b = -64
    const c = a << b
    assert c == -1
    assert typeof c == "integer"
}
do {
    const a = 0x4000000000000000
    const b = -62
    const c = a << b
    assert c == 1
    assert typeof c == "integer"
}
do {
    const a = 0x4000000000000000
    const b = -64
    const c = a << b
    assert c == 0
    assert typeof c == "integer"
}
do {
    const a = 3.01
    const b = 1.01
    const c = a << b
    assert c == 6
    assert typeof c == "integer"
}
do {
    const a = 3.99
    const b = 1.99
    const c = a << b
    assert c == 6
    assert typeof c == "integer"
}
do {
    const a = -2.1
    const b = 1.99
    const c = a << b
    assert c == -6
    assert typeof c == "integer"
}

##############################################################################
# >>
do {
    const a = 16
    const b = 2
    const c = a >> b
    assert c == 4
    assert typeof c == "integer"
    assert a == 16
    assert b == 2
}
do {
    const a = 0x8800000000000000
    const b = 4
    const c = a >> b
    assert c == 0xF880000000000000
    assert typeof c == "integer"
}
do {
    const a = 0x8000000000000000
    const b = 62
    const c = a >> b
    assert c == -2
    assert typeof c == "integer"
}
do {
    const a = 0x8000000000000000
    const b = 63
    const c = a >> b
    assert c == -1
    assert typeof c == "integer"
}
do {
    const a = 0x8000000000000000
    const b = 64
    const c = a >> b
    assert c == -1
    assert typeof c == "integer"
}
do {
    const a = (()=>0x8000000000000000)()
    const b = 64
    const c = a >> b
    assert c == -1
    assert typeof c == "integer"
}
do {
    const a = 1
    const b = -62
    const c = a >> b
    assert c == 0x4000000000000000
    assert typeof c == "integer"
}
do {
    const a = (()=>1)()
    const b = -62
    const c = a >> b
    assert c == 0x4000000000000000
    assert typeof c == "integer"
}
do {
    const a = 1
    const b = -63
    const c = a >> b
    assert c == 0x8000000000000000
    assert typeof c == "integer"
}
do {
    const a = 1
    const b = -64
    const c = a >> b
    assert c == 0
    assert typeof c == "integer"
}
do {
    const a = 6.5
    const b = 1.5
    const c = a >> b
    assert c == 3
    assert typeof c == "integer"
}

##############################################################################
# >>>
do {
    const a = 0x8001000000000000
    const b = 48
    const c = a >>> b
    assert c == 0x8001
    assert typeof c == "integer"
    assert a == 0x8001000000000000
    assert b == 48
}
do {
    const a = 0x8000000000000000
    const b = 64
    const c = a >>> b
    assert c == 0
    assert typeof c == "integer"
}
do {
    const a = (()=>0x8000000000000000)()
    const b = 64
    const c = a >>> b
    assert c == 0
    assert typeof c == "integer"
}
do {
    const a = (()=>0x8000000000000001)()
    const b = -1
    const c = a >>> b
    assert typeof c == "integer"
    assert c        == 2
}
do {
    assert 0x10 >>>  1 == 8
    assert 0x10 >>> -1 == 0x20
    assert 1    >>> 64 == 0
    assert 0x8000_0000_0000_0000 >>> 64 == 0
}

##############################################################################
# ==, !=
do {
    var different_values = [ void, false, true, 0, 1, -1, "", "0", [], [0], {}, {"0":0} ]
    const len = different_values.size
    for var y = 0; y < len; y += 1 {
        const a = different_values[y]
        for var x = 0; x < len; x += 1 {
            const b   = different_values[x]
            const c   = x == y
            const eq  = a == b
            const neq = a != b
            assert eq == c
            assert neq == ! c
        }
    }
}

do {
    const a = 1 + 2
    const b = 4 - 1
    assert a == b
    assert a == 3
    assert b == 3
}

do {
    const a = 5 + 2
    const b = 10 - 1
    assert a != b
    assert a == 7
    assert b == 9
}

##############################################################################
# ==
do {
    assert 2     == (()=>2)()
    assert 3.0   == (()=>3)()
    assert 4.0   == (()=>4.0)()
    assert 5.0   == (()=>5)()
    assert 6     == (()=>6.0)()
    assert "abc" == (()=>"abc")()
    assert void  == (()=>void)()
    assert false == (()=>false)()
    assert true  == (()=>true)()
    assert []    == (()=>[])()

    const array = fun { const a = [ 1, 2, 3 ] ; return ()=>a } ()
    assert typeof array() == "array"
    assert array().size   == 3
    assert array()[1]     == 2
    assert array()        == array()
}

##############################################################################
# !=
do {
    assert 2     != (()=>3)()
    assert 3.0   != (()=>4)()
    assert 4.0   != (()=>5.0)()
    assert "abc" != (()=>"Abc")()
    assert void  != (()=>true)()
    assert false != (()=>true)()
    assert []    != (()=>[0])()
    assert {}    != (()=>{})()
}

##############################################################################
# <
do {
    assert 1     < (()=>2)()
    assert 3.0   < (()=>4)()
    assert 5     < (()=>6.0)()
    assert "aa"  < (()=>"aaa")()
    assert false < true
    assert ! ([] < (()=>[])())
    assert ! ([0]< (()=>[])())
    assert []    < (()=>[0])()
}

##############################################################################
# <=
do {
    assert 1     <= (()=>2)()
    assert 3.0   <= (()=>4)()
    assert 5     <= (()=>6.0)()
    assert "aa"  <= (()=>"aaa")()
    assert "bb"  <= (()=>"bb")()
    assert false <= (()=>true)()
    assert true  <= (()=>true)()
    assert false <= (()=>false)()
    assert void  <= (()=>void)()
    assert []    <= (()=>[])()
    assert ! ([0]<= (()=>[])())
    assert []    <= (()=>[0])()
}

##############################################################################
# >
do {
    assert 2     > (()=>1)()
    assert 4.0   > (()=>3)()
    assert 6     > (()=>5.0)()
    assert "aaa" > (()=>"aa")()
    assert true  > false
}

##############################################################################
# >=
do {
    assert 2     >= (()=>1)()
    assert 4.0   >= (()=>3)()
    assert 6     >= (()=>5.0)()
    assert "aaa" >= (()=>"aa")()
    assert "bb"  >= (()=>"bb")()
    assert true  >= (()=>false)()
    assert true  >= (()=>true)()
    assert false >= (()=>false)()
    assert void  >= (()=>void)()
}

##############################################################################
# if, !
do {
    var true_values  = [ true, 1, -1, 0x8000000000000000, "", "0", "false", [], [false], {} ]
    const len = true_values.size
    for var i = 0; i < len; i+= 1 {
        const value = true_values[i]
        assert value
        assert !! value
        if ! value { assert false }
    }

    assert ! void
    if void { assert false }

    assert ! false
    if false { assert false }

    assert ! 0
    if 0 { assert false }

    assert ! 0.0
    if 0.0 { assert false }
}

##############################################################################
# +=
do {
    var   a = 1
    const b = 2
    a += b
    assert a == 3
    assert typeof a == "integer"
    assert b == 2
}
do {
    var   a = 0x7FFFFFFF
    const b = 1
    a += b
    assert a == 0x80000000
    assert typeof a == "integer"
}
do {
    var   a = -1
    const b = 1.0
    a += b
    assert a == 0
    assert typeof a == "float"
}
do {
    var   a = 20.0
    const b = -1
    a += b
    assert a == 19
    assert typeof a == "float"
}
do {
    var   a = "abc"
    const b = "xyz\x{FFFF}"
    a += b
    assert a == "abcxyz￿"
    assert typeof a == "string"
}
do {
    const o = { b: 1 }
    const p = "b"
    o.b += 2
    assert o.b == 3
    assert typeof o.b == "integer"
    o[p] += -1
    assert o.b == 2

    const a = [ 10 ]
    a[0] += 5
    assert a[0] == 15
}

##############################################################################
# -=
do {
    var   a = 1
    const b = 2
    a -= b
    assert a == -1
    assert typeof a == "integer"
    assert b == 2
}
do {
    var   a = 0x7FFFFFFF
    const b = -1
    a -= b
    assert a == 0x80000000
    assert typeof a == "integer"
}
do {
    var   a = -1
    const b = 1.0
    a -= b
    assert a == -2
    assert typeof a == "float"
}
do {
    var   a = 20.0
    const b = -1
    a -= b
    assert a == 21
    assert typeof a == "float"
}
expect_fail(fun {
    var   a = "abc"
    const b = (()=>"xyz")()
    a -= b
})
do {
    const o = { b: 8 }
    const p = "b"
    o.b -= 2
    assert o.b == 6
    assert typeof o.b == "integer"
    o[p] -= 1
    assert o.b == 5

    const a = [ 10 ]
    a[0] -= 5
    assert a[0] == 5
}

##############################################################################
# *=
do {
    var   a = 7
    const b = -5
    a *= b
    assert a == -35
    assert typeof a == "integer"
    assert b == -5
}
expect_fail(fun {
    var a = "x"
    a *= 5
})
do {
    const o = { b: 3 }
    const p = "b"
    o.b *= 5
    assert o.b == 15
    assert typeof o.b == "integer"
    o[p] *= 2
    assert o.b == 30

    const a = [ 6 ]
    a[0] *= 8
    assert a[0] == 48
}

##############################################################################
# /=
do {
    var   a = 10
    const b = 3
    a /= b
    assert a == 3
    assert typeof a == "integer"
    assert b == 3
}
do {
    var   a = 10
    const b = 4.0
    a /= b
    assert a == 2.5
    assert typeof a == "float"
}

##############################################################################
# %=
do {
    var   a = 10
    const b = 3
    a %= b
    assert a == 1
    assert typeof a == "integer"
    assert b == 3
}
do {
    var   a = 10
    const b = 3.0
    a %= b
    assert a == 1
    assert typeof a == "float"
}

##############################################################################
# &=
do {
    var   a = 0xABCB
    const b = 15
    a &= b
    assert a == 11
    assert typeof a == "integer"
    assert b == 15
}

##############################################################################
# |=
do {
    var   a = 1
    const b = 16.1
    a |= b
    assert a == 17
    assert typeof a == "integer"
    assert b == 16.1
}

##############################################################################
# ^=
do {
    var   a = 1.1
    const b = 3
    a ^= b
    assert a == 2
    assert typeof a == "integer"
    assert b == 3
}

##############################################################################
# <<=
do {
    var a = 1.1
    a <<= 10
    assert a == 1024
    assert typeof a == "integer"
}

##############################################################################
# >>=
do {
    var a = 1024*1024
    a >>= 10
    assert a == 1024
    assert typeof a == "integer"
}
do {
    var a = 0xFFFF_FFFF_0000_0000
    a >>= 17
    assert a == 0xFFFF_FFFF_FFFF_8000
    assert typeof a == "integer"
}

##############################################################################
# >>>=
do {
    var a = -1
    a >>>= 32
    assert a == 0xFFFFFFFF
    assert typeof a == "integer"
}

##############################################################################
# Numeric literals with underscores
do {
    assert 0b____1000__0000_0000_0000____ == 0x___80__00___
    const _1024 = 1___024__
    assert _1024 == 1___.___00_0_00E___3_ + 24
}

##############################################################################
# typeof's arguments cannot be optimized-out
do {
    fun get_type()
    {
        var cnt = 0

        fun increment
        {
            cnt += 1
        }

        const type = typeof [ increment() ]

        return [ cnt, type ]
    }

    const cnt, type = get_type()

    assert cnt  == 1
    assert type == "array"
}

##############################################################################
# multi-assignment
do {
    const input = [ "a", "b", "c", "d" ]
    var obj = { }
    obj.a, obj.b, obj.c, obj.d = input
    assert obj.a == "a"
    assert obj.b == "b"
    assert obj.c == "c"
    assert obj.d == "d"

    obj = { }
    obj.a, void, obj.b, obj.a = input
    assert obj.a == "d"
    assert obj.b == "c"

    obj = { }
    var ary = [ 0, 0 ]
    var c = void
    void, ary[1], obj["a"], c = input
    assert ary[0] == 0
    assert ary[1] == "b"
    assert obj.a == "c"
    assert c == "d"
}
