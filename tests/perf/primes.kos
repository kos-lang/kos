#!/usr/bin/env kos

import base: buffer, print, range

# Prime number generator with a fixed-size sieve
fun primes(max_number)
{
    yield 2 # Yield the only even prime number from the generator

    # Fill buffer with '0' values.
    # We set size to half of the max number checked, because
    # we ignore even numbers and only check odd numbers.
    const len   = max_number >> 1
    const sieve = buffer(len)

    for const value in range(3, max_number, 2) {

        const idx = value >> 1

        # Yield this number as prime if it hasn't been sieved-out
        if ! sieve[idx] {

            yield value

            # Mark all multiplicities of this prime as non-primes
            var i = idx + value
            while i < len {
                sieve[i] = 1 # Mark a non-prime
                i += value
            }
        }
    }
}

var count = 0
var last  = void

for var value in primes(15485864) {
    last  = value
    count += 1
}

print("\(count)th prime is \(last)")

assert count == 1000000
assert last  == 15485863
