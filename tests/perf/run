#!/bin/sh

# Copyright (c) 2014-2019 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

set -e

UNAME=$(uname -s)
MAKE=make

if [ -z "$JOBS" ]; then
    case "$UNAME" in
        Linux)                                   JOBS="$(grep -c ^processor /proc/cpuinfo)" ;;
        Darwin|FreeBSD|OpenBSD|NetBSD|DragonFly) JOBS="$(sysctl -n hw.ncpu)" ;;
        CYGWIN*|MINGW*|MSYS*)                    JOBS="$NUMBER_OF_PROCESSORS" ; UNAME="Windows" ;;
        Haiku|BeOS)                              JOBS="$(sysinfo | grep -c 'CPU #')" ;;
        *)                                       JOBS=2 ;;
    esac
    [ $JOBS -lt 32 ] || JOBS=32
fi

case "$UNAME" in
    FreeBSD|OpenBSD|NetBSD|DragonFly)
        MAKE=gmake
        ;;
esac

echo "Using $JOBS jobs"

die()
{
    echo "$@"
    exit 1
}

KOS=1
PY=1
JS=1

if [ -n "$JS_INTERPRETER" ]; then
    [ -x "$JS_INTERPRETER" ] || JS=0
else
    JS=0
fi

if [ $# -gt 0 ]; then
    KOS=0
    PY=0
    JS=0
    while [ $# -gt 0 ]; do
        case "$1" in
            kos) KOS=1 ;;
            py)  PY=1  ;;
            js)  JS=1  ;;
            *)   die "Invalid option: $1"
        esac
        shift
    done
fi

if [ $JS = 1 ]; then
    [ -n "$JS_INTERPRETER" ] || die "JS_INTERPRETER not specified"
    [ -x "$JS_INTERPRETER" ] || die "$JS_INTERPRETER is not accessible"
fi

rm -rf Out

$MAKE -k -j "$JOBS" time_us build.interpreter native=1

runtest()
{
    local LOOPS
    LOOPS="$1"
    shift

    local SCRIPT
    SCRIPT="$1"

    if echo "$SCRIPT" | grep -q "\.kos$"; then [ $KOS = 1 ] || return 0; fi
    if echo "$SCRIPT" | grep -q "\.py$" ; then [ $PY  = 1 ] || return 0; fi
    if echo "$SCRIPT" | grep -q "\.js$" ; then [ $JS  = 1 ] || return 0; fi

    local PREFIX
    PREFIX=""

    echo "$SCRIPT" | grep -q "\.kos$" && PREFIX=Out/release/interpreter/kos
    echo "$SCRIPT" | grep -q "\.js$"  && PREFIX="$JS_INTERPRETER"

    tests/perf/measure -t "$1" -n "$LOOPS" $PREFIX "$@"
}

runtest 20 doc/extract_docs.kos modules/*.kos modules/*.c

runtest 10 tests/perf/primes.kos
runtest 10 tests/perf/primes.py
runtest 10 tests/perf/primes.js

runtest 10 tests/perf/array_for_in.kos
runtest 10 tests/perf/array_for_in.py
runtest 10 tests/perf/array_for_in.js

runtest 10 tests/perf/array_index_iter.kos
runtest 10 tests/perf/array_index_iter.py
runtest 10 tests/perf/array_index_iter.js

runtest 10 tests/perf/sort_strings.kos
runtest 10 tests/perf/sort_strings.py
runtest 10 tests/perf/sort_strings.js

runtest 10 tests/perf/fib_class_flat.kos
runtest 10 tests/perf/fib_class.py
runtest 10 tests/perf/fib_class_flat.js

runtest 10 tests/perf/fib_class_proto.kos
runtest 10 tests/perf/fib_class_proto.js
