repeat {
    if a() { break;    }
    else   { continue; }
}
while true;

while true {
    if b() { break;    }
    else   { continue; }
}

for (;;) {
    if c() { break;    }
    else   { continue; }
}

@ 0

(scope 1 1
    (repeat 1 1 repeat
        (scope 1 8 {
            (if 2 5 if
                (invocation 2 9 paren_open (identifier 2 8 a))
                (scope 2 12 { (break 2 14 break))
                (scope 3 12 { (continue 3 14 continue))
        ))
        (bool 5 7 true)
    )
    (while 7 1 while
        (bool 7 7 true)
        (scope 7 12 {
            (if 8 5 if
                (invocation 8 9 paren_open (identifier 8 8 b))
                (scope 8 12 { (break 8 14 break))
                (scope 9 12 { (continue 9 14 continue))
    )))
    (for 12 1 for
        (empty 12 7 ;)
        (empty 12 8 paren_close)
        (scope 12 10 {
            (if 13 5 if
                (invocation 13 9 paren_open (identifier 13 8 c))
                (scope 13 12 { (break 13 14 break))
                (scope 14 12 { (continue 14 14 continue))
    )))
)

@------------------------------------------------------------------------------
break; # Unexpected break

@ 10 1 1

@------------------------------------------------------------------------------
continue; # Unexpected continue

@ 10 1 1

@------------------------------------------------------------------------------
fun a(b)
{
    if b {
        break; # Unexpected break
    }
}

@ 10 4 9

@------------------------------------------------------------------------------
fun a(b)
{
    try {
        continue; # Unexpected continue
    }
    catch var e {
    }
}

@ 10 4 9

@------------------------------------------------------------------------------
with const a = b {
    if a.c {
        break; # Unexpected break
    }
}

@ 10 3 9

@------------------------------------------------------------------------------
switch a {
    0 {
        continue;
    }
}

@ 10 3 9
