switch a ? b[c+2] : d
{
    case true: {
        print(1);
    }
    case void {
        print(2);
    }
    case "string": {
        print (3);
        fallthrough;
    }
    case 1.1 : {
        print(4);
    }
    default : {
        print(5);
    }
    case a||b||c : {
        print(6);
    }
}

@ 0

(scope 1 1
    (switch 1 1 switch
        (operator 1 10 ?:
            (identifier 1 8 a)
            (refinement 1 13 [
                (identifier 1 12 b)
                (operator 1 15 +
                    (identifier 1 14 c)
                    (number 1 16 2)
            ))
            (identifier 1 21 d)
        )
        (case 3 5 case
            (bool 3 10 true)
            (scope 3 16 {
                (invocation 4 14 paren_open
                    (identifier 4 9 print)
                    (number 4 15 1)
        )))
        (case 6 5 case
            (void 6 10 void)
            (scope 6 15 {
                (invocation 7 14 paren_open
                    (identifier 7 9 print)
                    (number 7 15 2)
        )))
        (case 9 5 case
            (string 9 10 "string")
            (scope 9 20 {
                (invocation 10 15 paren_open
                    (identifier 10 9 print)
                    (number 10 16 3)
            ))
            (fallthrough 11 9 fallthrough)
        )
        (case 13 5 case
            (number 13 10 1.1)
            (scope 13 16 {
                (invocation 14 14 paren_open
                    (identifier 14 9 print)
                    (number 14 15 4)
        )))
        (default 16 5 default
            (empty 16 5 default)
            (scope 16 15 {
                (invocation 17 14 paren_open
                    (identifier 17 9 print)
                    (number 17 15 5)
        )))
        (case 19 5 case
            (operator 19 11 ||
                (identifier 19 10 a)
                (operator 19 14 ||
                    (identifier 19 13 b)
                    (identifier 19 16 c)
            ))
            (scope 19 20 {
                (invocation 20 14 paren_open
                    (identifier 20 9 print)
                    (number 20 15 6)
        )))
))

@------------------------------------------------------------------------------
switch (a)
{
    case b+c{fallthrough;}
    case d:{
        break}
    case e:{
        break}
    default {
        break}
}

@ 0

(scope 1 1
    (switch 1 1 switch
        (identifier 1 9 a)
        (case 3 5 case
            (operator 3 11 +
                (identifier 3 10 b)
                (identifier 3 12 c)
            )
            (scope 3 13 {)
            (fallthrough 3 14 fallthrough)
        )
        (case 4 5 case
            (identifier 4 10 d)
            (scope 4 12 {)
        )
        (case 6 5 case
            (identifier 6 10 e)
            (scope 6 12 {)
        )
        (default 8 5 default
            (empty 8 5 default)
            (scope 8 13 {)
        )
))

@------------------------------------------------------------------------------
switch a+b
{
    case 1 {
        e();
    }
    case 2 {
        f();
    }
    case 3 {
        g();
    }
}

@ 0

(scope 1 1
    (switch 1 1 switch
        (operator 1 9 +
            (identifier 1 8 a)
            (identifier 1 10 b)
        )
        (case 3 5 case
            (number 3 10 1)
            (scope 3 12 {
                (invocation 4 10 paren_open
                    (identifier 4 9 e)
        )))
        (case 6 5 case
            (number 6 10 2)
            (scope 6 12 {
                (invocation 7 10 paren_open
                    (identifier 7 9 f)
        )))
        (case 9 5 case
            (number 9 10 3)
            (scope 9 12 {
                (invocation 10 10 paren_open
                    (identifier 10 9 g)
        )))
))

@------------------------------------------------------------------------------
switch x { }

@0

(scope 1 1
    (switch 1 1 switch
        (identifier 1 8 x)
))

@------------------------------------------------------------------------------
switch x { default{ break;} }

@0

(scope 1 1
    (switch 1 1 switch
        (identifier 1 8 x)
        (default 1 12 default
            (empty 1 12 default)
            (scope 1 19 {)
        )
))

@------------------------------------------------------------------------------
switch x { default: } # Missing statements

@ 10 1 21

@------------------------------------------------------------------------------
switch x { default { fallthrough } } # Unexpected fallthrough

@ 10 1 22

@------------------------------------------------------------------------------
switch x {
    default:
        { fallthrough; }
    case 0:
        { break }
}

@0

(scope 1 1
    (switch 1 1 switch
        (identifier 1 8 x)
        (default 2 5 default
            (empty 2 5 default)
            (scope 3 9 {)
            (fallthrough 3 11 fallthrough)
        )
        (case 4 5 case
            (number 4 10 0)
            (scope 5 9 {)
    ))
)

@------------------------------------------------------------------------------
switch x + y {

    case 1, 2, 3{
        10
    }
}

@ 0

(scope 1 1
    (switch 1 1 switch
        (operator 1 10 +
            (identifier 1 8 x)
            (identifier 1 12 y)
        )
        (case 3 5 case
            (number 3 10 1)
            (fallthrough 3 11 ,)
        )
        (case 3 11 ,
            (number 3 13 2)
            (fallthrough 3 14 ,)
        )
        (case 3 14 ,
            (number 3 16 3)
            (scope 3 17 {
                (number 4 9 10)
    )))
)

@------------------------------------------------------------------------------
switch a
{
    default:{ a(); }
    case 1: { b(); }
    default:{ c(); } # Duplicate default
}

@ 10 5 5

@------------------------------------------------------------------------------
switch { } # This is treated as an empty object literal
# Missing open curly brace
@ 10 3 1

@------------------------------------------------------------------------------
switch void { }

@ 0

(scope 1 1
    (switch 1 1 switch
        (void 1 8 void)
))

@------------------------------------------------------------------------------
switch this { case true; } # Open curly brace expected

@ 10 1 24

@------------------------------------------------------------------------------
switch { } { { } } # Case brace expected

@ 10 1 14

@------------------------------------------------------------------------------
switch a = b { } # Need curly brace instead of assignment

@ 10 1 10

@------------------------------------------------------------------------------
switch { } { case 0: } # Statement expected

@ 10 1 22

@------------------------------------------------------------------------------
switch a {

@ 10 3 1

@------------------------------------------------------------------------------
switch 0 {
    case 1 # Expected colon
    case 2: {
        break
    }
}

@ 10 3 5

@------------------------------------------------------------------------------
switch 0 {
    case 1: # Expected statement
    case 2: {
        break
    }
}

@ 10 3 5

@------------------------------------------------------------------------------
switch 0 {
    case 1: {
        break
        a = 1 # Expected case or default
    }
    case 2: {
        break
    }
}

@ 10 4 9

@------------------------------------------------------------------------------
fallthrough; # Unexpected fallthrough

@ 10 1 1

@------------------------------------------------------------------------------
if x {
    fallthrough; # Unexpected fallthrough
}

@ 10 2 5

@------------------------------------------------------------------------------
loop {
    fallthrough; # Unexpected fallthrough
}

@ 10 2 5

@------------------------------------------------------------------------------
fun f {
    fallthrough; # Unexpected fallthrough
}

@ 10 2 5

@------------------------------------------------------------------------------
switch x {
    default: {
        loop {
            fallthrough # Incorrect fallthrough in last case
        }
    }
}

@ 10 4 13

@------------------------------------------------------------------------------
switch x {
    case 1 {
        defer { a() }
        b()
    }
    case 2 {
        defer { c() }
        d()
    }
    default {
        defer { e() }
        f()
    }
}

@ 0

(scope 1 1
    (switch 1 1 switch
        (identifier 1 8 x)
        (case 2 5 case
            (number 2 10 1)
            (scope 2 12 {
                (try-defer 3 9 defer
                    (scope 3 9 defer
                        (invocation 4 10 paren_open
                            (identifier 4 9 b)
                    ))
                    (scope 3 15 {
                        (invocation 3 18 paren_open
                            (identifier 3 17 a)
        )))))
        (case 6 5 case
            (number 6 10 2)
            (scope 6 12 {
                (try-defer 7 9 defer
                    (scope 7 9 defer
                        (invocation 8 10 paren_open
                            (identifier 8 9 d)
                    ))
                    (scope 7 15 {
                        (invocation 7 18 paren_open
                            (identifier 7 17 c)
        )))))
        (default 10 5 default
            (empty 10 5 default)
            (scope 10 13 {
                (try-defer 11 9 defer
                    (scope 11 9 defer
                        (invocation 12 10 paren_open
                            (identifier 12 9 f)
                    ))
                    (scope 11 15 {
                        (invocation 11 18 paren_open
                            (identifier 11 17 e)
        ))))))
)
