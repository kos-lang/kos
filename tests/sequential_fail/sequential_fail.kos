# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2020 Chris Dragan

import base.*
import random

assert [0] == fun(a...) { return a } (0)

do {
    fun recursive(x)
    {
        return x ? recursive(x - 1) : 0
    }

    assert recursive(16) == 0
}

do {
    var caught = false
    try {
        throw "HELL\(0)"
    }
    catch const e {
        caught = e.value
        e.print()
    }
    assert caught

    caught = void
    try {
        throw { theval: 72 }
    }
    catch const e {
        caught = e.value
        e.print()
    }
    assert caught.theval == 72
}

do {
    var i = 1
    for const elem in [ 1, 2, 2+1 ] {
        assert elem == i
        i += 1
    }
}

do {
    const line = __line__
    fun go(line)
    {
        const obj  = { a : line, b : line + 1 }
        const yield_arg = fun(x) { yield x }
        for const key, value in shallow(obj) {

            const key2 = yield_arg(key, 0, 0, 0, 0, 0, 0, 0)()
            assert key2 == key

            switch key {
                case "a": assert value == line
                case "b": assert value == line + 1
                default:  throw "invalid " + "key"
            }
        }
        return line + 1
    }
    assert go(line) == line + 1
}

do {
    var idx = void

    fun gen
    {
        var j = 10
        for var i = 0; i < 2;
            i += 1,
            j += 2 {

            idx = i
            yield i
        }
    }

    for const value in gen() {
        assert idx == value
    }
}

do {
    const x = "x"
    const values = [ 1, 2.0, [x,"y"], buffer([3, 4]), {x:"y"}, ()=>void ];
    const str = stringify.apply(void, values)
    assert str.starts_with("12.0[\"\((a=>a)(x))\", \"y\"]<03 04>{\"x\": \"y\"}<function ")
}

do {
    class stuff {
        to_string(x) { print(x) ; return "\(x)" }
    }

    const o = stuff()
    assert o.to_string(stuff).starts_with("<class");
    assert o.to_string(print).starts_with("<function");
}

do {
    var val = 0

    fun doit(x)
    {
        return { release: fun { val = x } }
    }

    with doit(101) { }

    assert val == 101
}

do {
    assert string([0x30]) == "0"
    assert string(buffer([0x31])) == "1"
    assert "Uu".uppercase() == "UU"
    assert "Uu".lowercase() == "uu"
    assert "Uu".repeat(2) == "UuUu"
    assert "Uu".reverse() == "uU"
}
