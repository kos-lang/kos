#!/bin/sh

# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2023 Chris Dragan

set -e

RUN_C89=0
RUN_CPP14=0
RUN_RELEASE=0
RUN_ASAN=0
RUN_VALGRIND=0
RUN_GCOV=0
RUN_SEQFAIL=0
RUN_MADGC=0
KEEP_OUTPUT=0

UNAME=$(uname -s)
MAKE=make

case "$UNAME" in
    CYGWIN*|MINGW*|MSYS*)             UNAME="Windows" ;;
    FreeBSD|OpenBSD|NetBSD|DragonFly) MAKE=gmake ;;
esac

if [ -z "$JOBS" ]; then
    case "$UNAME" in
        Linux)                                   JOBS="$(grep -c ^processor /proc/cpuinfo)" ;;
        Darwin|FreeBSD|OpenBSD|NetBSD|DragonFly) JOBS="$(sysctl -n hw.ncpu)" ;;
        Windows)                                 JOBS="$NUMBER_OF_PROCESSORS" ;;
        Haiku|BeOS)                              JOBS="$(sysinfo | grep -c 'CPU #')" ;;
        *)                                       JOBS=2 ;;
    esac
fi

set_defaults()
{
    RUN_C89=1
    RUN_CPP14=1
    RUN_RELEASE=1
    [ "$UNAME" = "Windows" ] || RUN_ASAN=1
}

[ $# -gt 0 ] || set_defaults

while [ $# -gt 0 ]; do
    case $1 in
        c89)          RUN_C89=1      ;;
        cpp14)        RUN_CPP14=1    ;;
        release)      RUN_RELEASE=1  ;;
        asan)         RUN_ASAN=1     ;;
        valgrind)     RUN_VALGRIND=1 ;;
        gcov)         RUN_GCOV=1     ;;
        lcov)         RUN_GCOV=2     ;;
        seqfail)      RUN_SEQFAIL=1  ;;
        madgc)        RUN_MADGC=1    ;;
        keepoutput)   KEEP_OUTPUT=1  ;;
        default)      set_defaults   ;;
        slowdispatch) export fastdispatch=0 ;;
        deepstack)    export deepstack=1    ;;
        *)            echo "Error: Unrecognized parameter - $1" >&2 ; exit 1
    esac
    shift
done

echo "Using $JOBS jobs"

# Parallel tests use this env var to run number of threads proportional to the number of CPUs
export TEST_CPUS="$JOBS"

# Save for overriding
ORIG_JOBS=$JOBS

runtests()
{
    echo "***************************************************************************"
    local MODE
    MODE="RELEASE"
    [ "$debug" = "1" ] && MODE="DEBUG"

    local PRINT_CLANG
    PRINT_CLANG=$(echo "$1" | tr 'c' 'C')
    if [ "$UNAME" = "Windows" ]; then
        echo "$1" | grep -q "c++" || PRINT_CLANG=C
    fi

    local PRINT_CPPLANG
    PRINT_CPPLANG=$(echo "$2" | tr 'c' 'C')

    local PRINT_LANG
    PRINT_LANG="$PRINT_CLANG and $PRINT_CPPLANG"
    [ "$1" = "$2" ] && PRINT_LANG="$PRINT_CLANG"

    local WITH_TOOL
    WITH_TOOL=""
    [ -n "$tool"   ] && WITH_TOOL=" with $tool"
    [ -n "$gcov"   ] && WITH_TOOL="$WITH_TOOL with gcov"
    [ -n "$mad_gc" ] && WITH_TOOL="$WITH_TOOL with mad GC"
    [ -n "$fastdispatch" ] && [ "$fastdispatch" = "0" ] && WITH_TOOL=" with slow dispatch"
    [ -n "$deepstack" ] && [ "$deepstack" = "1" ] && WITH_TOOL=" with deep stack"

    local OVERRIDE=""
    if [ -n "$SANITIZER" ]; then
        local CFLAGS
        local LDFLAGS
        CFLAGS="-fsanitize=$SANITIZER"
        LDFLAGS="-fsanitize=$SANITIZER"
        if [ "$UNAME" = "Linux" ]; then
            # gcc bug WAR
            LDFLAGS="$LDFLAGS -fuse-ld=gold"
        fi
        export CFLAGS
        export LDFLAGS
        WITH_TOOL="$WITH_TOOL with $SANITIZER sanitizer"
        OVERRIDE="out_dir_base_rel=Out/debug_asan"
    fi

    echo "Testing $MODE as $PRINT_LANG$WITH_TOOL"
    echo "***************************************************************************"

    $MAKE -k -j "$JOBS" test CLANG_VER=$1 CPPLANG_VER=$2 strict=1 --warn-undefined-variables $OVERRIDE
}

# Kill release build after a few minutes in Travis
ARCH=$(uname -m)
if [ "$ARCH" = "ppc64le" -o "$ARCH" = "s390x" -o "$ARCH" = "aarch64" ]; then
    sleep 240 && pkill kos &
fi

cd "$(dirname $0)"/..

unset SANITIZER
unset tool
unset gcov
unset seqfail
export debug=1

if [ "$RUN_C89" = "1" ]; then
    runtests c89 c++98
fi

if [ "$RUN_VALGRIND" = "1" ]; then
    if [ "$UNAME" != "Linux" ]; then
        echo "Error: Valgrind is only supported on Linux!" >&2
        exit 1
    fi

    if [ "$(which valgrind 2>/dev/null)" = "" ]; then
        echo "Error: Valgrind not found!" >&2
        exit 1
    fi

    export tool="valgrind --error-exitcode=1 --track-origins=yes"

    # Limit number of jobs to reduce memory pressure
    [ $JOBS -gt 4 ] && JOBS=$(($JOBS / 2))
    [ $JOBS -eq 0 ] && JOBS=1
    [ $JOBS -gt 8 ] && JOBS=8

    TEST_CPUS=2 runtests c89 c++98

    unset tool
    JOBS=$ORIG_JOBS
fi

if [ "$RUN_ASAN" = "1" ]; then
    if [ "$UNAME" = "Windows" ]; then
        echo "Error: Address sanitizer is not supported on Windows!" >&2
        exit 1
    fi

    export SANITIZER="address"
    RUN_CPP14="1"
    export builtin_modules=0
    export MallocNanoZone=0 # Work around MacOS issue with address sanitizer
fi

if [ "$RUN_SEQFAIL" = "1" ]; then
    export seqfail=1
    RUN_CPP14="1"
fi

if [ "$RUN_CPP14" = "1" ]; then
    runtests c++14 c++14
fi

unset builtin_modules

unset SANITIZER
unset seqfail
JOBS=$ORIG_JOBS

if [ "$RUN_MADGC" = "1" ]; then
    if [ "$RUN_SEQFAIL" = "1" ]; then
        export seqfail=1
    fi
    export mad_gc=1

    MAD_GC_CPUS=$TEST_CPUS
    [ $MAD_GC_CPUS -gt 4 ] && MAD_GC_CPUS=4

    JOBS=$(($JOBS * 2))

    TEST_CPUS=$MAD_GC_CPUS runtests c++11 c++11

    unset mad_gc
    unset seqfail
    JOBS=$ORIG_JOBS
fi

unset debug
if [ "$RUN_RELEASE" = "1" ]; then
    export builtin_modules=0
    runtests c11 c++11
    unset builtin_modules
fi

if [ "$RUN_GCOV" != "0" ]; then
    if [ "$UNAME" = "Windows" ]; then
        echo "Error: gcov not supported on Windows!" >&2
        exit 1
    fi
    export gcov=1
    [ "$RUN_GCOV" = "2" ] && export lcov=1
    export debug=1
    export seqfail=1
    export builtin_modules=0
    runtests c99 c++14
    unset gcov
    unset debug
    unset seqfail
    unset builtin_modules
    KEEP_OUTPUT=1
fi

[ "$KEEP_OUTPUT" != "0" ] || rm -rf Out
