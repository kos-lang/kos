#!/bin/sh

# Copyright (c) 2014-2019 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

set -e

export CFLAGS=-fsanitize=fuzzer-no-link,address
export LDFLAGS=-fsanitize=fuzzer,address
export CC=clang
export CXX=clang++

UNAME=$(uname -s)

if [ -z "$JOBS" ]; then
    case "$UNAME" in
        Linux)                                   JOBS="$(grep -c ^processor /proc/cpuinfo)" ;;
        Darwin|FreeBSD|OpenBSD|NetBSD|DragonFly) JOBS="$(sysctl -n hw.ncpu)" ;;
        CYGWIN*|MINGW*|MSYS*)                    JOBS="$NUMBER_OF_PROCESSORS" ; UNAME="Windows" ;;
        Haiku|BeOS)                              JOBS="$(sysinfo | grep -c 'CPU #')" ;;
        *)                                       JOBS=2 ;;
    esac
fi

PWD="$(pwd)"
OUT="$PWD/Out/debug/tests"
FUZZ="kos_fuzz_interpreter"
CORPUS="$PWD/tests/kos_fuzz_interpreter_corpus"
AFL_CORPUS="$PWD/tests/kos_fuzz_interpreter_afl"
DICT="$PWD/tests/kos_fuzz_interpreter_dict"
MERGE=0
MINIMIZE=""

while [ $# -gt 0 ]; do
    case "$1" in
        --merge)    MERGE=1 ;;
        --minimize) shift ; MINIMIZE="$1" ;;
        -j)         shift ; JOBS="$1" ;;
        *)          echo "Unrecognized parameter: $1" >&2 ; exit 1 ;;
    esac
    shift
done

echo "Using $JOBS jobs"

[ -f "$OUT/$FUZZ" ] || rm -rf Out

make -k -j "$JOBS" fuzz debug=1 fuzz=1 strict=1 CLANG_VER=c99 --warn-undefined-variables

cd "$OUT"

merge_corpus()
{
    "./$FUZZ" -merge=1 "$CORPUS" "$@"
}

if [ "$MERGE" = "1" -a -d "$CORPUS" ]; then
    mv "$CORPUS" "$CORPUS.old"
    mkdir -p "$CORPUS"
    if [ -d "$AFL_CORPUS" ]; then
        merge_corpus "$CORPUS.old" "$AFL_CORPUS"
        rm -rf "$AFL_CORPUS"
    else
        merge_corpus "$CORPUS.old"
    fi
    rm -rf "$CORPUS.old"
    exit 0
fi

if [ -n "$MINIMIZE" ]; then
    "./$FUZZ" -minimize_crash=1 -runs=10000 "$MINIMIZE"
    exit 0
fi

run_parallel_fuzzer()
{
    "./$FUZZ" "-jobs=$JOBS" "-workers=$JOBS" "-dict=$DICT" "$@"
}

mkdir -p "$CORPUS"
if [ -d "$AFL_CORPUS" ]; then
    run_parallel_fuzzer "$CORPUS" "$AFL_CORPUS"
else
    run_parallel_fuzzer "$CORPUS"
fi
