#!/bin/bash

# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2022 Chris Dragan

set -e

export CFLAGS=-fsanitize=fuzzer-no-link,address
export LDFLAGS=-fsanitize=fuzzer,address
export CC=clang
export CXX=clang++

MAX_LEN=4096

show_help()
{
    echo "Usage: tests/fuzz [OPTIONS]"
    echo
    echo "Options:"
    echo "    --test NAME       Run test: interpreter (default) or compiler"
    echo "    --unit            Treat corpus as unit tests"
    echo "    --merge           Merge corpus (deduplicate, etc.)"
    echo "    --minimize NAME   Minimize a crashing test case"
    echo "    -j N              Run N jobs (default is autodetect)"
}

if [[ -z "$JOBS" ]]; then
    case "$(uname -s)" in
        Linux)                                   JOBS="$(grep -c ^processor /proc/cpuinfo)" ;;
        Darwin|FreeBSD|OpenBSD|NetBSD|DragonFly) JOBS="$(sysctl -n hw.ncpu)" ;;
        CYGWIN*|MINGW*|MSYS*)                    JOBS="$NUMBER_OF_PROCESSORS" ;;
        Haiku|BeOS)                              JOBS="$(sysinfo | grep -c 'CPU #')" ;;
        *)                                       JOBS=2 ;;
    esac
fi

CORPORA_BASE=(
    kos_fuzz_interpreter
    kos_fuzz_compiler
)

PWD="$(pwd)"
OUT="$PWD/Out/debug/tests"
FUZZ="${CORPORA_BASE[0]}"
DICT="$PWD/tests/kos_fuzz_interpreter_dict"
UNITTEST=0
MERGE=0
MINIMIZE=""

# Handle command line args
while [[ $# -gt 0 ]]; do
    case "$1" in
        --unit)     UNITTEST=1 ;;
        --merge)    MERGE=1 ;;
        --minimize) shift ; MINIMIZE="$1" ;;
        --test)     shift ; FUZZ="kos_fuzz_$1" ;;
        -j)         shift ; JOBS="$1" ;;
        -h|--help)  show_help ; exit 0 ;;
        *)          echo "Unrecognized parameter: $1" >&2 ; echo ; show_help ; exit 1 ;;
    esac
    shift
done

# Get list of corpora (input and output)
CORPUS="$PWD/tests/${FUZZ}_corpus"
INPUT_CORPORA=( )
for CUR_CORP in "${CORPORA_BASE[@]}"; do
    for CORP_SUFFIX in _corpus _afl; do
        CORP_DIR="$PWD/tests/${CUR_CORP}${CORP_SUFFIX}"
        [[ "$CORP_DIR" = "$CORPUS" ]] && continue
        [[ -d "$CORP_DIR" ]] && INPUT_CORPORA+=( "$CORP_DIR" )
    done
done

echo "Using $JOBS jobs"

[[ -f "$OUT/$FUZZ" ]] || rm -rf Out

make -k -j "$JOBS" fuzz debug=1 fuzz=1 strict=1 CLANG_VER=c99 --warn-undefined-variables

cd "$OUT"

merge_corpus()
{
    "./$FUZZ" -merge=1 "-max_len=$MAX_LEN" "$CORPUS" "$@"
}

if [[ "$UNITTEST" = "1" ]]; then
    HEX_DIGITS="0123456789abcdef"
    unit_job()
    {
        local THREAD_IDX="$1"
        local IDX="$THREAD_IDX"
        local JOBFILE="out_$THREAD_IDX.log"
        local FINAL_EXITCODE=0
        local FILE

        echo "Running thread $THREAD_IDX"

        while [[ $IDX -lt ${#HEX_DIGITS} ]]; do
            local EXITCODE=0
            "./$FUZZ" -verbosity=0 "$CORPUS"/${HEX_DIGITS:$IDX:1}* > "$JOBFILE" 2>&1 || EXITCODE=$?

            if [[ $EXITCODE != 0 ]]; then
                FINAL_EXITCODE=$EXITCODE
                cat "$JOBFILE"
            fi

            IDX=$(($IDX + $JOBS))
        done

        echo "Thread $THREAD_IDX exited with code $FINAL_EXITCODE"

        return $FINAL_EXITCODE
    }

    JOB_IDS=( )
    for IDX in $(seq 0 $(($JOBS - 1))); do
        unit_job "$IDX" &
        JOB_IDS+=( $! )
    done

    FAILED=0
    for IDX in "${JOB_IDS[@]}"; do
        wait $IDX || FAILED=$?
    done
    exit $FAILED
fi

if [[ "$MERGE" = "1" ]] && [[ -d "$CORPUS" ]]; then
    mv "$CORPUS" "$CORPUS.old"
    mkdir -p "$CORPUS"
    merge_corpus "$CORPUS.old" "${INPUT_CORPORA[@]}"
    if [[ ${#INPUT_CORPORA[*]} -gt 0 ]]; then
        rm -rf "${INPUT_CORPORA[@]}"
    fi
    rm -rf "$CORPUS.old"
    exit 0
fi

if [[ -n "$MINIMIZE" ]]; then
    "./$FUZZ" -minimize_crash=1 -runs=10000 "$MINIMIZE"
    exit 0
fi

run_parallel_fuzzer()
{
    "./$FUZZ" "-jobs=$JOBS" "-max_len=$MAX_LEN" "-workers=$JOBS" "-dict=$DICT" "$@"
}

mkdir -p "$CORPUS"
run_parallel_fuzzer "$CORPUS" "${INPUT_CORPORA[@]}"
