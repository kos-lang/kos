#
# Copyright (c) 2014-2018 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

fun lexer(filename, input)
{
    const next = raw_lexer(input)

    const brackets = []

    fun save(token, sep)
    {
        brackets.push([sep, token.type])
    }

    fun throw_token(token, str)
    {
        throw "\(filename):\(token.line):\(token.column): \(str)"
    }

    for var token in next {

        switch token.sep {

            case sep_paren_open:
                save(token, sep_paren_close)

            case sep_square_open:
                save(token, sep_square_close)

            case sep_curly_open:
                save(token, sep_curly_close)

            case sep_paren_close,
                 sep_square_close,
                 sep_curly_close:
                if ! brackets.size {
                    throw_token(token, "unexpected '\(token.token)'")
                }

                const expected_sep, open_type = brackets.pop()

                if token.sep != expected_sep {
                    var actual_expected = expected_sep
                    switch expected_sep {
                        case sep_paren_close:  actual_expected = ")"
                        case sep_square_close: actual_expected = "]"
                        case sep_curly_close:  actual_expected = "}"
                    }
                    throw_token(token, "expected '\(actual_expected)'")
                }

                if open_type == token_string_open {
                    token = next(continue_string)
                    if token.type == token_string_open {
                        save(token, sep_paren_close)
                    }
                }

            default:
                if token.type == token_string_open {
                    save(token, sep_paren_close)
                }
        }

        yield token
    }
}
