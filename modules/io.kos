#
# Copyright (c) 2014-2019 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

import base: buffer, string, eol

/* @item io ro
 *
 *     ro
 *
 * Flag used with `file.file` and `file.open`.  Indicates that the file is to
 * be opened for reading only.
 *
 * File must exist if this flag is used, or else exception is thrown.
 */
public const ro = "rb"

/* @item io rw
 *
 *     rw
 *
 * Flag used with `file.file` and `file.open`.  Indicates that the file is to
 * be opened for reading and writing.
 *
 * File must exist if this flag is used, or else exception is thrown.
 */
public const rw = "r+b"

/* @item io create_flag
 *
 *     create_flag
 *
 * Flag used with `file.file` and `file.open`.  Indicates that the file is to
 * be created if it does not exist or truncated if it exists and then opened
 * for reading and writing.
 */
public const create_flag = "w+b"

/* @item io append_flag
 *
 *     append_flag
 *
 * Flag used with `file.file` and `file.open`.  Indicates that the file is to
 * be created if it does not exist or opened at at the end for appending.
 * The file is always opened for reading and writing with this flag.
 */
public const append_flag = "a+b"

/* @item io open()
 *
 *     open(filename, flags = rw)
 *
 * Opens a file.
 *
 * Returns opened file object.
 *
 * `filename` is the path to the file to open.
 *
 * Optional `flags` specify open mode.  `flags` default to `rw`.
 *
 * It is recommended to use the `file.open()` function in conjunction with
 * the `with` statement.
 *
 * Example:
 *
 *     > with const f = file.open("my.txt", file.create_flag) { f.print("hello") }
 */
public fun open(filename, flags = rw)
{
    return file(filename, flags)
}

/* @item io create()
 *
 *     create(filename)
 *
 * Creates a new or truncates an existing file, opens for reading and writing.
 *
 * Returns opened file object.
 *
 * `filename` is the path to the file to create or truncate.
 *
 * It is recommended to use the `file.create()` function in conjunction with
 * the `with` statement.
 *
 * Example:
 *
 *     > with const f = file.create("my.txt") { f.print("hello") }
 */
public fun create(filename)
{
    return file(filename, create_flag)
}

/* @item io append()
 *
 *     append(filename)
 *
 * Creates a new or opens an existing file in append mode, opens for reading
 * and writing.
 *
 * Returns opened file object.
 *
 * `filename` is the path to the file to create or truncate.
 *
 * It is recommended to use the `file.append()` function in conjunction with
 * the `with` statement.
 *
 * Example:
 *
 *     > with const f = file.append("my.txt") { f.print("hello") }
 */
public fun append(filename)
{
    return file(filename, append_flag)
}

/* @item io file.prototype.read()
 *
 *     file.prototype.read()
 *     file.prototype.read(size [, buffer])
 *
 * Reads bytes from an opened file object.
 *
 * Returns a buffer containing the bytes read.
 *
 * The first variant reads as many bytes as it can, possibly until the end
 * of file.
 *
 * The second variant reads up to `size` bytes, or less if the file does not
 * have that many bytes.  It never reads more than `size` bytes.
 *
 * If `buffer` is specified, bytes are appended to it and that buffer is
 * returned instead of creating a new buffer.
 */
file.prototype.read = fun(in_size = 0x7FFFFFFFFFFFFFFF, in_buf = void)
{
    const size     = in_size
    const buf      = in_buf || buffer()
    var   num_read = 0

    while ! this.eof && num_read < size {
        const prev_size = buf.size
        const to_read   = size - num_read

        this.read_some(to_read > 0x10000 ? 0x10000 : to_read, buf)

        const actual_read = buf.size - prev_size
        if ! actual_read {
            break
        }

        num_read += actual_read
    }

    return buf
}

/* @item io file.prototype.read_lines()
 *
 *     file.prototype.read_lines(keep_ends = false, gran = 0x1000)
 *
 * A generator which produces subsequent lines of text read from a file.
 *
 * Returns an iterator function, which yields subsequent lines read
 * from the file on subsequent invocations.  The lines returned by the
 * iterator function are strings.
 *
 * `keep_ends` tells whether the EOL character sequences should be kept
 * as part of the returned lines.  It defaults to `false`.
 *
 * `gran` is the internal granularity at which the file is read.  It
 * defaults to 4KB.
 */
file.prototype.read_lines = fun(keep_ends = false, gran = 0x1000)
{
    if gran <= 0 {
        gran = 0x1000
    }

    const buf  = buffer()
    var   prev = ""

    loop {
        buf.resize(0)

        const str = string(this.read_some(gran, buf))

        var pos = 0

        if prev != "" && prev[-1] == "\r" {
            var lf = str != "" && str[0] == "\n"
            if lf {
                pos = 1
            }
            if keep_ends {
                if lf {
                    yield prev + "\n"
                }
                else {
                    yield prev
                }
            }
            else {
                yield prev[:-1]
            }
            prev = ""
        }

        if str == "" {
            break
        }

        loop {
            const eol_pos = str.scan(eol, pos)

            if eol_pos == -1 {
                prev += str[pos:]
                break
            }

            var end = eol_pos + 1

            if str[eol_pos] == "\r" {
                if end == str.size {
                    prev += str[pos:]
                    break
                }

                if str[end] == "\n" {
                    end += 1
                }
            }

            yield prev + str[pos : keep_ends ? end : eol_pos]
            prev = ""

            pos = end
        }
    }

    if prev != "" {
        yield prev
    }
}

/* @item io read_lines()
 *
 *     read_lines(filename, keep_ends = false, gran = 0x1000)
 *
 * A generator which produces subsequent lines of text read from a file.
 *
 * Returns an iterator function, which yields subsequent lines read
 * from the file on subsequent invocations.  The lines returned by the
 * iterator function are strings.
 *
 * `filename` is the path to the file to open.
 *
 * `keep_ends` tells whether the EOL character sequences should be kept
 * as part of the returned lines.  It defaults to `false`.
 *
 * `gran` is the internal granularity at which the file is read.  It
 * defaults to 4KB.
 *
 * Example:
 *
 *     > for const line in file.read_lines("README.txt") { print(line) }
 */
public fun read_lines(filename, keep_ends = false, gran = 0x1000)
{
    with const f = open(filename, ro) {
        for const line in f.read_lines(keep_ends, gran) {
            yield line
        }
    }
}

/* @item io file.prototype.print_lines()
 *
 *     file.prototype.print_lines(iterable)
 *
 * Prints all elements from an iterable object into the file on separate lines.
 *
 * Elements are extracted from `iterable` object through its `iterator()`
 * function, then printed using `file.prototype.print()` function.
 *
 * If there are no elements, nothing is printed.
 */
file.prototype.print_lines = fun(iterable)
{
    for const elem in iterable {
        this.print(elem)
    }
}
