# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

class ts_collection {
    constructor {
        this.sem        = semaphore()
        this.mutex      = mutex()
        this.size       = 0
        this.collection = []
    }

    fun push(elems...) {
        const count = elems.size
        if count {
            with this.mutex {
                this.collection.insert(this.collection.size, elems)
                this.size += count
            }
            this.sem.release(count)
        }
        return this
    }
}

public class queue extends ts_collection {
    constructor {
        this.front = 0
    }

    fun pop(count = void) {
        const just_one = count == void
        const num      = just_one ? 1 : count

        if ! num {
            return void
        }

        this.sem.acquire(num)

        with this.mutex {
            const size  = this.size - num
            const oldfr = this.front
            var   front = oldfr + num
            const elems = this.collection[oldfr:front]

            if front > 8 && (front > size / 4 || front > 128) {
                this.collection.insert(0, front, [])
                front = 0
            }

            this.size  = size
            this.front = front

            return just_one ? elems[0] : elems
        }
    }
}

public class stack extends ts_collection {
    fun pop(count = void) {
        const just_one = count == void
        const num      = just_one ? 1 : count

        if ! num {
            return void
        }

        this.sem.acquire(num)

        with this.mutex {
            const elems = this.collection.pop(num)
            this.size -= num
            return just_one ? elems[0] : elems
        }
    }
}
