#
# Copyright (c) 2014-2017 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

import lang.array

fun generator(iterable)
{
    if typeof iterable == "function" {
        const cache       = []
        var   initialized = false
        return fun
        {
            if initialized {
                return cache.iterator()
            }
            else {
                return fun
                {
                    initialized = true
                    for var elem in iterable {
                        cache.push(elem)
                        yield elem
                    }
                } /* Prime the generator */ ()
            }
        }
    }
    else {
        return fun { return iterable.iterator() }
    }
}

const empty = void.iterator

fun iproduct(args...)
{
    const dim = args.size

    if dim == 0 {
        return
    }

    if dim == 1 {
        const num = args[0]
        for var i = 0; i < num; i += 1 {
            yield i
        }
        return
    }

    const step = [] # TODO: array(0, dim)

    for var i = 0; i < dim; i += 1 {
        if args[i] <= 0 {
            return
        }
        step.push(0) # TODO remove
    }

    loop {
        // Make a copy to prevent fiddling outside of the function
        yield array(step)

        for var i = 0; i < dim; i += 1 {
            const next = step[i] + 1
            if next >= args[i] {
                if i + 1 == dim {
                    return
                }
                step[i] = 0
            }
            else {
                step[i] = next
                break
            }
        }
    }
}

fun product(args...)
{
    const dim = args.size

    if dim == 0 {
        return empty()
    }

    if dim == 1 {
        return args[0].iterator()
    }

    const generators = []
    for var i = 0; i < dim; i += 1 {
        generators.push(generator(args[i]))
    }

    fun product_from_generators(args...)
    {
        if (args.size == 1) {
            for var elem in args[0]() {
                const a = []
                a.resize(dim)
                a[0] = elem
                yield a
            }
            return
        }

        const outer_gen = args.pop()
        const offs      = args.size

        for var elem in outer_gen() {
            for var other in product_from_generators.apply(this, args) {
                other[offs] = elem
                yield other
            }
        }
    }

    return product_from_generators.apply(this, generators)
}

fun cycle(iterable)
{
    const gen = generator(iterable)
    loop {
        for var elem in gen() {
            yield elem
        }
    }
}
