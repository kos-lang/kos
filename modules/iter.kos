# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2021 Chris Dragan

import base: array, print

/* @item iter generator()
 *
 *     generator(iterable)
 *
 * Creates a generator function, which caches another generator.
 *
 * Returns a generator function, which can be instantiated many times.
 *
 * If `iterable` is a function, it is assumed to be a generator or an
 * iterator, its elements are cached, so that the returned generator
 * function can be instantiated multiple times.
 *
 * If the returned generator is instantiated twice and processed
 * in parallel, the behavior is undefined.
 *
 * If `iterable` is not a function, the behavior of the returned
 * generator upon instantiation will be equivalent to calling
 * `iterable.iterator()`.
 */
public fun generator(iterable)
{
    if typeof iterable == "function" {
        const cache       = []
        var   initialized = false
        return fun
        {
            if initialized {
                return cache.iterator()
            }
            else {
                return fun
                {
                    initialized = true
                    for var elem in iterable {
                        cache.push(elem)
                        yield elem
                    }
                } /* Prime the generator */ ()
            }
        }
    }
    else {
        return fun { return iterable.iterator() }
    }
}

/* @item iter empty()
 *
 *     empty()
 *
 * Empty generator.
 *
 * This generator, when instantiated, never yields any objects and
 * terminates immediately.
 */
public fun empty
{
    if false {
        yield void
    }
}

/* @item iter iproduct()
 *
 *     iproduct(range_sizes...)
 *
 * A generator which produces permutations of multiple 0-based ranges.
 *
 * Returns an iterator function, which yields subsequent permutations
 * of the specified ranges.
 *
 * The arguments of this function are integers, which specify how many
 * elements each range contains.  The number of input arguments is equal
 * to the number of ranges. The first range is innermost, the last range
 * is outermost.
 *
 * `iter.iproduct(n, m)` is equivalent to `iter.product(range(n), range(m))`.
 *
 * Example:
 *
 *     > iter.iproduct(2, 3) -> array
 *     [[0, 0], [1, 0], [0, 1], [1, 1], [0, 2], [1, 2]]
 *     > iter.iproduct(3, 2) -> array
 *     [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1]]
 */
public fun iproduct(args...)
{
    const dim = args.size

    if dim == 0 {
        return
    }

    if dim == 1 {
        const num = args[0]
        for var i = 0; i < num; i += 1 {
            yield i
        }
        return
    }

    const step = [0].repeat(dim)

    for var i = 0; i < dim; i += 1 {
        if args[i] <= 0 {
            return
        }
    }

    loop {
        // Make a copy to prevent fiddling outside of the function
        yield [step...]

        for var i = 0; i < dim; i += 1 {
            const next = step[i] + 1
            if next >= args[i] {
                if i + 1 == dim {
                    return
                }
                step[i] = 0
            }
            else {
                step[i] = next
                break
            }
        }
    }
}

/* @item iter product()
 *
 *     product(iterables...)
 *
 * A generator which produces permutations of the output of multiple other
 * generators.
 *
 * Returns an iterator function, which yields arrays containing subsequent
 * permutations of values from input iterable objects.
 *
 * The arguments, `iterables`, are objects on which `iterator()` is invoked
 * to obtain generators for each iterable object.
 *
 * Example:
 *
 *     > iter.product(range(5, 7), "xyz") -> array
 *     [[5, x], [6, x], [5, y], [6, y], [5, z], [6, z]]
 */
public fun product(args...)
{
    const dim = args.size

    if dim == 0 {
        return empty()
    }

    if dim == 1 {
        return args[0].iterator()
    }

    const generators = []
    for var i = 0; i < dim; i += 1 {
        generators.push(generator(args[i]))
    }

    fun product_from_generators(args...)
    {
        if (args.size == 1) {
            for var elem in args[0]() {
                const a = []
                a.resize(dim)
                a[0] = elem
                yield a
            }
            return
        }

        const outer_gen = args.pop()
        const offs      = args.size

        for var elem in outer_gen() {
            for var other in product_from_generators(args...) {
                other[offs] = elem
                yield other
            }
        }
    }

    return product_from_generators(generators...)
}

/* @item iter cycle()
 *
 *     cycle(iterable)
 *
 * A generator which cycles forever over elements of an interable object.
 *
 * Returns an iterator function, which yields subsequent elements of an
 * iterable object cyclically, infinitely.  Once yielding the last element,
 * it starts from the beginning and yields the first and subsequent elements
 * again.
 *
 * `iterable` is an object on which `iterator()` is invoked to obtain subsequent
 * elements of it.  It is wrapped with `iter.generator()`, so that when
 * `iterable` is a function, the elements are cached, so they can be yielded
 * again.
 */
public fun cycle(iterable)
{
    const gen = generator(iterable)
    loop {
        for var elem in gen() {
            yield elem
        }
    }
}

const indexable_with_int = {
    string: true,
    array:  true,
    buffer: true
}

/* @item iter reverse()
 *
 *     reverse(iterable)
 *
 * A generator which produces elements of an iterable object in reverse order.
 *
 * For strings, arrays and buffers, returns the object of the same type
 * containing elements in reverse order.
 *
 * For objects of other type, returns an iterator function, which yields
 * elements of the iterable object in backwards order.
 *
 * Examples:
 *
 *     > iter.reverse(range(4)) -> array
 *     [3, 2, 1, 0]
 *     > iter.reverse("language")
 *     "egaugnal"
 */
public fun reverse(iterable)
{
    if typeof iterable in indexable_with_int {
        return iterable.reverse()
    }
    else {
        iterable = [ iterable ... ]
        return fun(iterable_inner) {
            for var i = iterable_inner.size; i; {
                i -= 1
                yield iterable_inner[i]
            }
        } (iterable)
    }
}

/* @item iter iota()
 *
 *     iota(init = 0)
 *
 * A generator which produces subsequent integer numbers
 *
 * `init` is the first integer produced by the generator.
 * `init` is optional and defaults to 0.
 *
 * The generator ends after the last integer is returned, which is when
 * incrementing the integer would result in an overflow.
 *
 * Examples:
 *
 *     > iter.iota()[0:10] -> array
 *     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 *     > iter.iota(10)[0:4] -> array
 *     [10, 11, 12, 13]
 */
public fun iota(init = 0)
{
    repeat {
        yield init
        init += 1
    } while init != -0x8000_0000_0000_0000
}
