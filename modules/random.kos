#
# Copyright (c) 2014-2018 Chris Dragan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

/* @item random rand_integer()
 *
 *     rand_integer()
 *     rand_integer(min, max)
 *
 * Generates a pseudo-random integer with uniform distribution.
 *
 * Returns a random integer.
 *
 * The first variant generates any integer number.
 *
 * The second variant generates an integer between the chosen `min` and `max`
 * values.  The `min` and `max` values are included in the possible range.
 *
 * Examples:
 *
 *     > random.rand_integer()
 *     -3655836363997440814
 *     > random.rand_integer(-100, 100)
 *     42
 */

/* @item random rand_float()
 *
 *     rand_float()
 *
 * Generates a pseudo-random float with uniform distribution from 0.0
 * (inclusive) to 1.0 (exclusive).
 *
 * Returns a float in the range from 0.0 to 1.0, where 0.0 can be possibly
 * produced and 1.0 is never produced.
 *
 * Example:
 *
 *     > random.rand_float()
 *     0.05080192760294
 */
const rand_integer, rand_float = fun {

    const rand = random()

    return [
        fun(args...) { return rand.integer.apply(rand, args) },
        fun()        { return rand.float.apply(rand, []) }
    ]
}()

# TODO: shuffle, sample, uniform float range, normal distribution
