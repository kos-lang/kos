# SPDX-License-Identifier: MIT
# Copyright (c) 2014-2022 Chris Dragan

/* @item random grandom
 *
 *     grandom
 *
 * Global pseudo-random number generator object initialized with
 * system-specific source of entropy (see random()).
 *
 * Examples:
 *
 *     > random.grandom.integer()
 *     42
 *     > random.grandom.float()
 *     1.314159265358979323
 */
public const grandom = random()

/* @item random random.prototype.shuffle()
 *
 *     random.prototype.shuffle(iterable)
 *
 * Generates a pseudo-random permutation of elements from an iterable object.
 *
 * The pseudo-random number generator object `this` is used to generate
 * the permutation.
 *
 * Returns an array containing a permutation of the elements extracted
 * from the `iterable` using its `iterator()` function.
 *
 * Example:
 *
 *     > const r = random.random(42)
 *     > range(10) -> r.shuffle
 *     [7, 4, 6, 5, 2, 0, 1, 3, 8, 9]
 */
random.prototype.shuffle = fun(iterable) {
    const elements = [ iterable ... ]
    if elements.size > 1 {
        const max = elements.size - 1
        var   idx = max
        while idx {
            idx -= 1
            const idx2 = this.integer(0, max)

            if idx != idx2 {
                const tmp = elements[idx]
                elements[idx] = elements[idx2]
                elements[idx2] = tmp
            }
        }
    }
    return elements
}

/* @item random shuffle()
 *
 *     shuffle(iterable)
 *
 * Generates a pseudo-random permutation of elements from an iterable object.
 *
 * Returns an array containing a permutation of the elements extracted
 * from the `iterable` using its `iterator()` function.
 *
 * Example:
 *
 *     > range(10) -> random.shuffle
 *     [9, 4, 3, 0, 5, 7, 1, 6, 8, 2]
 */
public fun shuffle(iterable)
{
    return grandom.shuffle(iterable)
}

# TODO: sample, uniform float range, normal distribution
